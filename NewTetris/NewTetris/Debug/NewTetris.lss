
NewTetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000132  00800100  00001424  000014b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001424  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ae  00800232  00800232  000015ea  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000015ea  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000161c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000118  00000000  00000000  0000165c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000022e9  00000000  00000000  00001774  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c45  00000000  00000000  00003a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000128a  00000000  00000000  000046a2  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002d8  00000000  00000000  0000592c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000077e  00000000  00000000  00005c04  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000018e0  00000000  00000000  00006382  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000240  00000000  00000000  00007c62  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__ctors_end>
       4:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
       8:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
       c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      10:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      14:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      18:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      1c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      20:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      24:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      28:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      2c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      30:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      34:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      38:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_14>
      3c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      40:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      44:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      48:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_18>
      4c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      50:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      54:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      58:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      5c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      60:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      64:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	01 00       	.word	0x0001	; ????
      6c:	02 00       	.word	0x0002	; ????
      6e:	03 00       	.word	0x0003	; ????
      70:	04 00       	.word	0x0004	; ????
      72:	05 00       	.word	0x0005	; ????
      74:	06 00       	.word	0x0006	; ????
      76:	07 00       	.word	0x0007	; ????
      78:	08 00       	.word	0x0008	; ????
      7a:	09 00       	.word	0x0009	; ????
      7c:	0a 00       	.word	0x000a	; ????
      7e:	0b 00       	.word	0x000b	; ????
      80:	17 00       	.word	0x0017	; ????
      82:	16 00       	.word	0x0016	; ????
      84:	15 00       	.word	0x0015	; ????
      86:	14 00       	.word	0x0014	; ????
      88:	13 00       	.word	0x0013	; ????
      8a:	12 00       	.word	0x0012	; ????
      8c:	11 00       	.word	0x0011	; ????
      8e:	10 00       	.word	0x0010	; ????
      90:	0f 00       	.word	0x000f	; ????
      92:	0e 00       	.word	0x000e	; ????
      94:	0d 00       	.word	0x000d	; ????
      96:	0c 00       	.word	0x000c	; ????
      98:	18 00       	.word	0x0018	; ????
      9a:	19 00       	.word	0x0019	; ????
      9c:	1a 00       	.word	0x001a	; ????
      9e:	1b 00       	.word	0x001b	; ????
      a0:	1c 00       	.word	0x001c	; ????
      a2:	1d 00       	.word	0x001d	; ????
      a4:	1e 00       	.word	0x001e	; ????
      a6:	1f 00       	.word	0x001f	; ????
      a8:	20 00       	.word	0x0020	; ????
      aa:	21 00       	.word	0x0021	; ????
      ac:	22 00       	.word	0x0022	; ????
      ae:	23 00       	.word	0x0023	; ????
      b0:	2f 00       	.word	0x002f	; ????
      b2:	2e 00       	.word	0x002e	; ????
      b4:	2d 00       	.word	0x002d	; ????
      b6:	2c 00       	.word	0x002c	; ????
      b8:	2b 00       	.word	0x002b	; ????
      ba:	2a 00       	.word	0x002a	; ????
      bc:	29 00       	.word	0x0029	; ????
      be:	28 00       	.word	0x0028	; ????
      c0:	27 00       	.word	0x0027	; ????
      c2:	26 00       	.word	0x0026	; ????
      c4:	25 00       	.word	0x0025	; ????
      c6:	24 00       	.word	0x0024	; ????
      c8:	30 00       	.word	0x0030	; ????
      ca:	31 00       	.word	0x0031	; ????
      cc:	32 00       	.word	0x0032	; ????
      ce:	33 00       	.word	0x0033	; ????
      d0:	34 00       	.word	0x0034	; ????
      d2:	35 00       	.word	0x0035	; ????
      d4:	36 00       	.word	0x0036	; ????
      d6:	37 00       	.word	0x0037	; ????
      d8:	38 00       	.word	0x0038	; ????
      da:	39 00       	.word	0x0039	; ????
      dc:	3a 00       	.word	0x003a	; ????
      de:	3b 00       	.word	0x003b	; ????
      e0:	47 00       	.word	0x0047	; ????
      e2:	46 00       	.word	0x0046	; ????
      e4:	45 00       	.word	0x0045	; ????
      e6:	44 00       	.word	0x0044	; ????
      e8:	43 00       	.word	0x0043	; ????
      ea:	42 00       	.word	0x0042	; ????
      ec:	41 00       	.word	0x0041	; ????
      ee:	40 00       	.word	0x0040	; ????
      f0:	3f 00       	.word	0x003f	; ????
      f2:	3e 00       	.word	0x003e	; ????
      f4:	3d 00       	.word	0x003d	; ????
      f6:	3c 00       	.word	0x003c	; ????
      f8:	48 00       	.word	0x0048	; ????
      fa:	49 00       	.word	0x0049	; ????
      fc:	4a 00       	.word	0x004a	; ????
      fe:	4b 00       	.word	0x004b	; ????
     100:	4c 00       	.word	0x004c	; ????
     102:	4d 00       	.word	0x004d	; ????
     104:	4e 00       	.word	0x004e	; ????
     106:	4f 00       	.word	0x004f	; ????
     108:	50 00       	.word	0x0050	; ????
     10a:	51 00       	.word	0x0051	; ????
     10c:	52 00       	.word	0x0052	; ????
     10e:	53 00       	.word	0x0053	; ????
     110:	5f 00       	.word	0x005f	; ????
     112:	5e 00       	.word	0x005e	; ????
     114:	5d 00       	.word	0x005d	; ????
     116:	5c 00       	.word	0x005c	; ????
     118:	5b 00       	.word	0x005b	; ????
     11a:	5a 00       	.word	0x005a	; ????
     11c:	59 00       	.word	0x0059	; ????
     11e:	58 00       	.word	0x0058	; ????
     120:	57 00       	.word	0x0057	; ????
     122:	56 00       	.word	0x0056	; ????
     124:	55 00       	.word	0x0055	; ????
     126:	54 00       	.word	0x0054	; ????
     128:	60 00       	.word	0x0060	; ????
     12a:	61 00       	.word	0x0061	; ????
     12c:	62 00       	.word	0x0062	; ????
     12e:	63 00       	.word	0x0063	; ????
     130:	64 00       	.word	0x0064	; ????
     132:	65 00       	.word	0x0065	; ????
     134:	66 00       	.word	0x0066	; ????
     136:	67 00       	.word	0x0067	; ????
     138:	68 00       	.word	0x0068	; ????
     13a:	69 00       	.word	0x0069	; ????
     13c:	6a 00       	.word	0x006a	; ????
     13e:	6b 00       	.word	0x006b	; ????
     140:	77 00       	.word	0x0077	; ????
     142:	76 00       	.word	0x0076	; ????
     144:	75 00       	.word	0x0075	; ????
     146:	74 00       	.word	0x0074	; ????
     148:	73 00       	.word	0x0073	; ????
     14a:	72 00       	.word	0x0072	; ????
     14c:	71 00       	.word	0x0071	; ????
     14e:	70 00       	.word	0x0070	; ????
     150:	6f 00       	.word	0x006f	; ????
     152:	6e 00       	.word	0x006e	; ????
     154:	6d 00       	.word	0x006d	; ????
     156:	6c 00       	.word	0x006c	; ????
     158:	78 00       	.word	0x0078	; ????
     15a:	79 00       	.word	0x0079	; ????
     15c:	7a 00       	.word	0x007a	; ????
     15e:	7b 00       	.word	0x007b	; ????
     160:	7c 00       	.word	0x007c	; ????
     162:	7d 00       	.word	0x007d	; ????
     164:	7e 00       	.word	0x007e	; ????
     166:	7f 00       	.word	0x007f	; ????
     168:	80 00       	.word	0x0080	; ????
     16a:	81 00       	.word	0x0081	; ????
     16c:	82 00       	.word	0x0082	; ????
     16e:	83 00       	.word	0x0083	; ????
     170:	8f 00       	.word	0x008f	; ????
     172:	8e 00       	.word	0x008e	; ????
     174:	8d 00       	.word	0x008d	; ????
     176:	8c 00       	.word	0x008c	; ????
     178:	8b 00       	.word	0x008b	; ????
     17a:	8a 00       	.word	0x008a	; ????
     17c:	89 00       	.word	0x0089	; ????
     17e:	88 00       	.word	0x0088	; ????
     180:	87 00       	.word	0x0087	; ????
     182:	86 00       	.word	0x0086	; ????
     184:	85 00       	.word	0x0085	; ????
     186:	84 00       	.word	0x0084	; ????
     188:	90 00       	.word	0x0090	; ????
     18a:	91 00       	.word	0x0091	; ????
     18c:	92 00       	.word	0x0092	; ????
     18e:	93 00       	.word	0x0093	; ????
     190:	94 00       	.word	0x0094	; ????
     192:	95 00       	.word	0x0095	; ????
     194:	96 00       	.word	0x0096	; ????
     196:	97 00       	.word	0x0097	; ????
     198:	98 00       	.word	0x0098	; ????
     19a:	99 00       	.word	0x0099	; ????
     19c:	9a 00       	.word	0x009a	; ????
     19e:	9b 00       	.word	0x009b	; ????
     1a0:	a7 00       	.word	0x00a7	; ????
     1a2:	a6 00       	.word	0x00a6	; ????
     1a4:	a5 00       	.word	0x00a5	; ????
     1a6:	a4 00       	.word	0x00a4	; ????
     1a8:	a3 00       	.word	0x00a3	; ????
     1aa:	a2 00       	.word	0x00a2	; ????
     1ac:	a1 00       	.word	0x00a1	; ????
     1ae:	a0 00       	.word	0x00a0	; ????
     1b0:	9f 00       	.word	0x009f	; ????
     1b2:	9e 00       	.word	0x009e	; ????
     1b4:	9d 00       	.word	0x009d	; ????
     1b6:	9c 00       	.word	0x009c	; ????
     1b8:	a8 00       	.word	0x00a8	; ????
     1ba:	a9 00       	.word	0x00a9	; ????
     1bc:	aa 00       	.word	0x00aa	; ????
     1be:	ab 00       	.word	0x00ab	; ????
     1c0:	ac 00       	.word	0x00ac	; ????
     1c2:	ad 00       	.word	0x00ad	; ????
     1c4:	ae 00       	.word	0x00ae	; ????
     1c6:	af 00       	.word	0x00af	; ????
     1c8:	b0 00       	.word	0x00b0	; ????
     1ca:	b1 00       	.word	0x00b1	; ????
     1cc:	b2 00       	.word	0x00b2	; ????
     1ce:	b3 00       	.word	0x00b3	; ????
     1d0:	bf 00       	.word	0x00bf	; ????
     1d2:	be 00       	.word	0x00be	; ????
     1d4:	bd 00       	.word	0x00bd	; ????
     1d6:	bc 00       	.word	0x00bc	; ????
     1d8:	bb 00       	.word	0x00bb	; ????
     1da:	ba 00       	.word	0x00ba	; ????
     1dc:	b9 00       	.word	0x00b9	; ????
     1de:	b8 00       	.word	0x00b8	; ????
     1e0:	b7 00       	.word	0x00b7	; ????
     1e2:	b6 00       	.word	0x00b6	; ????
     1e4:	b5 00       	.word	0x00b5	; ????
     1e6:	b4 00       	.word	0x00b4	; ????
     1e8:	c0 00       	.word	0x00c0	; ????
     1ea:	c1 00       	.word	0x00c1	; ????
     1ec:	c2 00       	.word	0x00c2	; ????
     1ee:	c3 00       	.word	0x00c3	; ????
     1f0:	c4 00       	.word	0x00c4	; ????
     1f2:	c5 00       	.word	0x00c5	; ????
     1f4:	c6 00       	.word	0x00c6	; ????
     1f6:	c7 00       	.word	0x00c7	; ????
     1f8:	c8 00       	.word	0x00c8	; ????
     1fa:	c9 00       	.word	0x00c9	; ????
     1fc:	ca 00       	.word	0x00ca	; ????
     1fe:	cb 00       	.word	0x00cb	; ????
     200:	d7 00       	.word	0x00d7	; ????
     202:	d6 00       	.word	0x00d6	; ????
     204:	d5 00       	.word	0x00d5	; ????
     206:	d4 00       	.word	0x00d4	; ????
     208:	d3 00       	.word	0x00d3	; ????
     20a:	d2 00       	.word	0x00d2	; ????
     20c:	d1 00       	.word	0x00d1	; ????
     20e:	d0 00       	.word	0x00d0	; ????
     210:	cf 00       	.word	0x00cf	; ????
     212:	ce 00       	.word	0x00ce	; ????
     214:	cd 00       	.word	0x00cd	; ????
     216:	cc 00       	.word	0x00cc	; ????
     218:	d8 00       	.word	0x00d8	; ????
     21a:	d9 00       	.word	0x00d9	; ????
     21c:	da 00       	.word	0x00da	; ????
     21e:	db 00       	.word	0x00db	; ????
     220:	dc 00       	.word	0x00dc	; ????
     222:	dd 00       	.word	0x00dd	; ????
     224:	de 00       	.word	0x00de	; ????
     226:	df 00       	.word	0x00df	; ????
     228:	e0 00       	.word	0x00e0	; ????
     22a:	e1 00       	.word	0x00e1	; ????
     22c:	e2 00       	.word	0x00e2	; ????
     22e:	e3 00       	.word	0x00e3	; ????
     230:	ef 00       	.word	0x00ef	; ????
     232:	ee 00       	.word	0x00ee	; ????
     234:	ed 00       	.word	0x00ed	; ????
     236:	ec 00       	.word	0x00ec	; ????
     238:	eb 00       	.word	0x00eb	; ????
     23a:	ea 00       	.word	0x00ea	; ????
     23c:	e9 00       	.word	0x00e9	; ????
     23e:	e8 00       	.word	0x00e8	; ????
     240:	e7 00       	.word	0x00e7	; ????
     242:	e6 00       	.word	0x00e6	; ????
     244:	e5 00       	.word	0x00e5	; ????
     246:	e4 00       	.word	0x00e4	; ????
     248:	f0 00       	.word	0x00f0	; ????
     24a:	f1 00       	.word	0x00f1	; ????
     24c:	f2 00       	.word	0x00f2	; ????
     24e:	f3 00       	.word	0x00f3	; ????
     250:	f4 00       	.word	0x00f4	; ????
     252:	f5 00       	.word	0x00f5	; ????
     254:	f6 00       	.word	0x00f6	; ????
     256:	f7 00       	.word	0x00f7	; ????
     258:	f8 00       	.word	0x00f8	; ????
     25a:	f9 00       	.word	0x00f9	; ????
     25c:	fa 00       	.word	0x00fa	; ????
     25e:	fb 00       	.word	0x00fb	; ????
     260:	07 01       	movw	r0, r14
     262:	06 01       	movw	r0, r12
     264:	05 01       	movw	r0, r10
     266:	04 01       	movw	r0, r8
     268:	03 01       	movw	r0, r6
     26a:	02 01       	movw	r0, r4
     26c:	01 01       	movw	r0, r2
     26e:	00 01       	movw	r0, r0
     270:	ff 00       	.word	0x00ff	; ????
     272:	fe 00       	.word	0x00fe	; ????
     274:	fd 00       	.word	0x00fd	; ????
     276:	fc 00       	.word	0x00fc	; ????
     278:	08 01       	movw	r0, r16
     27a:	09 01       	movw	r0, r18
     27c:	0a 01       	movw	r0, r20
     27e:	0b 01       	movw	r0, r22
     280:	0c 01       	movw	r0, r24
     282:	0d 01       	movw	r0, r26
     284:	0e 01       	movw	r0, r28
     286:	0f 01       	movw	r0, r30
     288:	10 01       	movw	r2, r0
     28a:	11 01       	movw	r2, r2
     28c:	12 01       	movw	r2, r4
     28e:	13 01       	movw	r2, r6
     290:	1f 01       	movw	r2, r30
     292:	1e 01       	movw	r2, r28
     294:	1d 01       	movw	r2, r26
     296:	1c 01       	movw	r2, r24
     298:	1b 01       	movw	r2, r22
     29a:	1a 01       	movw	r2, r20
     29c:	19 01       	movw	r2, r18
     29e:	18 01       	movw	r2, r16
     2a0:	17 01       	movw	r2, r14
     2a2:	16 01       	movw	r2, r12
     2a4:	15 01       	movw	r2, r10
     2a6:	14 01       	movw	r2, r8
     2a8:	20 01       	movw	r4, r0
     2aa:	21 01       	movw	r4, r2
     2ac:	22 01       	movw	r4, r4
     2ae:	23 01       	movw	r4, r6
     2b0:	24 01       	movw	r4, r8
     2b2:	25 01       	movw	r4, r10
     2b4:	26 01       	movw	r4, r12
     2b6:	27 01       	movw	r4, r14
     2b8:	28 01       	movw	r4, r16
     2ba:	29 01       	movw	r4, r18
     2bc:	2a 01       	movw	r4, r20
     2be:	2b 01       	movw	r4, r22

000002c0 <randomcolor>:
     2c0:	04 00 00 00 07 00 03 00 06 00 02 00 05 00 09 00     ................
     2d0:	08 00 01 00 08 00 09 00 02 00 04 00 00 00 01 00     ................
     2e0:	06 00 07 00 05 00 03 00 08 00 01 00 03 00 02 00     ................
     2f0:	05 00 07 00 04 00 00 00 09 00 06 00 00 00 05 00     ................
     300:	09 00 08 00 02 00 01 00 07 00 06 00 03 00 04 00     ................

00000310 <randombrick>:
     310:	04 00 00 00 03 00 05 00 01 00 06 00 03 00 01 00     ................
     320:	04 00 03 00 02 00 00 00 06 00 05 00 00 00 05 00     ................
     330:	02 00 06 00 01 00 03 00 04 00 00 00 06 00 01 00     ................
     340:	03 00 05 00 02 00 04 00                             ........

00000348 <__ctors_end>:
     348:	11 24       	eor	r1, r1
     34a:	1f be       	out	0x3f, r1	; 63
     34c:	cf ef       	ldi	r28, 0xFF	; 255
     34e:	d8 e0       	ldi	r29, 0x08	; 8
     350:	de bf       	out	0x3e, r29	; 62
     352:	cd bf       	out	0x3d, r28	; 61

00000354 <__do_copy_data>:
     354:	12 e0       	ldi	r17, 0x02	; 2
     356:	a0 e0       	ldi	r26, 0x00	; 0
     358:	b1 e0       	ldi	r27, 0x01	; 1
     35a:	e4 e2       	ldi	r30, 0x24	; 36
     35c:	f4 e1       	ldi	r31, 0x14	; 20
     35e:	02 c0       	rjmp	.+4      	; 0x364 <__do_copy_data+0x10>
     360:	05 90       	lpm	r0, Z+
     362:	0d 92       	st	X+, r0
     364:	a2 33       	cpi	r26, 0x32	; 50
     366:	b1 07       	cpc	r27, r17
     368:	d9 f7       	brne	.-10     	; 0x360 <__do_copy_data+0xc>

0000036a <__do_clear_bss>:
     36a:	27 e0       	ldi	r18, 0x07	; 7
     36c:	a2 e3       	ldi	r26, 0x32	; 50
     36e:	b2 e0       	ldi	r27, 0x02	; 2
     370:	01 c0       	rjmp	.+2      	; 0x374 <.do_clear_bss_start>

00000372 <.do_clear_bss_loop>:
     372:	1d 92       	st	X+, r1

00000374 <.do_clear_bss_start>:
     374:	a0 3e       	cpi	r26, 0xE0	; 224
     376:	b2 07       	cpc	r27, r18
     378:	e1 f7       	brne	.-8      	; 0x372 <.do_clear_bss_loop>
     37a:	0e 94 bc 02 	call	0x578	; 0x578 <main>
     37e:	0c 94 10 0a 	jmp	0x1420	; 0x1420 <_exit>

00000382 <__bad_interrupt>:
     382:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000386 <ws2812_setleds>:
     386:	fc 01       	movw	r30, r24
     388:	9b 01       	movw	r18, r22
     38a:	22 0f       	add	r18, r18
     38c:	33 1f       	adc	r19, r19
     38e:	62 0f       	add	r22, r18
     390:	73 1f       	adc	r23, r19
     392:	8a b1       	in	r24, 0x0a	; 10
     394:	80 62       	ori	r24, 0x20	; 32
     396:	8a b9       	out	0x0a, r24	; 10
     398:	ab b1       	in	r26, 0x0b	; 11
     39a:	af 7d       	andi	r26, 0xDF	; 223
     39c:	5b b1       	in	r21, 0x0b	; 11
     39e:	50 62       	ori	r21, 0x20	; 32
     3a0:	bf b7       	in	r27, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	10 c0       	rjmp	.+32     	; 0x3c6 <loop51+0x16>
     3a6:	9f 01       	movw	r18, r30
     3a8:	2f 5f       	subi	r18, 0xFF	; 255
     3aa:	3f 4f       	sbci	r19, 0xFF	; 255
     3ac:	40 81       	ld	r20, Z
     3ae:	68 e0       	ldi	r22, 0x08	; 8

000003b0 <loop51>:
     3b0:	5b b9       	out	0x0b, r21	; 11
     3b2:	47 ff       	sbrs	r20, 7
     3b4:	ab b9       	out	0x0b, r26	; 11
     3b6:	44 0f       	add	r20, r20
     3b8:	00 00       	nop
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <loop51+0xc>
     3bc:	ab b9       	out	0x0b, r26	; 11
     3be:	6a 95       	dec	r22
     3c0:	b9 f7       	brne	.-18     	; 0x3b0 <loop51>
     3c2:	bc 01       	movw	r22, r24
     3c4:	f9 01       	movw	r30, r18
     3c6:	cb 01       	movw	r24, r22
     3c8:	01 97       	sbiw	r24, 0x01	; 1
     3ca:	67 2b       	or	r22, r23
     3cc:	61 f7       	brne	.-40     	; 0x3a6 <ws2812_setleds+0x20>
     3ce:	bf bf       	out	0x3f, r27	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d0:	85 e8       	ldi	r24, 0x85	; 133
     3d2:	8a 95       	dec	r24
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <loop51+0x22>
     3d6:	00 00       	nop
     3d8:	08 95       	ret

000003da <init>:
volatile USARTRX_st rxUSART = {0, 0, 0, 0};
char transmit_buffer[10];

void init()
{
	DDRB|=_BV(ws2812_pin);  // (1 << ws2812_pin)
     3da:	84 b1       	in	r24, 0x04	; 4
     3dc:	80 62       	ori	r24, 0x20	; 32
     3de:	84 b9       	out	0x04, r24	; 4
	clearTable();
     3e0:	0e 94 10 08 	call	0x1020	; 0x1020 <clearTable>
	menu();
     3e4:	0e 94 39 08 	call	0x1072	; 0x1072 <menu>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3e8:	2f e7       	ldi	r18, 0x7F	; 127
     3ea:	88 e3       	ldi	r24, 0x38	; 56
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	80 40       	sbci	r24, 0x00	; 0
     3f2:	90 40       	sbci	r25, 0x00	; 0
     3f4:	e1 f7       	brne	.-8      	; 0x3ee <init+0x14>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <init+0x1e>
     3f8:	00 00       	nop
	_delay_ms(ws2812_resettime);
	
	
	//Config CTC LED 1Hz
	DDRB |= (1<<DDB1);		// Config PORTB Pin B1 as Output
     3fa:	84 b1       	in	r24, 0x04	; 4
     3fc:	82 60       	ori	r24, 0x02	; 2
     3fe:	84 b9       	out	0x04, r24	; 4
	//DDRB = 0b00000010;	// Another way of doing the previous line

	PORTB = 0b00000010;		// Pin B1 ON
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	85 b9       	out	0x05, r24	; 5
	//PORTD |= (1<<PORTD5);

	OCR0A = 39;				// OCR0A = (T * fclk_IO / Prescaler) - 1 ~= 39; T = 0.005s = 5ms; fclk_IO = 8000000Hz = 8MHz; Prescaler = 1024
     404:	97 e2       	ldi	r25, 0x27	; 39
     406:	97 bd       	out	0x27, r25	; 39

	TCCR0A = 0b00000010;	// TCCR0A - CTC in Normal mode
     408:	84 bd       	out	0x24, r24	; 36
	//TCCR0A |= (1<<WGM01);

	TCCR0B = 0b11000101;	// TCCR0B - Force Output Compare A & B; Prescaler 1024
     40a:	95 ec       	ldi	r25, 0xC5	; 197
     40c:	95 bd       	out	0x25, r25	; 37
	//TCCR0B |= (1<<FOC0A)|(1<<FOC0B)|(1<<CS02)|(1<<CS00);

	TIMSK0 |= (1<<OCIE0A);	// TIMSK0 - Output Compare Match A Interrupt Enabled
     40e:	ee e6       	ldi	r30, 0x6E	; 110
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	90 81       	ld	r25, Z
     414:	92 60       	ori	r25, 0x02	; 2
     416:	90 83       	st	Z, r25
	//TIMSK0 = 0b00000010;
	
	
	//Config Bluetooth
	UBRR0H = 0;
     418:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
	UBRR0L = 103;									// Set baud rate to 9600 with f = 8MHz
     41c:	97 e6       	ldi	r25, 0x67	; 103
     41e:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
	UCSR0A = (1<<U2X0);								//Asynchronous Double speed
     422:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
	UCSR0B |= (1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);	// Interrupt enable, Enable receive and transmit
     426:	e1 ec       	ldi	r30, 0xC1	; 193
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	88 69       	ori	r24, 0x98	; 152
     42e:	80 83       	st	Z, r24
	UCSR0C |= (1<<UCSZ01)|(1<<UCSZ00);				//8-bit configuration
     430:	e2 ec       	ldi	r30, 0xC2	; 194
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	86 60       	ori	r24, 0x06	; 6
     438:	80 83       	st	Z, r24
	
	sei();	
     43a:	78 94       	sei
     43c:	08 95       	ret

0000043e <__vector_18>:
}

ISR(USART_RX_vect)
{
     43e:	1f 92       	push	r1
     440:	0f 92       	push	r0
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
     448:	8f 93       	push	r24
     44a:	af 93       	push	r26
     44c:	bf 93       	push	r27
     44e:	ef 93       	push	r30
     450:	ff 93       	push	r31
	rxUSART.status = UCSR0A;
     452:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     456:	e2 e3       	ldi	r30, 0x32	; 50
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	81 83       	std	Z+1, r24	; 0x01
	
	if ( rxUSART.status & ((1<<FE0) | (1<<DOR0) | (1>>UPE0)))
     45c:	81 81       	ldd	r24, Z+1	; 0x01
     45e:	88 71       	andi	r24, 0x18	; 24
     460:	29 f0       	breq	.+10     	; 0x46c <__vector_18+0x2e>
	rxUSART.error = 1;
     462:	e4 e3       	ldi	r30, 0x34	; 52
     464:	f2 e0       	ldi	r31, 0x02	; 2
     466:	80 81       	ld	r24, Z
     468:	82 60       	ori	r24, 0x02	; 2
     46a:	80 83       	st	Z, r24
	
	rxUSART.receiver_buffer = UDR0;
     46c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     470:	e2 e3       	ldi	r30, 0x32	; 50
     472:	f2 e0       	ldi	r31, 0x02	; 2
     474:	80 83       	st	Z, r24
	rxUSART.receive = 1;
     476:	a4 e3       	ldi	r26, 0x34	; 52
     478:	b2 e0       	ldi	r27, 0x02	; 2
     47a:	8c 91       	ld	r24, X
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	8c 93       	st	X, r24
	
	button = rxUSART.receiver_buffer;
     480:	80 81       	ld	r24, Z
     482:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <button>
}
     486:	ff 91       	pop	r31
     488:	ef 91       	pop	r30
     48a:	bf 91       	pop	r27
     48c:	af 91       	pop	r26
     48e:	8f 91       	pop	r24
     490:	0f 90       	pop	r0
     492:	0f be       	out	0x3f, r0	; 63
     494:	0f 90       	pop	r0
     496:	1f 90       	pop	r1
     498:	18 95       	reti

0000049a <__vector_14>:

ISR(TIMER0_COMPA_vect) {	// Timer 0
     49a:	1f 92       	push	r1
     49c:	0f 92       	push	r0
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	0f 92       	push	r0
     4a2:	11 24       	eor	r1, r1
     4a4:	2f 93       	push	r18
     4a6:	3f 93       	push	r19
     4a8:	4f 93       	push	r20
     4aa:	5f 93       	push	r21
     4ac:	6f 93       	push	r22
     4ae:	7f 93       	push	r23
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	af 93       	push	r26
     4b6:	bf 93       	push	r27
     4b8:	ef 93       	push	r30
     4ba:	ff 93       	push	r31
	count_1000++;
     4bc:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <count_1000>
     4c0:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <count_1000+0x1>
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <count_1000+0x1>
     4ca:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <count_1000>
	countspeed++;
     4ce:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <countspeed>
     4d2:	90 91 4f 02 	lds	r25, 0x024F	; 0x80024f <countspeed+0x1>
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	90 93 4f 02 	sts	0x024F, r25	; 0x80024f <countspeed+0x1>
     4dc:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <countspeed>
	
	if (count_1000 == 100)	// When Timer 0 counts to 100, time = 0.005 * 100 = 0.5s = 500ms
     4e0:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <count_1000>
     4e4:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <count_1000+0x1>
     4e8:	84 36       	cpi	r24, 0x64	; 100
     4ea:	91 05       	cpc	r25, r1
     4ec:	c1 f4       	brne	.+48     	; 0x51e <__vector_14+0x84>
	{
		count_1000 = 0;		// Resets Timer
     4ee:	10 92 36 02 	sts	0x0236, r1	; 0x800236 <count_1000+0x1>
     4f2:	10 92 35 02 	sts	0x0235, r1	; 0x800235 <count_1000>

		if (flag_LED == 1)	// If LED ON
     4f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	31 f4       	brne	.+12     	; 0x50e <__vector_14+0x74>
		{
			PORTB = 0b00000000;
     502:	15 b8       	out	0x05, r1	; 5
			flag_LED = 0;	// Turns LED OFF
     504:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     508:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     50c:	08 c0       	rjmp	.+16     	; 0x51e <__vector_14+0x84>
		}
		else				// If LED OFF
		{
			PORTB = 0b00000010;
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	85 b9       	out	0x05, r24	; 5
			flag_LED = 1;	// Turns LED ON
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     51a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
	
	// 200 * 0.005 * 200 = 1s
	if (countspeed >= falltime && startgame == 1 && pause == 0) 
     51e:	20 91 4e 02 	lds	r18, 0x024E	; 0x80024e <countspeed>
     522:	30 91 4f 02 	lds	r19, 0x024F	; 0x80024f <countspeed+0x1>
     526:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <falltime>
     52a:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <falltime+0x1>
     52e:	28 17       	cp	r18, r24
     530:	39 07       	cpc	r19, r25
     532:	8c f0       	brlt	.+34     	; 0x556 <__vector_14+0xbc>
     534:	80 91 38 02 	lds	r24, 0x0238	; 0x800238 <startgame>
     538:	90 91 39 02 	lds	r25, 0x0239	; 0x800239 <startgame+0x1>
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	59 f4       	brne	.+22     	; 0x556 <__vector_14+0xbc>
     540:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <pause>
     544:	81 11       	cpse	r24, r1
     546:	07 c0       	rjmp	.+14     	; 0x556 <__vector_14+0xbc>
	{
		shiftActiveBrick('d');
     548:	84 e6       	ldi	r24, 0x64	; 100
     54a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <shiftActiveBrick>
		countspeed = 0;						// Reset Timer
     54e:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <countspeed+0x1>
     552:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <countspeed>
	}
}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	0f be       	out	0x3f, r0	; 63
     572:	0f 90       	pop	r0
     574:	1f 90       	pop	r1
     576:	18 95       	reti

00000578 <main>:

int main(void)
{
	while(1)
	{
		init();
     578:	0e 94 ed 01 	call	0x3da	; 0x3da <init>
     57c:	2f ef       	ldi	r18, 0xFF	; 255
     57e:	89 e6       	ldi	r24, 0x69	; 105
     580:	98 e1       	ldi	r25, 0x18	; 24
     582:	21 50       	subi	r18, 0x01	; 1
     584:	80 40       	sbci	r24, 0x00	; 0
     586:	90 40       	sbci	r25, 0x00	; 0
     588:	e1 f7       	brne	.-8      	; 0x582 <main+0xa>
     58a:	00 c0       	rjmp	.+0      	; 0x58c <main+0x14>
     58c:	00 00       	nop
		_delay_ms(1000);
		
		// Waits for a button to be pressed for game to start
		while (button != 'a' && button != 's' && button != 'd' && button != 'j'  && button != 'k'  && button != 'l' );
     58e:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <button>
     592:	81 36       	cpi	r24, 0x61	; 97
     594:	a1 f0       	breq	.+40     	; 0x5be <main+0x46>
     596:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <button>
     59a:	83 37       	cpi	r24, 0x73	; 115
     59c:	81 f0       	breq	.+32     	; 0x5be <main+0x46>
     59e:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <button>
     5a2:	84 36       	cpi	r24, 0x64	; 100
     5a4:	61 f0       	breq	.+24     	; 0x5be <main+0x46>
     5a6:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <button>
     5aa:	8a 36       	cpi	r24, 0x6A	; 106
     5ac:	41 f0       	breq	.+16     	; 0x5be <main+0x46>
     5ae:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <button>
     5b2:	8b 36       	cpi	r24, 0x6B	; 107
     5b4:	21 f0       	breq	.+8      	; 0x5be <main+0x46>
     5b6:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <button>
     5ba:	8c 36       	cpi	r24, 0x6C	; 108
     5bc:	41 f7       	brne	.-48     	; 0x58e <main+0x16>
		startgame = 1;
     5be:	81 e0       	ldi	r24, 0x01	; 1
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	90 93 39 02 	sts	0x0239, r25	; 0x800239 <startgame+0x1>
     5c6:	80 93 38 02 	sts	0x0238, r24	; 0x800238 <startgame>
		clearTable();
     5ca:	0e 94 10 08 	call	0x1020	; 0x1020 <clearTable>
		
		// Resets button so it does not perform action
		button = ' ';
     5ce:	80 e2       	ldi	r24, 0x20	; 32
     5d0:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <button>
		newActiveBrick();
     5d4:	0e 94 56 05 	call	0xaac	; 0xaac <newActiveBrick>
		while(1)
		{
			// Checks for pressed button
			switch (button)
     5d8:	80 91 4d 02 	lds	r24, 0x024D	; 0x80024d <button>
     5dc:	8a 36       	cpi	r24, 0x6A	; 106
     5de:	c9 f0       	breq	.+50     	; 0x612 <main+0x9a>
     5e0:	28 f4       	brcc	.+10     	; 0x5ec <main+0x74>
     5e2:	81 36       	cpi	r24, 0x61	; 97
     5e4:	51 f0       	breq	.+20     	; 0x5fa <main+0x82>
     5e6:	84 36       	cpi	r24, 0x64	; 100
     5e8:	61 f0       	breq	.+24     	; 0x602 <main+0x8a>
     5ea:	22 c0       	rjmp	.+68     	; 0x630 <main+0xb8>
     5ec:	80 37       	cpi	r24, 0x70	; 112
     5ee:	b9 f0       	breq	.+46     	; 0x61e <main+0xa6>
     5f0:	83 37       	cpi	r24, 0x73	; 115
     5f2:	59 f0       	breq	.+22     	; 0x60a <main+0x92>
     5f4:	8b 36       	cpi	r24, 0x6B	; 107
     5f6:	e1 f4       	brne	.+56     	; 0x630 <main+0xb8>
     5f8:	0f c0       	rjmp	.+30     	; 0x618 <main+0xa0>
			{
				// Left
				case 'a':
				shiftActiveBrick('l');
     5fa:	8c e6       	ldi	r24, 0x6C	; 108
     5fc:	0e 94 da 06 	call	0xdb4	; 0xdb4 <shiftActiveBrick>
				break;
     600:	17 c0       	rjmp	.+46     	; 0x630 <main+0xb8>

				// Right
				case 'd':
				shiftActiveBrick('r');
     602:	82 e7       	ldi	r24, 0x72	; 114
     604:	0e 94 da 06 	call	0xdb4	; 0xdb4 <shiftActiveBrick>
				break;
     608:	13 c0       	rjmp	.+38     	; 0x630 <main+0xb8>
			
				// Down
				case 's':
				shiftActiveBrick('d');
     60a:	84 e6       	ldi	r24, 0x64	; 100
     60c:	0e 94 da 06 	call	0xdb4	; 0xdb4 <shiftActiveBrick>
				break;
     610:	0f c0       	rjmp	.+30     	; 0x630 <main+0xb8>
			
				// Rotate
				case 'j':
				rotateActiveBrick();
     612:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <rotateActiveBrick>
				break;
     616:	0c c0       	rjmp	.+24     	; 0x630 <main+0xb8>
			
				// Force down
				case 'k':
				forcedown();
     618:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <forcedown>
				break;
     61c:	09 c0       	rjmp	.+18     	; 0x630 <main+0xb8>
			
				// Pause
				case 'p':
				pause += 1;
     61e:	80 91 37 02 	lds	r24, 0x0237	; 0x800237 <pause>
     622:	8f 5f       	subi	r24, 0xFF	; 255
     624:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <pause>
				pause = Pause(pause);
     628:	0e 94 2c 08 	call	0x1058	; 0x1058 <Pause>
     62c:	80 93 37 02 	sts	0x0237, r24	; 0x800237 <pause>
				break;
			}
			checkFullLines();
     630:	0e 94 80 07 	call	0xf00	; 0xf00 <checkFullLines>
			button = ' ';
     634:	80 e2       	ldi	r24, 0x20	; 32
     636:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <button>
     63a:	2f e7       	ldi	r18, 0x7F	; 127
     63c:	88 e3       	ldi	r24, 0x38	; 56
     63e:	91 e0       	ldi	r25, 0x01	; 1
     640:	21 50       	subi	r18, 0x01	; 1
     642:	80 40       	sbci	r24, 0x00	; 0
     644:	90 40       	sbci	r25, 0x00	; 0
     646:	e1 f7       	brne	.-8      	; 0x640 <main+0xc8>
     648:	00 c0       	rjmp	.+0      	; 0x64a <main+0xd2>
     64a:	00 00       	nop
			_delay_ms(50);
			if (tetrisGameOver) 
     64c:	80 91 40 02 	lds	r24, 0x0240	; 0x800240 <tetrisGameOver>
     650:	88 23       	and	r24, r24
     652:	11 f2       	breq	.-124    	; 0x5d8 <main+0x60>
			{
				falltime = 200;
     654:	88 ec       	ldi	r24, 0xC8	; 200
     656:	90 e0       	ldi	r25, 0x00	; 0
     658:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <falltime+0x1>
     65c:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <falltime>
				clearTable();
     660:	0e 94 10 08 	call	0x1020	; 0x1020 <clearTable>
				clearField();
     664:	0e 94 f2 07 	call	0xfe4	; 0xfe4 <clearField>
				tetrisGameOver = 0;
     668:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <tetrisGameOver>
				startgame = 0;
     66c:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <startgame+0x1>
     670:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <startgame>
				break;
			}
		}
	}
     674:	81 cf       	rjmp	.-254    	; 0x578 <main>

00000676 <addActiveBrickToField>:
	clearTable();
	return paus;
}

void addActiveBrickToField()
{
     676:	1f 93       	push	r17
     678:	cf 93       	push	r28
     67a:	df 93       	push	r29
	byte fx, fy;					// used to check if brick is within bounds, no trespassing outside
	for (byte by = 0; by < 4; by++)
     67c:	b0 e0       	ldi	r27, 0x00	; 0
     67e:	40 c0       	rjmp	.+128    	; 0x700 <addActiveBrickToField+0x8a>
	{
		for (byte bx = 0; bx < 4; bx++)
		{
			fx = activeBrick.xpos + bx;
     680:	e4 ed       	ldi	r30, 0xD4	; 212
     682:	f5 e0       	ldi	r31, 0x05	; 5
     684:	81 81       	ldd	r24, Z+1	; 0x01
     686:	8a 0f       	add	r24, r26
			fy = activeBrick.ypos + by;
     688:	22 81       	ldd	r18, Z+2	; 0x02
     68a:	2b 0f       	add	r18, r27
			
			//Check if Hitbox inside playing field
			if (fx >= 0 && fy >= 0 && fx < column && fy < row && activeBrick.pix[by][bx]) { 
     68c:	8c 30       	cpi	r24, 0x0C	; 12
     68e:	90 f5       	brcc	.+100    	; 0x6f4 <addActiveBrickToField+0x7e>
     690:	24 31       	cpi	r18, 0x14	; 20
     692:	80 f5       	brcc	.+96     	; 0x6f4 <addActiveBrickToField+0x7e>
     694:	4b 2f       	mov	r20, r27
     696:	50 e0       	ldi	r21, 0x00	; 0
     698:	6a 2f       	mov	r22, r26
     69a:	70 e0       	ldi	r23, 0x00	; 0
     69c:	fa 01       	movw	r30, r20
     69e:	ee 0f       	add	r30, r30
     6a0:	ff 1f       	adc	r31, r31
     6a2:	ee 0f       	add	r30, r30
     6a4:	ff 1f       	adc	r31, r31
     6a6:	ec 52       	subi	r30, 0x2C	; 44
     6a8:	fa 4f       	sbci	r31, 0xFA	; 250
     6aa:	e6 0f       	add	r30, r22
     6ac:	f7 1f       	adc	r31, r23
     6ae:	15 81       	ldd	r17, Z+5	; 0x05
     6b0:	11 23       	and	r17, r17
     6b2:	01 f1       	breq	.+64     	; 0x6f4 <addActiveBrickToField+0x7e>
				field.pix[fy][fx] = activeBrick.pix[by][bx];
     6b4:	30 e0       	ldi	r19, 0x00	; 0
     6b6:	90 e0       	ldi	r25, 0x00	; 0
     6b8:	e9 01       	movw	r28, r18
     6ba:	cc 0f       	add	r28, r28
     6bc:	dd 1f       	adc	r29, r29
     6be:	fe 01       	movw	r30, r28
     6c0:	e2 0f       	add	r30, r18
     6c2:	f3 1f       	adc	r31, r19
     6c4:	ee 0f       	add	r30, r30
     6c6:	ff 1f       	adc	r31, r31
     6c8:	ee 0f       	add	r30, r30
     6ca:	ff 1f       	adc	r31, r31
     6cc:	e0 50       	subi	r30, 0x00	; 0
     6ce:	fa 4f       	sbci	r31, 0xFA	; 250
     6d0:	e8 0f       	add	r30, r24
     6d2:	f9 1f       	adc	r31, r25
     6d4:	10 83       	st	Z, r17
				field.color[fy][fx] = activeBrick.color;
     6d6:	10 91 e9 05 	lds	r17, 0x05E9	; 0x8005e9 <activeBrick+0x15>
     6da:	e0 51       	subi	r30, 0x10	; 16
     6dc:	ff 4f       	sbci	r31, 0xFF	; 255
     6de:	10 83       	st	Z, r17
				activeBrick.pix[by][bx] = 0;
     6e0:	44 0f       	add	r20, r20
     6e2:	55 1f       	adc	r21, r21
     6e4:	44 0f       	add	r20, r20
     6e6:	55 1f       	adc	r21, r21
     6e8:	4c 52       	subi	r20, 0x2C	; 44
     6ea:	5a 4f       	sbci	r21, 0xFA	; 250
     6ec:	fa 01       	movw	r30, r20
     6ee:	e6 0f       	add	r30, r22
     6f0:	f7 1f       	adc	r31, r23
     6f2:	15 82       	std	Z+5, r1	; 0x05
void addActiveBrickToField()
{
	byte fx, fy;					// used to check if brick is within bounds, no trespassing outside
	for (byte by = 0; by < 4; by++)
	{
		for (byte bx = 0; bx < 4; bx++)
     6f4:	af 5f       	subi	r26, 0xFF	; 255
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <addActiveBrickToField+0x84>
     6f8:	a0 e0       	ldi	r26, 0x00	; 0
     6fa:	a4 30       	cpi	r26, 0x04	; 4
     6fc:	08 f2       	brcs	.-126    	; 0x680 <addActiveBrickToField+0xa>
}

void addActiveBrickToField()
{
	byte fx, fy;					// used to check if brick is within bounds, no trespassing outside
	for (byte by = 0; by < 4; by++)
     6fe:	bf 5f       	subi	r27, 0xFF	; 255
     700:	b4 30       	cpi	r27, 0x04	; 4
     702:	d0 f3       	brcs	.-12     	; 0x6f8 <addActiveBrickToField+0x82>
				field.color[fy][fx] = activeBrick.color;
				activeBrick.pix[by][bx] = 0;
			}
		}
	}
	I_rot = 0;
     704:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <I_rot>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     708:	85 e8       	ldi	r24, 0x85	; 133
     70a:	8a 95       	dec	r24
     70c:	f1 f7       	brne	.-4      	; 0x70a <addActiveBrickToField+0x94>
     70e:	00 00       	nop
	_delay_us(ws2812_resettime);
}
     710:	df 91       	pop	r29
     712:	cf 91       	pop	r28
     714:	1f 91       	pop	r17
     716:	08 95       	ret

00000718 <checkSidesCollision>:

//Check vertical collision with sides of field
int checkSidesCollision(struct Brick* brick) 
{	
     718:	dc 01       	movw	r26, r24
	byte fx; 
	for (byte by = 0; by < 4; by++) 
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	19 c0       	rjmp	.+50     	; 0x750 <checkSidesCollision+0x38>
	{
		for (byte bx = 0; bx < 4; bx++) 
		{
			if ((*brick).pix[by][bx]) 
     71e:	e3 2f       	mov	r30, r19
     720:	f0 e0       	ldi	r31, 0x00	; 0
     722:	ee 0f       	add	r30, r30
     724:	ff 1f       	adc	r31, r31
     726:	ee 0f       	add	r30, r30
     728:	ff 1f       	adc	r31, r31
     72a:	ea 0f       	add	r30, r26
     72c:	fb 1f       	adc	r31, r27
     72e:	e9 0f       	add	r30, r25
     730:	f1 1d       	adc	r31, r1
     732:	25 81       	ldd	r18, Z+5	; 0x05
     734:	22 23       	and	r18, r18
     736:	31 f0       	breq	.+12     	; 0x744 <checkSidesCollision+0x2c>
			{
				fx = (*brick).xpos + bx;		//Determine the brick.pix position on the field
     738:	11 96       	adiw	r26, 0x01	; 1
     73a:	2c 91       	ld	r18, X
     73c:	11 97       	sbiw	r26, 0x01	; 1
     73e:	29 0f       	add	r18, r25
				if (fx < 0 || fx >= column) 
     740:	2c 30       	cpi	r18, 0x0C	; 12
     742:	58 f4       	brcc	.+22     	; 0x75a <checkSidesCollision+0x42>
int checkSidesCollision(struct Brick* brick) 
{	
	byte fx; 
	for (byte by = 0; by < 4; by++) 
	{
		for (byte bx = 0; bx < 4; bx++) 
     744:	9f 5f       	subi	r25, 0xFF	; 255
     746:	01 c0       	rjmp	.+2      	; 0x74a <checkSidesCollision+0x32>
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	94 30       	cpi	r25, 0x04	; 4
     74c:	40 f3       	brcs	.-48     	; 0x71e <checkSidesCollision+0x6>

//Check vertical collision with sides of field
int checkSidesCollision(struct Brick* brick) 
{	
	byte fx; 
	for (byte by = 0; by < 4; by++) 
     74e:	3f 5f       	subi	r19, 0xFF	; 255
     750:	34 30       	cpi	r19, 0x04	; 4
     752:	d0 f3       	brcs	.-12     	; 0x748 <checkSidesCollision+0x30>
					return 1;
				}
			}
		}
	}
	return 0;
     754:	80 e0       	ldi	r24, 0x00	; 0
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	08 95       	ret
			if ((*brick).pix[by][bx]) 
			{
				fx = (*brick).xpos + bx;		//Determine the brick.pix position on the field
				if (fx < 0 || fx >= column) 
				{
					return 1;
     75a:	81 e0       	ldi	r24, 0x01	; 1
     75c:	90 e0       	ldi	r25, 0x00	; 0
				}
			}
		}
	}
	return 0;
}
     75e:	08 95       	ret

00000760 <checkFieldCollision>:

int checkFieldCollision(struct Brick* brick)
{
     760:	dc 01       	movw	r26, r24
	   byte bx, by;
	   byte fx, fy;
	   for (by = 0; by < 4; by++) 
     762:	40 e0       	ldi	r20, 0x00	; 0
     764:	2c c0       	rjmp	.+88     	; 0x7be <checkFieldCollision+0x5e>
	   {
		   for (bx = 0; bx < 4; bx++) 
		   {
			   fx = (*brick).xpos + bx;
     766:	11 96       	adiw	r26, 0x01	; 1
     768:	9c 91       	ld	r25, X
     76a:	11 97       	sbiw	r26, 0x01	; 1
     76c:	98 0f       	add	r25, r24
			   fy = (*brick).ypos + by;
     76e:	12 96       	adiw	r26, 0x02	; 2
     770:	2c 91       	ld	r18, X
     772:	12 97       	sbiw	r26, 0x02	; 2
     774:	24 0f       	add	r18, r20
			   
			   // Check if next led is on
			   if (( (*brick).pix[by][bx] == 1) && ( field.pix[fy][fx] == 1)) 
     776:	e4 2f       	mov	r30, r20
     778:	f0 e0       	ldi	r31, 0x00	; 0
     77a:	ee 0f       	add	r30, r30
     77c:	ff 1f       	adc	r31, r31
     77e:	ee 0f       	add	r30, r30
     780:	ff 1f       	adc	r31, r31
     782:	ea 0f       	add	r30, r26
     784:	fb 1f       	adc	r31, r27
     786:	e8 0f       	add	r30, r24
     788:	f1 1d       	adc	r31, r1
     78a:	35 81       	ldd	r19, Z+5	; 0x05
     78c:	31 30       	cpi	r19, 0x01	; 1
     78e:	89 f4       	brne	.+34     	; 0x7b2 <checkFieldCollision+0x52>
     790:	30 e0       	ldi	r19, 0x00	; 0
     792:	f9 01       	movw	r30, r18
     794:	ee 0f       	add	r30, r30
     796:	ff 1f       	adc	r31, r31
     798:	e2 0f       	add	r30, r18
     79a:	f3 1f       	adc	r31, r19
     79c:	ee 0f       	add	r30, r30
     79e:	ff 1f       	adc	r31, r31
     7a0:	ee 0f       	add	r30, r30
     7a2:	ff 1f       	adc	r31, r31
     7a4:	e0 50       	subi	r30, 0x00	; 0
     7a6:	fa 4f       	sbci	r31, 0xFA	; 250
     7a8:	e9 0f       	add	r30, r25
     7aa:	f1 1d       	adc	r31, r1
     7ac:	90 81       	ld	r25, Z
     7ae:	91 30       	cpi	r25, 0x01	; 1
     7b0:	59 f0       	breq	.+22     	; 0x7c8 <checkFieldCollision+0x68>
{
	   byte bx, by;
	   byte fx, fy;
	   for (by = 0; by < 4; by++) 
	   {
		   for (bx = 0; bx < 4; bx++) 
     7b2:	8f 5f       	subi	r24, 0xFF	; 255
     7b4:	01 c0       	rjmp	.+2      	; 0x7b8 <checkFieldCollision+0x58>
     7b6:	80 e0       	ldi	r24, 0x00	; 0
     7b8:	84 30       	cpi	r24, 0x04	; 4
     7ba:	a8 f2       	brcs	.-86     	; 0x766 <checkFieldCollision+0x6>

int checkFieldCollision(struct Brick* brick)
{
	   byte bx, by;
	   byte fx, fy;
	   for (by = 0; by < 4; by++) 
     7bc:	4f 5f       	subi	r20, 0xFF	; 255
     7be:	44 30       	cpi	r20, 0x04	; 4
     7c0:	d0 f3       	brcs	.-12     	; 0x7b6 <checkFieldCollision+0x56>
			   {
				   return 1;
			   }
		   }
	   }
	   return 0;
     7c2:	80 e0       	ldi	r24, 0x00	; 0
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	08 95       	ret
			   fy = (*brick).ypos + by;
			   
			   // Check if next led is on
			   if (( (*brick).pix[by][bx] == 1) && ( field.pix[fy][fx] == 1)) 
			   {
				   return 1;
     7c8:	81 e0       	ldi	r24, 0x01	; 1
     7ca:	90 e0       	ldi	r25, 0x00	; 0
			   }
		   }
	   }
	   return 0;
  }
     7cc:	08 95       	ret

000007ce <clearNext>:
	
//Clear space where the next brick is displayed
void clearNext()
{
	for (int x = 7; x < 12; x++)
     7ce:	27 e0       	ldi	r18, 0x07	; 7
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	17 c0       	rjmp	.+46     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
	{
		for (int y = 20; y < 24; y++)
		{
			field.pix[y][x] = 0;
     7d4:	fc 01       	movw	r30, r24
     7d6:	ee 0f       	add	r30, r30
     7d8:	ff 1f       	adc	r31, r31
     7da:	e8 0f       	add	r30, r24
     7dc:	f9 1f       	adc	r31, r25
     7de:	ee 0f       	add	r30, r30
     7e0:	ff 1f       	adc	r31, r31
     7e2:	ee 0f       	add	r30, r30
     7e4:	ff 1f       	adc	r31, r31
     7e6:	e0 50       	subi	r30, 0x00	; 0
     7e8:	fa 4f       	sbci	r31, 0xFA	; 250
     7ea:	e2 0f       	add	r30, r18
     7ec:	f3 1f       	adc	r31, r19
     7ee:	10 82       	st	Z, r1
//Clear space where the next brick is displayed
void clearNext()
{
	for (int x = 7; x < 12; x++)
	{
		for (int y = 20; y < 24; y++)
     7f0:	01 96       	adiw	r24, 0x01	; 1
     7f2:	02 c0       	rjmp	.+4      	; 0x7f8 <clearNext+0x2a>
     7f4:	84 e1       	ldi	r24, 0x14	; 20
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	88 31       	cpi	r24, 0x18	; 24
     7fa:	91 05       	cpc	r25, r1
     7fc:	5c f3       	brlt	.-42     	; 0x7d4 <clearNext+0x6>
  }
	
//Clear space where the next brick is displayed
void clearNext()
{
	for (int x = 7; x < 12; x++)
     7fe:	2f 5f       	subi	r18, 0xFF	; 255
     800:	3f 4f       	sbci	r19, 0xFF	; 255
     802:	2c 30       	cpi	r18, 0x0C	; 12
     804:	31 05       	cpc	r19, r1
     806:	b4 f3       	brlt	.-20     	; 0x7f4 <clearNext+0x26>
		for (int y = 20; y < 24; y++)
		{
			field.pix[y][x] = 0;
		}
	}
}
     808:	08 95       	ret

0000080a <showNextPiece>:

//Temporarily changes brick to next brick so it can be displayed at the top
void showNextPiece()
{
     80a:	cf 93       	push	r28
     80c:	df 93       	push	r29
	//Reads value from flash memory for brick's shape and color
	selectedBrick = pgm_read_byte(&randombrick[random6]); // 0-6, 7 pieces
     80e:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <random6>
     812:	f0 e0       	ldi	r31, 0x00	; 0
     814:	ee 0f       	add	r30, r30
     816:	ff 1f       	adc	r31, r31
     818:	e0 5f       	subi	r30, 0xF0	; 240
     81a:	fc 4f       	sbci	r31, 0xFC	; 252
     81c:	44 91       	lpm	r20, Z
     81e:	40 93 3f 02 	sts	0x023F, r20	; 0x80023f <selectedBrick>
	selectedColor = pgm_read_byte(&randomcolor[random9]); // 0-9, 10 colors
     822:	e0 91 41 02 	lds	r30, 0x0241	; 0x800241 <random9>
     826:	f0 e0       	ldi	r31, 0x00	; 0
     828:	ee 0f       	add	r30, r30
     82a:	ff 1f       	adc	r31, r31
     82c:	e0 54       	subi	r30, 0x40	; 64
     82e:	fd 4f       	sbci	r31, 0xFD	; 253
     830:	e4 91       	lpm	r30, Z
     832:	e0 93 3e 02 	sts	0x023E, r30	; 0x80023e <selectedColor>
	
	activeBrick.siz = brickLib[selectedBrick].siz;
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	82 e2       	ldi	r24, 0x22	; 34
     83a:	84 9f       	mul	r24, r20
     83c:	e0 01       	movw	r28, r0
     83e:	85 9f       	mul	r24, r21
     840:	d0 0d       	add	r29, r0
     842:	11 24       	eor	r1, r1
     844:	c0 5e       	subi	r28, 0xE0	; 224
     846:	de 4f       	sbci	r29, 0xFE	; 254
     848:	89 81       	ldd	r24, Y+1	; 0x01
     84a:	a4 ed       	ldi	r26, 0xD4	; 212
     84c:	b5 e0       	ldi	r27, 0x05	; 5
     84e:	14 96       	adiw	r26, 0x04	; 4
     850:	8c 93       	st	X, r24
     852:	14 97       	sbiw	r26, 0x04	; 4
	activeBrick.yOffset = brickLib[selectedBrick].yOffset;
     854:	88 81       	ld	r24, Y
     856:	13 96       	adiw	r26, 0x03	; 3
     858:	8c 93       	st	X, r24
     85a:	13 97       	sbiw	r26, 0x03	; 3

	activeBrick.color = selectedColor;
     85c:	55 96       	adiw	r26, 0x15	; 21
     85e:	ec 93       	st	X, r30
     860:	55 97       	sbiw	r26, 0x15	; 21
	
	//Position where the next brick is displayed
	activeBrick.ypos = 20;
     862:	84 e1       	ldi	r24, 0x14	; 20
     864:	12 96       	adiw	r26, 0x02	; 2
     866:	8c 93       	st	X, r24
     868:	12 97       	sbiw	r26, 0x02	; 2
	activeBrick.xpos = 9;
     86a:	89 e0       	ldi	r24, 0x09	; 9
     86c:	11 96       	adiw	r26, 0x01	; 1
     86e:	8c 93       	st	X, r24
	
	for (byte y = 0; y < 4; y++)
     870:	a0 e0       	ldi	r26, 0x00	; 0
     872:	24 c0       	rjmp	.+72     	; 0x8bc <showNextPiece+0xb2>
	{
		for (byte x = 0; x < 4; x++)
		{
			activeBrick.pix[x][y] = (brickLib[selectedBrick]).pix[x][y];
     874:	26 2f       	mov	r18, r22
     876:	30 e0       	ldi	r19, 0x00	; 0
     878:	8a 2f       	mov	r24, r26
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	22 0f       	add	r18, r18
     87e:	33 1f       	adc	r19, r19
     880:	22 0f       	add	r18, r18
     882:	33 1f       	adc	r19, r19
     884:	71 e1       	ldi	r23, 0x11	; 17
     886:	74 9f       	mul	r23, r20
     888:	f0 01       	movw	r30, r0
     88a:	75 9f       	mul	r23, r21
     88c:	f0 0d       	add	r31, r0
     88e:	11 24       	eor	r1, r1
     890:	e2 0f       	add	r30, r18
     892:	f3 1f       	adc	r31, r19
     894:	e8 0f       	add	r30, r24
     896:	f9 1f       	adc	r31, r25
     898:	31 96       	adiw	r30, 0x01	; 1
     89a:	ee 0f       	add	r30, r30
     89c:	ff 1f       	adc	r31, r31
     89e:	e0 5e       	subi	r30, 0xE0	; 224
     8a0:	fe 4f       	sbci	r31, 0xFE	; 254
     8a2:	70 81       	ld	r23, Z
     8a4:	2c 52       	subi	r18, 0x2C	; 44
     8a6:	3a 4f       	sbci	r19, 0xFA	; 250
     8a8:	f9 01       	movw	r30, r18
     8aa:	e8 0f       	add	r30, r24
     8ac:	f9 1f       	adc	r31, r25
     8ae:	75 83       	std	Z+5, r23	; 0x05
	activeBrick.ypos = 20;
	activeBrick.xpos = 9;
	
	for (byte y = 0; y < 4; y++)
	{
		for (byte x = 0; x < 4; x++)
     8b0:	6f 5f       	subi	r22, 0xFF	; 255
     8b2:	01 c0       	rjmp	.+2      	; 0x8b6 <showNextPiece+0xac>
     8b4:	60 e0       	ldi	r22, 0x00	; 0
     8b6:	64 30       	cpi	r22, 0x04	; 4
     8b8:	e8 f2       	brcs	.-70     	; 0x874 <showNextPiece+0x6a>
	
	//Position where the next brick is displayed
	activeBrick.ypos = 20;
	activeBrick.xpos = 9;
	
	for (byte y = 0; y < 4; y++)
     8ba:	af 5f       	subi	r26, 0xFF	; 255
     8bc:	a4 30       	cpi	r26, 0x04	; 4
     8be:	d0 f3       	brcs	.-12     	; 0x8b4 <showNextPiece+0xaa>
		for (byte x = 0; x < 4; x++)
		{
			activeBrick.pix[x][y] = (brickLib[selectedBrick]).pix[x][y];
		}
	}
	addActiveBrickToField();
     8c0:	0e 94 3b 03 	call	0x676	; 0x676 <addActiveBrickToField>
     8c4:	85 e8       	ldi	r24, 0x85	; 133
     8c6:	8a 95       	dec	r24
     8c8:	f1 f7       	brne	.-4      	; 0x8c6 <showNextPiece+0xbc>
     8ca:	00 00       	nop
	_delay_us(ws2812_resettime);
}
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <printField>:
		tetrisGameOver = 1;
	}	
}

void printField() 
{
     8d2:	cf 92       	push	r12
     8d4:	df 92       	push	r13
     8d6:	ef 92       	push	r14
	byte activeBrickSpecificPix = 0;
		
	int x = 0;
	int y = 0;
				
	for (x = 0; x < column; x++) 
     8d8:	40 e0       	ldi	r20, 0x00	; 0
     8da:	50 e0       	ldi	r21, 0x00	; 0
     8dc:	d6 c0       	rjmp	.+428    	; 0xa8a <__stack+0x18b>
	{
		for (y = 0; y < row; y++) 
		{
			//Check if activebrick is on the screen
			if (activeBrick.enabled && (x >= activeBrick.xpos) && (x < (activeBrick.xpos + (activeBrick.siz)))
     8de:	20 91 d4 05 	lds	r18, 0x05D4	; 0x8005d4 <activeBrick>
     8e2:	22 23       	and	r18, r18
     8e4:	59 f1       	breq	.+86     	; 0x93c <__stack+0x3d>
     8e6:	20 91 d5 05 	lds	r18, 0x05D5	; 0x8005d5 <activeBrick+0x1>
     8ea:	30 e0       	ldi	r19, 0x00	; 0
     8ec:	42 17       	cp	r20, r18
     8ee:	53 07       	cpc	r21, r19
     8f0:	3c f1       	brlt	.+78     	; 0x940 <__stack+0x41>
     8f2:	60 91 d8 05 	lds	r22, 0x05D8	; 0x8005d8 <activeBrick+0x4>
     8f6:	70 e0       	ldi	r23, 0x00	; 0
     8f8:	f9 01       	movw	r30, r18
     8fa:	e6 0f       	add	r30, r22
     8fc:	f7 1f       	adc	r31, r23
     8fe:	4e 17       	cp	r20, r30
     900:	5f 07       	cpc	r21, r31
     902:	04 f5       	brge	.+64     	; 0x944 <__stack+0x45>
			&& (y >= activeBrick.ypos) && (y < (activeBrick.ypos + (activeBrick.siz)))) 
     904:	e0 91 d6 05 	lds	r30, 0x05D6	; 0x8005d6 <activeBrick+0x2>
     908:	f0 e0       	ldi	r31, 0x00	; 0
     90a:	8e 17       	cp	r24, r30
     90c:	9f 07       	cpc	r25, r31
     90e:	e4 f0       	brlt	.+56     	; 0x948 <__stack+0x49>
     910:	6e 0f       	add	r22, r30
     912:	7f 1f       	adc	r23, r31
     914:	86 17       	cp	r24, r22
     916:	97 07       	cpc	r25, r23
     918:	cc f4       	brge	.+50     	; 0x94c <__stack+0x4d>
			{ 		
				activeBrickSpecificPix = activeBrick.pix[y - activeBrick.ypos][x - activeBrick.xpos]; // 1 or 0
     91a:	bc 01       	movw	r22, r24
     91c:	6e 1b       	sub	r22, r30
     91e:	7f 0b       	sbc	r23, r31
     920:	fa 01       	movw	r30, r20
     922:	e2 1b       	sub	r30, r18
     924:	f3 0b       	sbc	r31, r19
     926:	9b 01       	movw	r18, r22
     928:	22 0f       	add	r18, r18
     92a:	33 1f       	adc	r19, r19
     92c:	22 0f       	add	r18, r18
     92e:	33 1f       	adc	r19, r19
     930:	2c 52       	subi	r18, 0x2C	; 44
     932:	3a 4f       	sbci	r19, 0xFA	; 250
     934:	e2 0f       	add	r30, r18
     936:	f3 1f       	adc	r31, r19
     938:	35 81       	ldd	r19, Z+5	; 0x05
     93a:	09 c0       	rjmp	.+18     	; 0x94e <__stack+0x4f>
     93c:	30 e0       	ldi	r19, 0x00	; 0
     93e:	07 c0       	rjmp	.+14     	; 0x94e <__stack+0x4f>
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	05 c0       	rjmp	.+10     	; 0x94e <__stack+0x4f>
     944:	30 e0       	ldi	r19, 0x00	; 0
     946:	03 c0       	rjmp	.+6      	; 0x94e <__stack+0x4f>
     948:	30 e0       	ldi	r19, 0x00	; 0
     94a:	01 c0       	rjmp	.+2      	; 0x94e <__stack+0x4f>
     94c:	30 e0       	ldi	r19, 0x00	; 0
			}
			
			if (field.pix[y][x]) 
     94e:	fc 01       	movw	r30, r24
     950:	ee 0f       	add	r30, r30
     952:	ff 1f       	adc	r31, r31
     954:	e8 0f       	add	r30, r24
     956:	f9 1f       	adc	r31, r25
     958:	ee 0f       	add	r30, r30
     95a:	ff 1f       	adc	r31, r31
     95c:	ee 0f       	add	r30, r30
     95e:	ff 1f       	adc	r31, r31
     960:	e0 50       	subi	r30, 0x00	; 0
     962:	fa 4f       	sbci	r31, 0xFA	; 250
     964:	e4 0f       	add	r30, r20
     966:	f5 1f       	adc	r31, r21
     968:	20 81       	ld	r18, Z
     96a:	22 23       	and	r18, r18
     96c:	b9 f1       	breq	.+110    	; 0x9dc <__stack+0xdd>
			{
				led[pgm_read_byte(&matrix[y][x])] = colors[field.color[y][x]];	// if led is on, color remains the same so it does not get turned off
     96e:	9c 01       	movw	r18, r24
     970:	22 0f       	add	r18, r18
     972:	33 1f       	adc	r19, r19
     974:	f9 01       	movw	r30, r18
     976:	e8 0f       	add	r30, r24
     978:	f9 1f       	adc	r31, r25
     97a:	ee 0f       	add	r30, r30
     97c:	ff 1f       	adc	r31, r31
     97e:	ee 0f       	add	r30, r30
     980:	ff 1f       	adc	r31, r31
     982:	e4 0f       	add	r30, r20
     984:	f5 1f       	adc	r31, r21
     986:	ee 0f       	add	r30, r30
     988:	ff 1f       	adc	r31, r31
     98a:	e8 59       	subi	r30, 0x98	; 152
     98c:	ff 4f       	sbci	r31, 0xFF	; 255
     98e:	e4 91       	lpm	r30, Z
     990:	f0 e0       	ldi	r31, 0x00	; 0
     992:	d9 01       	movw	r26, r18
     994:	a8 0f       	add	r26, r24
     996:	b9 1f       	adc	r27, r25
     998:	aa 0f       	add	r26, r26
     99a:	bb 1f       	adc	r27, r27
     99c:	aa 0f       	add	r26, r26
     99e:	bb 1f       	adc	r27, r27
     9a0:	a0 50       	subi	r26, 0x00	; 0
     9a2:	ba 4f       	sbci	r27, 0xFA	; 250
     9a4:	a4 0f       	add	r26, r20
     9a6:	b5 1f       	adc	r27, r21
     9a8:	a0 51       	subi	r26, 0x10	; 16
     9aa:	bf 4f       	sbci	r27, 0xFF	; 255
     9ac:	2c 91       	ld	r18, X
     9ae:	30 e0       	ldi	r19, 0x00	; 0
     9b0:	bf 01       	movw	r22, r30
     9b2:	66 0f       	add	r22, r22
     9b4:	77 1f       	adc	r23, r23
     9b6:	e6 0f       	add	r30, r22
     9b8:	f7 1f       	adc	r31, r23
     9ba:	e0 5b       	subi	r30, 0xB0	; 176
     9bc:	fd 4f       	sbci	r31, 0xFD	; 253
     9be:	d9 01       	movw	r26, r18
     9c0:	aa 0f       	add	r26, r26
     9c2:	bb 1f       	adc	r27, r27
     9c4:	2a 0f       	add	r18, r26
     9c6:	3b 1f       	adc	r19, r27
     9c8:	d9 01       	movw	r26, r18
     9ca:	ae 5f       	subi	r26, 0xFE	; 254
     9cc:	be 4f       	sbci	r27, 0xFE	; 254
     9ce:	cd 90       	ld	r12, X+
     9d0:	dd 90       	ld	r13, X+
     9d2:	ec 90       	ld	r14, X
     9d4:	c0 82       	st	Z, r12
     9d6:	d1 82       	std	Z+1, r13	; 0x01
     9d8:	e2 82       	std	Z+2, r14	; 0x02
     9da:	4d c0       	rjmp	.+154    	; 0xa76 <__stack+0x177>
			}
			else if (activeBrickSpecificPix)									// Print Active Brick's pix 
     9dc:	33 23       	and	r19, r19
     9de:	51 f1       	breq	.+84     	; 0xa34 <__stack+0x135>
			{
				led[pgm_read_byte(&matrix[y][x])] = colors[activeBrick.color];
     9e0:	fc 01       	movw	r30, r24
     9e2:	ee 0f       	add	r30, r30
     9e4:	ff 1f       	adc	r31, r31
     9e6:	e8 0f       	add	r30, r24
     9e8:	f9 1f       	adc	r31, r25
     9ea:	ee 0f       	add	r30, r30
     9ec:	ff 1f       	adc	r31, r31
     9ee:	ee 0f       	add	r30, r30
     9f0:	ff 1f       	adc	r31, r31
     9f2:	e4 0f       	add	r30, r20
     9f4:	f5 1f       	adc	r31, r21
     9f6:	ee 0f       	add	r30, r30
     9f8:	ff 1f       	adc	r31, r31
     9fa:	e8 59       	subi	r30, 0x98	; 152
     9fc:	ff 4f       	sbci	r31, 0xFF	; 255
     9fe:	e4 91       	lpm	r30, Z
     a00:	f0 e0       	ldi	r31, 0x00	; 0
     a02:	20 91 e9 05 	lds	r18, 0x05E9	; 0x8005e9 <activeBrick+0x15>
     a06:	30 e0       	ldi	r19, 0x00	; 0
     a08:	bf 01       	movw	r22, r30
     a0a:	66 0f       	add	r22, r22
     a0c:	77 1f       	adc	r23, r23
     a0e:	e6 0f       	add	r30, r22
     a10:	f7 1f       	adc	r31, r23
     a12:	e0 5b       	subi	r30, 0xB0	; 176
     a14:	fd 4f       	sbci	r31, 0xFD	; 253
     a16:	d9 01       	movw	r26, r18
     a18:	aa 0f       	add	r26, r26
     a1a:	bb 1f       	adc	r27, r27
     a1c:	2a 0f       	add	r18, r26
     a1e:	3b 1f       	adc	r19, r27
     a20:	d9 01       	movw	r26, r18
     a22:	ae 5f       	subi	r26, 0xFE	; 254
     a24:	be 4f       	sbci	r27, 0xFE	; 254
     a26:	cd 90       	ld	r12, X+
     a28:	dd 90       	ld	r13, X+
     a2a:	ec 90       	ld	r14, X
     a2c:	c0 82       	st	Z, r12
     a2e:	d1 82       	std	Z+1, r13	; 0x01
     a30:	e2 82       	std	Z+2, r14	; 0x02
     a32:	21 c0       	rjmp	.+66     	; 0xa76 <__stack+0x177>
			}		
			else 
			{
				led[pgm_read_byte(&matrix[y][x])] = led_off;					// Remaining unused blocks are off	
     a34:	fc 01       	movw	r30, r24
     a36:	ee 0f       	add	r30, r30
     a38:	ff 1f       	adc	r31, r31
     a3a:	e8 0f       	add	r30, r24
     a3c:	f9 1f       	adc	r31, r25
     a3e:	ee 0f       	add	r30, r30
     a40:	ff 1f       	adc	r31, r31
     a42:	ee 0f       	add	r30, r30
     a44:	ff 1f       	adc	r31, r31
     a46:	e4 0f       	add	r30, r20
     a48:	f5 1f       	adc	r31, r21
     a4a:	ee 0f       	add	r30, r30
     a4c:	ff 1f       	adc	r31, r31
     a4e:	e8 59       	subi	r30, 0x98	; 152
     a50:	ff 4f       	sbci	r31, 0xFF	; 255
     a52:	e4 91       	lpm	r30, Z
     a54:	f0 e0       	ldi	r31, 0x00	; 0
     a56:	9f 01       	movw	r18, r30
     a58:	22 0f       	add	r18, r18
     a5a:	33 1f       	adc	r19, r19
     a5c:	e2 0f       	add	r30, r18
     a5e:	f3 1f       	adc	r31, r19
     a60:	e0 5b       	subi	r30, 0xB0	; 176
     a62:	fd 4f       	sbci	r31, 0xFD	; 253
     a64:	c0 90 3a 02 	lds	r12, 0x023A	; 0x80023a <led_off>
     a68:	d0 90 3b 02 	lds	r13, 0x023B	; 0x80023b <led_off+0x1>
     a6c:	e0 90 3c 02 	lds	r14, 0x023C	; 0x80023c <led_off+0x2>
     a70:	c0 82       	st	Z, r12
     a72:	d1 82       	std	Z+1, r13	; 0x01
     a74:	e2 82       	std	Z+2, r14	; 0x02
	int x = 0;
	int y = 0;
				
	for (x = 0; x < column; x++) 
	{
		for (y = 0; y < row; y++) 
     a76:	01 96       	adiw	r24, 0x01	; 1
     a78:	02 c0       	rjmp	.+4      	; 0xa7e <__stack+0x17f>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	84 31       	cpi	r24, 0x14	; 20
     a80:	91 05       	cpc	r25, r1
     a82:	0c f4       	brge	.+2      	; 0xa86 <__stack+0x187>
     a84:	2c cf       	rjmp	.-424    	; 0x8de <printField+0xc>
	byte activeBrickSpecificPix = 0;
		
	int x = 0;
	int y = 0;
				
	for (x = 0; x < column; x++) 
     a86:	4f 5f       	subi	r20, 0xFF	; 255
     a88:	5f 4f       	sbci	r21, 0xFF	; 255
     a8a:	4c 30       	cpi	r20, 0x0C	; 12
     a8c:	51 05       	cpc	r21, r1
     a8e:	ac f3       	brlt	.-22     	; 0xa7a <__stack+0x17b>
				led[pgm_read_byte(&matrix[y][x])] = led_off;					// Remaining unused blocks are off	
			}
			activeBrickSpecificPix = 0;
		}
	}
	ws2812_setleds(led,MAXPIX);
     a90:	6c e2       	ldi	r22, 0x2C	; 44
     a92:	71 e0       	ldi	r23, 0x01	; 1
     a94:	80 e5       	ldi	r24, 0x50	; 80
     a96:	92 e0       	ldi	r25, 0x02	; 2
     a98:	0e 94 c3 01 	call	0x386	; 0x386 <ws2812_setleds>
     a9c:	85 e8       	ldi	r24, 0x85	; 133
     a9e:	8a 95       	dec	r24
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <__stack+0x19f>
     aa2:	00 00       	nop
	_delay_us(ws2812_resettime);
}
     aa4:	ef 90       	pop	r14
     aa6:	df 90       	pop	r13
     aa8:	cf 90       	pop	r12
     aaa:	08 95       	ret

00000aac <newActiveBrick>:
	addActiveBrickToField();
	_delay_us(ws2812_resettime);
}

void newActiveBrick() 
{
     aac:	cf 93       	push	r28
     aae:	df 93       	push	r29
     ab0:	cd b7       	in	r28, 0x3d	; 61
     ab2:	de b7       	in	r29, 0x3e	; 62
     ab4:	66 97       	sbiw	r28, 0x16	; 22
     ab6:	0f b6       	in	r0, 0x3f	; 63
     ab8:	f8 94       	cli
     aba:	de bf       	out	0x3e, r29	; 62
     abc:	0f be       	out	0x3f, r0	; 63
     abe:	cd bf       	out	0x3d, r28	; 61
	//Reads value from flash memory for brick's shape and color
	selectedBrick = pgm_read_byte(&randombrick[random6]); // 0-6, 7 pieces
     ac0:	90 91 42 02 	lds	r25, 0x0242	; 0x800242 <random6>
     ac4:	e9 2f       	mov	r30, r25
     ac6:	f0 e0       	ldi	r31, 0x00	; 0
     ac8:	ee 0f       	add	r30, r30
     aca:	ff 1f       	adc	r31, r31
     acc:	e0 5f       	subi	r30, 0xF0	; 240
     ace:	fc 4f       	sbci	r31, 0xFC	; 252
     ad0:	44 91       	lpm	r20, Z
     ad2:	40 93 3f 02 	sts	0x023F, r20	; 0x80023f <selectedBrick>
	selectedColor = pgm_read_byte(&randomcolor[random9]); // 0-9, 10 colors
     ad6:	80 91 41 02 	lds	r24, 0x0241	; 0x800241 <random9>
     ada:	e8 2f       	mov	r30, r24
     adc:	f0 e0       	ldi	r31, 0x00	; 0
     ade:	ee 0f       	add	r30, r30
     ae0:	ff 1f       	adc	r31, r31
     ae2:	e0 54       	subi	r30, 0x40	; 64
     ae4:	fd 4f       	sbci	r31, 0xFD	; 253
     ae6:	64 91       	lpm	r22, Z
     ae8:	60 93 3e 02 	sts	0x023E, r22	; 0x80023e <selectedColor>
	
	random6++;
     aec:	9f 5f       	subi	r25, 0xFF	; 255
     aee:	90 93 42 02 	sts	0x0242, r25	; 0x800242 <random6>
	random9++;
     af2:	8f 5f       	subi	r24, 0xFF	; 255
     af4:	80 93 41 02 	sts	0x0241, r24	; 0x800241 <random9>
	
	if (random6 > 6) random6 = 0;
     af8:	97 30       	cpi	r25, 0x07	; 7
     afa:	10 f0       	brcs	.+4      	; 0xb00 <newActiveBrick+0x54>
     afc:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <random6>
	if (random9 > 9) random9 = 0; 
     b00:	8a 30       	cpi	r24, 0x0A	; 10
     b02:	10 f0       	brcs	.+4      	; 0xb08 <newActiveBrick+0x5c>
     b04:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <random9>
	
	activeBrick.siz = brickLib[selectedBrick].siz;
     b08:	50 e0       	ldi	r21, 0x00	; 0
     b0a:	82 e2       	ldi	r24, 0x22	; 34
     b0c:	84 9f       	mul	r24, r20
     b0e:	90 01       	movw	r18, r0
     b10:	85 9f       	mul	r24, r21
     b12:	30 0d       	add	r19, r0
     b14:	11 24       	eor	r1, r1
     b16:	20 5e       	subi	r18, 0xE0	; 224
     b18:	3e 4f       	sbci	r19, 0xFE	; 254
     b1a:	d9 01       	movw	r26, r18
     b1c:	11 96       	adiw	r26, 0x01	; 1
     b1e:	8c 91       	ld	r24, X
     b20:	a4 ed       	ldi	r26, 0xD4	; 212
     b22:	b5 e0       	ldi	r27, 0x05	; 5
     b24:	14 96       	adiw	r26, 0x04	; 4
     b26:	8c 93       	st	X, r24
     b28:	14 97       	sbiw	r26, 0x04	; 4
	activeBrick.yOffset = brickLib[selectedBrick].yOffset;
     b2a:	f9 01       	movw	r30, r18
     b2c:	20 81       	ld	r18, Z
     b2e:	13 96       	adiw	r26, 0x03	; 3
     b30:	2c 93       	st	X, r18
     b32:	13 97       	sbiw	r26, 0x03	; 3
	
	activeBrick.xpos = column / 2 - activeBrick.siz / 2;		// To center
     b34:	86 95       	lsr	r24
     b36:	96 e0       	ldi	r25, 0x06	; 6
     b38:	98 1b       	sub	r25, r24
     b3a:	11 96       	adiw	r26, 0x01	; 1
     b3c:	9c 93       	st	X, r25
     b3e:	11 97       	sbiw	r26, 0x01	; 1
	
	activeBrick.ypos = 20 - 1 - activeBrick.yOffset;			//Top of the screen
     b40:	83 e1       	ldi	r24, 0x13	; 19
     b42:	82 1b       	sub	r24, r18
     b44:	12 96       	adiw	r26, 0x02	; 2
     b46:	8c 93       	st	X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
	
	activeBrick.enabled = 1;
     b4a:	81 e0       	ldi	r24, 0x01	; 1
     b4c:	8c 93       	st	X, r24

	activeBrick.color = selectedColor; 
     b4e:	55 96       	adiw	r26, 0x15	; 21
     b50:	6c 93       	st	X, r22
	 
	// Copy pix array of selected Brick
	for (byte y = 0; y < 4; y++) 
     b52:	70 e0       	ldi	r23, 0x00	; 0
     b54:	25 c0       	rjmp	.+74     	; 0xba0 <newActiveBrick+0xf4>
	{
		for (byte x = 0; x < 4; x++) 
		{
			activeBrick.pix[y][x] = (brickLib[selectedBrick]).pix[y][x];
     b56:	87 2f       	mov	r24, r23
     b58:	90 e0       	ldi	r25, 0x00	; 0
     b5a:	26 2f       	mov	r18, r22
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	88 0f       	add	r24, r24
     b60:	99 1f       	adc	r25, r25
     b62:	88 0f       	add	r24, r24
     b64:	99 1f       	adc	r25, r25
     b66:	a1 e1       	ldi	r26, 0x11	; 17
     b68:	a4 9f       	mul	r26, r20
     b6a:	f0 01       	movw	r30, r0
     b6c:	a5 9f       	mul	r26, r21
     b6e:	f0 0d       	add	r31, r0
     b70:	11 24       	eor	r1, r1
     b72:	e8 0f       	add	r30, r24
     b74:	f9 1f       	adc	r31, r25
     b76:	e2 0f       	add	r30, r18
     b78:	f3 1f       	adc	r31, r19
     b7a:	31 96       	adiw	r30, 0x01	; 1
     b7c:	ee 0f       	add	r30, r30
     b7e:	ff 1f       	adc	r31, r31
     b80:	e0 5e       	subi	r30, 0xE0	; 224
     b82:	fe 4f       	sbci	r31, 0xFE	; 254
     b84:	e0 81       	ld	r30, Z
     b86:	8c 52       	subi	r24, 0x2C	; 44
     b88:	9a 4f       	sbci	r25, 0xFA	; 250
     b8a:	dc 01       	movw	r26, r24
     b8c:	a2 0f       	add	r26, r18
     b8e:	b3 1f       	adc	r27, r19
     b90:	15 96       	adiw	r26, 0x05	; 5
     b92:	ec 93       	st	X, r30
	activeBrick.color = selectedColor; 
	 
	// Copy pix array of selected Brick
	for (byte y = 0; y < 4; y++) 
	{
		for (byte x = 0; x < 4; x++) 
     b94:	6f 5f       	subi	r22, 0xFF	; 255
     b96:	01 c0       	rjmp	.+2      	; 0xb9a <newActiveBrick+0xee>
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	64 30       	cpi	r22, 0x04	; 4
     b9c:	e0 f2       	brcs	.-72     	; 0xb56 <newActiveBrick+0xaa>
	activeBrick.enabled = 1;

	activeBrick.color = selectedColor; 
	 
	// Copy pix array of selected Brick
	for (byte y = 0; y < 4; y++) 
     b9e:	7f 5f       	subi	r23, 0xFF	; 255
     ba0:	74 30       	cpi	r23, 0x04	; 4
     ba2:	d0 f3       	brcs	.-12     	; 0xb98 <newActiveBrick+0xec>
		}
	}
	
	// Temporary save active Brick's state before showing next brick
	Brick realBrick;
	realBrick = activeBrick;
     ba4:	86 e1       	ldi	r24, 0x16	; 22
     ba6:	e4 ed       	ldi	r30, 0xD4	; 212
     ba8:	f5 e0       	ldi	r31, 0x05	; 5
     baa:	de 01       	movw	r26, r28
     bac:	11 96       	adiw	r26, 0x01	; 1
     bae:	01 90       	ld	r0, Z+
     bb0:	0d 92       	st	X+, r0
     bb2:	8a 95       	dec	r24
     bb4:	e1 f7       	brne	.-8      	; 0xbae <newActiveBrick+0x102>
	showNextPiece();
     bb6:	0e 94 05 04 	call	0x80a	; 0x80a <showNextPiece>
	activeBrick = realBrick;
     bba:	86 e1       	ldi	r24, 0x16	; 22
     bbc:	fe 01       	movw	r30, r28
     bbe:	31 96       	adiw	r30, 0x01	; 1
     bc0:	a4 ed       	ldi	r26, 0xD4	; 212
     bc2:	b5 e0       	ldi	r27, 0x05	; 5
     bc4:	01 90       	ld	r0, Z+
     bc6:	0d 92       	st	X+, r0
     bc8:	8a 95       	dec	r24
     bca:	e1 f7       	brne	.-8      	; 0xbc4 <newActiveBrick+0x118>
	printField();
     bcc:	0e 94 69 04 	call	0x8d2	; 0x8d2 <printField>
	clearNext();
     bd0:	0e 94 e7 03 	call	0x7ce	; 0x7ce <clearNext>
	
	if (checkFieldCollision(&activeBrick)) 
     bd4:	84 ed       	ldi	r24, 0xD4	; 212
     bd6:	95 e0       	ldi	r25, 0x05	; 5
     bd8:	0e 94 b0 03 	call	0x760	; 0x760 <checkFieldCollision>
     bdc:	89 2b       	or	r24, r25
     bde:	19 f0       	breq	.+6      	; 0xbe6 <newActiveBrick+0x13a>
	{
		tetrisGameOver = 1;
     be0:	81 e0       	ldi	r24, 0x01	; 1
     be2:	80 93 40 02 	sts	0x0240, r24	; 0x800240 <tetrisGameOver>
	}	
}
     be6:	66 96       	adiw	r28, 0x16	; 22
     be8:	0f b6       	in	r0, 0x3f	; 63
     bea:	f8 94       	cli
     bec:	de bf       	out	0x3e, r29	; 62
     bee:	0f be       	out	0x3f, r0	; 63
     bf0:	cd bf       	out	0x3d, r28	; 61
     bf2:	df 91       	pop	r29
     bf4:	cf 91       	pop	r28
     bf6:	08 95       	ret

00000bf8 <rotateActiveBrick>:

// CHECK ON TABLE
void rotateActiveBrick() 
{
	//Copy active brick pix array to temporary pix array
	for (byte y = 0; y < 4; y++) 
     bf8:	60 e0       	ldi	r22, 0x00	; 0
     bfa:	1a c0       	rjmp	.+52     	; 0xc30 <rotateActiveBrick+0x38>
	{
		for (byte x = 0; x < 4; x++) 
		{
			tmpBrick.pix[y][x] = activeBrick.pix[y][x];
     bfc:	86 2f       	mov	r24, r22
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	24 2f       	mov	r18, r20
     c02:	30 e0       	ldi	r19, 0x00	; 0
     c04:	88 0f       	add	r24, r24
     c06:	99 1f       	adc	r25, r25
     c08:	88 0f       	add	r24, r24
     c0a:	99 1f       	adc	r25, r25
     c0c:	fc 01       	movw	r30, r24
     c0e:	ec 52       	subi	r30, 0x2C	; 44
     c10:	fa 4f       	sbci	r31, 0xFA	; 250
     c12:	e2 0f       	add	r30, r18
     c14:	f3 1f       	adc	r31, r19
     c16:	55 81       	ldd	r21, Z+5	; 0x05
     c18:	86 51       	subi	r24, 0x16	; 22
     c1a:	9a 4f       	sbci	r25, 0xFA	; 250
     c1c:	fc 01       	movw	r30, r24
     c1e:	e2 0f       	add	r30, r18
     c20:	f3 1f       	adc	r31, r19
     c22:	55 83       	std	Z+5, r21	; 0x05
void rotateActiveBrick() 
{
	//Copy active brick pix array to temporary pix array
	for (byte y = 0; y < 4; y++) 
	{
		for (byte x = 0; x < 4; x++) 
     c24:	4f 5f       	subi	r20, 0xFF	; 255
     c26:	01 c0       	rjmp	.+2      	; 0xc2a <rotateActiveBrick+0x32>
     c28:	40 e0       	ldi	r20, 0x00	; 0
     c2a:	44 30       	cpi	r20, 0x04	; 4
     c2c:	38 f3       	brcs	.-50     	; 0xbfc <rotateActiveBrick+0x4>

// CHECK ON TABLE
void rotateActiveBrick() 
{
	//Copy active brick pix array to temporary pix array
	for (byte y = 0; y < 4; y++) 
     c2e:	6f 5f       	subi	r22, 0xFF	; 255
     c30:	64 30       	cpi	r22, 0x04	; 4
     c32:	d0 f3       	brcs	.-12     	; 0xc28 <rotateActiveBrick+0x30>
		for (byte x = 0; x < 4; x++) 
		{
			tmpBrick.pix[y][x] = activeBrick.pix[y][x];
		}
	}
	tmpBrick.xpos = activeBrick.xpos;
     c34:	a4 ed       	ldi	r26, 0xD4	; 212
     c36:	b5 e0       	ldi	r27, 0x05	; 5
     c38:	11 96       	adiw	r26, 0x01	; 1
     c3a:	8c 91       	ld	r24, X
     c3c:	11 97       	sbiw	r26, 0x01	; 1
     c3e:	ea ee       	ldi	r30, 0xEA	; 234
     c40:	f5 e0       	ldi	r31, 0x05	; 5
     c42:	81 83       	std	Z+1, r24	; 0x01
	tmpBrick.ypos = activeBrick.ypos;
     c44:	12 96       	adiw	r26, 0x02	; 2
     c46:	8c 91       	ld	r24, X
     c48:	12 97       	sbiw	r26, 0x02	; 2
     c4a:	82 83       	std	Z+2, r24	; 0x02
	tmpBrick.siz = activeBrick.siz;
     c4c:	14 96       	adiw	r26, 0x04	; 4
     c4e:	8c 91       	ld	r24, X
     c50:	14 97       	sbiw	r26, 0x04	; 4
     c52:	84 83       	std	Z+4, r24	; 0x04

	//Depending on size of the active brick, we will rotate differently
	if (activeBrick.siz == 3) 
     c54:	83 30       	cpi	r24, 0x03	; 3
     c56:	59 f5       	brne	.+86     	; 0xcae <rotateActiveBrick+0xb6>
	{
		//Perform rotation around center pix
		tmpBrick.pix[0][0] = activeBrick.pix[0][2];
     c58:	17 96       	adiw	r26, 0x07	; 7
     c5a:	8c 91       	ld	r24, X
     c5c:	17 97       	sbiw	r26, 0x07	; 7
     c5e:	85 83       	std	Z+5, r24	; 0x05
		tmpBrick.pix[0][1] = activeBrick.pix[1][2];
     c60:	1b 96       	adiw	r26, 0x0b	; 11
     c62:	8c 91       	ld	r24, X
     c64:	1b 97       	sbiw	r26, 0x0b	; 11
     c66:	86 83       	std	Z+6, r24	; 0x06
		tmpBrick.pix[0][2] = activeBrick.pix[2][2];
     c68:	1f 96       	adiw	r26, 0x0f	; 15
     c6a:	8c 91       	ld	r24, X
     c6c:	1f 97       	sbiw	r26, 0x0f	; 15
     c6e:	87 83       	std	Z+7, r24	; 0x07
		tmpBrick.pix[1][0] = activeBrick.pix[0][1];
     c70:	16 96       	adiw	r26, 0x06	; 6
     c72:	8c 91       	ld	r24, X
     c74:	16 97       	sbiw	r26, 0x06	; 6
     c76:	81 87       	std	Z+9, r24	; 0x09
		tmpBrick.pix[1][1] = activeBrick.pix[1][1];
     c78:	1a 96       	adiw	r26, 0x0a	; 10
     c7a:	8c 91       	ld	r24, X
     c7c:	1a 97       	sbiw	r26, 0x0a	; 10
     c7e:	82 87       	std	Z+10, r24	; 0x0a
		tmpBrick.pix[1][2] = activeBrick.pix[2][1];
     c80:	1e 96       	adiw	r26, 0x0e	; 14
     c82:	8c 91       	ld	r24, X
     c84:	1e 97       	sbiw	r26, 0x0e	; 14
     c86:	83 87       	std	Z+11, r24	; 0x0b
		tmpBrick.pix[2][0] = activeBrick.pix[0][0];
     c88:	15 96       	adiw	r26, 0x05	; 5
     c8a:	8c 91       	ld	r24, X
     c8c:	15 97       	sbiw	r26, 0x05	; 5
     c8e:	85 87       	std	Z+13, r24	; 0x0d
		tmpBrick.pix[2][1] = activeBrick.pix[1][0];
     c90:	19 96       	adiw	r26, 0x09	; 9
     c92:	8c 91       	ld	r24, X
     c94:	19 97       	sbiw	r26, 0x09	; 9
     c96:	86 87       	std	Z+14, r24	; 0x0e
		tmpBrick.pix[2][2] = activeBrick.pix[2][0];
     c98:	1d 96       	adiw	r26, 0x0d	; 13
     c9a:	8c 91       	ld	r24, X
     c9c:	87 87       	std	Z+15, r24	; 0x0f
		//Keep other parts of temporary block clear
		tmpBrick.pix[0][3] = 0;
     c9e:	10 86       	std	Z+8, r1	; 0x08
		tmpBrick.pix[1][3] = 0;
     ca0:	14 86       	std	Z+12, r1	; 0x0c
		tmpBrick.pix[2][3] = 0;
     ca2:	10 8a       	std	Z+16, r1	; 0x10
		tmpBrick.pix[3][3] = 0;
     ca4:	14 8a       	std	Z+20, r1	; 0x14
		tmpBrick.pix[3][2] = 0;
     ca6:	13 8a       	std	Z+19, r1	; 0x13
		tmpBrick.pix[3][1] = 0;
     ca8:	12 8a       	std	Z+18, r1	; 0x12
		tmpBrick.pix[3][0] = 0;
     caa:	11 8a       	std	Z+17, r1	; 0x11
     cac:	55 c0       	rjmp	.+170    	; 0xd58 <rotateActiveBrick+0x160>
	} 
	// Square does not rotate
	else if (selectedBrick == 0)
     cae:	90 91 3f 02 	lds	r25, 0x023F	; 0x80023f <selectedBrick>
     cb2:	99 23       	and	r25, r25
     cb4:	09 f4       	brne	.+2      	; 0xcb8 <rotateActiveBrick+0xc0>
     cb6:	7d c0       	rjmp	.+250    	; 0xdb2 <rotateActiveBrick+0x1ba>
	{
		return;
	}
	// I piece will change pix
	else if (activeBrick.siz == 4)
     cb8:	84 30       	cpi	r24, 0x04	; 4
     cba:	09 f0       	breq	.+2      	; 0xcbe <rotateActiveBrick+0xc6>
     cbc:	4d c0       	rjmp	.+154    	; 0xd58 <rotateActiveBrick+0x160>
	{
		if (I_rot == 0)
     cbe:	80 91 3d 02 	lds	r24, 0x023D	; 0x80023d <I_rot>
     cc2:	88 23       	and	r24, r24
     cc4:	09 f1       	breq	.+66     	; 0xd08 <rotateActiveBrick+0x110>
     cc6:	60 e0       	ldi	r22, 0x00	; 0
     cc8:	43 c0       	rjmp	.+134    	; 0xd50 <rotateActiveBrick+0x158>
		{
			for (byte y = 0; y < 4; y++)
			{
				for (byte x = 0; x < 4; x++)
				{
					tmpBrick.pix[y][x] = (brickLib[7]).pix[y][x];
     cca:	86 2f       	mov	r24, r22
     ccc:	90 e0       	ldi	r25, 0x00	; 0
     cce:	24 2f       	mov	r18, r20
     cd0:	30 e0       	ldi	r19, 0x00	; 0
     cd2:	88 0f       	add	r24, r24
     cd4:	99 1f       	adc	r25, r25
     cd6:	88 0f       	add	r24, r24
     cd8:	99 1f       	adc	r25, r25
     cda:	fc 01       	movw	r30, r24
     cdc:	e2 0f       	add	r30, r18
     cde:	f3 1f       	adc	r31, r19
     ce0:	e8 58       	subi	r30, 0x88	; 136
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	ee 0f       	add	r30, r30
     ce6:	ff 1f       	adc	r31, r31
     ce8:	e0 5e       	subi	r30, 0xE0	; 224
     cea:	fe 4f       	sbci	r31, 0xFE	; 254
     cec:	50 81       	ld	r21, Z
     cee:	86 51       	subi	r24, 0x16	; 22
     cf0:	9a 4f       	sbci	r25, 0xFA	; 250
     cf2:	fc 01       	movw	r30, r24
     cf4:	e2 0f       	add	r30, r18
     cf6:	f3 1f       	adc	r31, r19
     cf8:	55 83       	std	Z+5, r21	; 0x05
	{
		if (I_rot == 0)
		{
			for (byte y = 0; y < 4; y++)
			{
				for (byte x = 0; x < 4; x++)
     cfa:	4f 5f       	subi	r20, 0xFF	; 255
     cfc:	01 c0       	rjmp	.+2      	; 0xd00 <rotateActiveBrick+0x108>
     cfe:	40 e0       	ldi	r20, 0x00	; 0
     d00:	44 30       	cpi	r20, 0x04	; 4
     d02:	18 f3       	brcs	.-58     	; 0xcca <rotateActiveBrick+0xd2>
	// I piece will change pix
	else if (activeBrick.siz == 4)
	{
		if (I_rot == 0)
		{
			for (byte y = 0; y < 4; y++)
     d04:	6f 5f       	subi	r22, 0xFF	; 255
     d06:	01 c0       	rjmp	.+2      	; 0xd0a <rotateActiveBrick+0x112>
     d08:	60 e0       	ldi	r22, 0x00	; 0
     d0a:	64 30       	cpi	r22, 0x04	; 4
     d0c:	c0 f3       	brcs	.-16     	; 0xcfe <rotateActiveBrick+0x106>
				for (byte x = 0; x < 4; x++)
				{
					tmpBrick.pix[y][x] = (brickLib[7]).pix[y][x];
				}
			}
			I_rot = 1;
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <I_rot>
     d14:	21 c0       	rjmp	.+66     	; 0xd58 <rotateActiveBrick+0x160>
		{
			for (byte y = 0; y < 4; y++)
			{
				for (byte x = 0; x < 4; x++)
				{
					tmpBrick.pix[y][x] = (brickLib[1]).pix[y][x];
     d16:	86 2f       	mov	r24, r22
     d18:	90 e0       	ldi	r25, 0x00	; 0
     d1a:	24 2f       	mov	r18, r20
     d1c:	30 e0       	ldi	r19, 0x00	; 0
     d1e:	88 0f       	add	r24, r24
     d20:	99 1f       	adc	r25, r25
     d22:	88 0f       	add	r24, r24
     d24:	99 1f       	adc	r25, r25
     d26:	fc 01       	movw	r30, r24
     d28:	e2 0f       	add	r30, r18
     d2a:	f3 1f       	adc	r31, r19
     d2c:	72 96       	adiw	r30, 0x12	; 18
     d2e:	ee 0f       	add	r30, r30
     d30:	ff 1f       	adc	r31, r31
     d32:	e0 5e       	subi	r30, 0xE0	; 224
     d34:	fe 4f       	sbci	r31, 0xFE	; 254
     d36:	50 81       	ld	r21, Z
     d38:	86 51       	subi	r24, 0x16	; 22
     d3a:	9a 4f       	sbci	r25, 0xFA	; 250
     d3c:	fc 01       	movw	r30, r24
     d3e:	e2 0f       	add	r30, r18
     d40:	f3 1f       	adc	r31, r19
     d42:	55 83       	std	Z+5, r21	; 0x05
		}
		else
		{
			for (byte y = 0; y < 4; y++)
			{
				for (byte x = 0; x < 4; x++)
     d44:	4f 5f       	subi	r20, 0xFF	; 255
     d46:	01 c0       	rjmp	.+2      	; 0xd4a <rotateActiveBrick+0x152>
     d48:	40 e0       	ldi	r20, 0x00	; 0
     d4a:	44 30       	cpi	r20, 0x04	; 4
     d4c:	20 f3       	brcs	.-56     	; 0xd16 <rotateActiveBrick+0x11e>
			}
			I_rot = 1;
		}
		else
		{
			for (byte y = 0; y < 4; y++)
     d4e:	6f 5f       	subi	r22, 0xFF	; 255
     d50:	64 30       	cpi	r22, 0x04	; 4
     d52:	d0 f3       	brcs	.-12     	; 0xd48 <rotateActiveBrick+0x150>
				for (byte x = 0; x < 4; x++)
				{
					tmpBrick.pix[y][x] = (brickLib[1]).pix[y][x];
				}
			}
			I_rot = 0;
     d54:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <I_rot>
		}
	}
	
	//Check for collision, in case of collision, discard the rotated temporary brick
	if ((!checkSidesCollision(&tmpBrick)) && (!checkFieldCollision(&tmpBrick)))
     d58:	8a ee       	ldi	r24, 0xEA	; 234
     d5a:	95 e0       	ldi	r25, 0x05	; 5
     d5c:	0e 94 8c 03 	call	0x718	; 0x718 <checkSidesCollision>
     d60:	89 2b       	or	r24, r25
     d62:	29 f5       	brne	.+74     	; 0xdae <rotateActiveBrick+0x1b6>
     d64:	8a ee       	ldi	r24, 0xEA	; 234
     d66:	95 e0       	ldi	r25, 0x05	; 5
     d68:	0e 94 b0 03 	call	0x760	; 0x760 <checkFieldCollision>
     d6c:	89 2b       	or	r24, r25
     d6e:	e1 f0       	breq	.+56     	; 0xda8 <rotateActiveBrick+0x1b0>
     d70:	1e c0       	rjmp	.+60     	; 0xdae <rotateActiveBrick+0x1b6>
		//Copy temporary brick pix array to active pix array
		for (byte y = 0; y < 4; y++) 
		{
			for (byte x = 0; x < 4; x++) 
			{
				activeBrick.pix[y][x] = tmpBrick.pix[y][x];
     d72:	86 2f       	mov	r24, r22
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	24 2f       	mov	r18, r20
     d78:	30 e0       	ldi	r19, 0x00	; 0
     d7a:	88 0f       	add	r24, r24
     d7c:	99 1f       	adc	r25, r25
     d7e:	88 0f       	add	r24, r24
     d80:	99 1f       	adc	r25, r25
     d82:	fc 01       	movw	r30, r24
     d84:	e6 51       	subi	r30, 0x16	; 22
     d86:	fa 4f       	sbci	r31, 0xFA	; 250
     d88:	e2 0f       	add	r30, r18
     d8a:	f3 1f       	adc	r31, r19
     d8c:	55 81       	ldd	r21, Z+5	; 0x05
     d8e:	8c 52       	subi	r24, 0x2C	; 44
     d90:	9a 4f       	sbci	r25, 0xFA	; 250
     d92:	fc 01       	movw	r30, r24
     d94:	e2 0f       	add	r30, r18
     d96:	f3 1f       	adc	r31, r19
     d98:	55 83       	std	Z+5, r21	; 0x05
	if ((!checkSidesCollision(&tmpBrick)) && (!checkFieldCollision(&tmpBrick)))
	{
		//Copy temporary brick pix array to active pix array
		for (byte y = 0; y < 4; y++) 
		{
			for (byte x = 0; x < 4; x++) 
     d9a:	4f 5f       	subi	r20, 0xFF	; 255
     d9c:	01 c0       	rjmp	.+2      	; 0xda0 <rotateActiveBrick+0x1a8>
     d9e:	40 e0       	ldi	r20, 0x00	; 0
     da0:	44 30       	cpi	r20, 0x04	; 4
     da2:	38 f3       	brcs	.-50     	; 0xd72 <rotateActiveBrick+0x17a>
	
	//Check for collision, in case of collision, discard the rotated temporary brick
	if ((!checkSidesCollision(&tmpBrick)) && (!checkFieldCollision(&tmpBrick)))
	{
		//Copy temporary brick pix array to active pix array
		for (byte y = 0; y < 4; y++) 
     da4:	6f 5f       	subi	r22, 0xFF	; 255
     da6:	01 c0       	rjmp	.+2      	; 0xdaa <rotateActiveBrick+0x1b2>
     da8:	60 e0       	ldi	r22, 0x00	; 0
     daa:	64 30       	cpi	r22, 0x04	; 4
     dac:	c0 f3       	brcs	.-16     	; 0xd9e <rotateActiveBrick+0x1a6>
			{
				activeBrick.pix[y][x] = tmpBrick.pix[y][x];
			}
		}
	}
	printField();
     dae:	0e 94 69 04 	call	0x8d2	; 0x8d2 <printField>
     db2:	08 95       	ret

00000db4 <shiftActiveBrick>:
}

//Shift brick left/right/down by one if possible
void shiftActiveBrick(char dir) 
{
     db4:	cf 93       	push	r28
     db6:	df 93       	push	r29
     db8:	c8 2f       	mov	r28, r24
	char down = 'd';
	char left = 'l';
	char right = 'r';
	
	//Change position of active brick 
	if (dir == left) 
     dba:	8c 36       	cpi	r24, 0x6C	; 108
     dbc:	31 f4       	brne	.+12     	; 0xdca <shiftActiveBrick+0x16>
	{
		activeBrick.xpos--;
     dbe:	e4 ed       	ldi	r30, 0xD4	; 212
     dc0:	f5 e0       	ldi	r31, 0x05	; 5
     dc2:	81 81       	ldd	r24, Z+1	; 0x01
     dc4:	81 50       	subi	r24, 0x01	; 1
     dc6:	81 83       	std	Z+1, r24	; 0x01
     dc8:	20 c0       	rjmp	.+64     	; 0xe0a <shiftActiveBrick+0x56>
	} 
	else if (dir == right) 
     dca:	82 37       	cpi	r24, 0x72	; 114
     dcc:	31 f4       	brne	.+12     	; 0xdda <shiftActiveBrick+0x26>
	{
		activeBrick.xpos++;
     dce:	e4 ed       	ldi	r30, 0xD4	; 212
     dd0:	f5 e0       	ldi	r31, 0x05	; 5
     dd2:	81 81       	ldd	r24, Z+1	; 0x01
     dd4:	8f 5f       	subi	r24, 0xFF	; 255
     dd6:	81 83       	std	Z+1, r24	; 0x01
     dd8:	18 c0       	rjmp	.+48     	; 0xe0a <shiftActiveBrick+0x56>
}
	else if (dir == down) 
     dda:	84 36       	cpi	r24, 0x64	; 100
     ddc:	b1 f4       	brne	.+44     	; 0xe0a <shiftActiveBrick+0x56>
	{
		activeBrick.ypos--;
     dde:	e4 ed       	ldi	r30, 0xD4	; 212
     de0:	f5 e0       	ldi	r31, 0x05	; 5
     de2:	82 81       	ldd	r24, Z+2	; 0x02
     de4:	81 50       	subi	r24, 0x01	; 1
     de6:	82 83       	std	Z+2, r24	; 0x02
		
		// If brick has reached the bottom, stop and generate new brick
		if (activeBrick.ypos == 0) 
     de8:	81 11       	cpse	r24, r1
     dea:	0f c0       	rjmp	.+30     	; 0xe0a <shiftActiveBrick+0x56>
		{
			if (!checkFieldCollision(&activeBrick))
     dec:	cf 01       	movw	r24, r30
     dee:	0e 94 b0 03 	call	0x760	; 0x760 <checkFieldCollision>
     df2:	89 2b       	or	r24, r25
     df4:	51 f4       	brne	.+20     	; 0xe0a <shiftActiveBrick+0x56>
			{
				addActiveBrickToField();
     df6:	0e 94 3b 03 	call	0x676	; 0x676 <addActiveBrickToField>
				activeBrick.enabled = 0;
     dfa:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <activeBrick>
				printField();
     dfe:	0e 94 69 04 	call	0x8d2	; 0x8d2 <printField>
				clearNext();
     e02:	0e 94 e7 03 	call	0x7ce	; 0x7ce <clearNext>
				newActiveBrick();
     e06:	0e 94 56 05 	call	0xaac	; 0xaac <newActiveBrick>
		}
	}
	
	//Check for collision
	//In case of collision, go back to previous position
	if ((checkSidesCollision(&activeBrick)) || (checkFieldCollision(&activeBrick)))
     e0a:	84 ed       	ldi	r24, 0xD4	; 212
     e0c:	95 e0       	ldi	r25, 0x05	; 5
     e0e:	0e 94 8c 03 	call	0x718	; 0x718 <checkSidesCollision>
     e12:	89 2b       	or	r24, r25
     e14:	31 f4       	brne	.+12     	; 0xe22 <shiftActiveBrick+0x6e>
     e16:	84 ed       	ldi	r24, 0xD4	; 212
     e18:	95 e0       	ldi	r25, 0x05	; 5
     e1a:	0e 94 b0 03 	call	0x760	; 0x760 <checkFieldCollision>
     e1e:	89 2b       	or	r24, r25
     e20:	f1 f0       	breq	.+60     	; 0xe5e <shiftActiveBrick+0xaa>
	{
		if (dir == left)
     e22:	cc 36       	cpi	r28, 0x6C	; 108
     e24:	31 f4       	brne	.+12     	; 0xe32 <shiftActiveBrick+0x7e>
		{
			activeBrick.xpos++;
     e26:	e4 ed       	ldi	r30, 0xD4	; 212
     e28:	f5 e0       	ldi	r31, 0x05	; 5
     e2a:	81 81       	ldd	r24, Z+1	; 0x01
     e2c:	8f 5f       	subi	r24, 0xFF	; 255
     e2e:	81 83       	std	Z+1, r24	; 0x01
     e30:	16 c0       	rjmp	.+44     	; 0xe5e <shiftActiveBrick+0xaa>
		}
		else if (dir == right)
     e32:	c2 37       	cpi	r28, 0x72	; 114
     e34:	31 f4       	brne	.+12     	; 0xe42 <shiftActiveBrick+0x8e>
		{
			activeBrick.xpos--;
     e36:	e4 ed       	ldi	r30, 0xD4	; 212
     e38:	f5 e0       	ldi	r31, 0x05	; 5
     e3a:	81 81       	ldd	r24, Z+1	; 0x01
     e3c:	81 50       	subi	r24, 0x01	; 1
     e3e:	81 83       	std	Z+1, r24	; 0x01
     e40:	0e c0       	rjmp	.+28     	; 0xe5e <shiftActiveBrick+0xaa>
		}
		else if (dir == down)
     e42:	c4 36       	cpi	r28, 0x64	; 100
     e44:	61 f4       	brne	.+24     	; 0xe5e <shiftActiveBrick+0xaa>
		{	
			activeBrick.ypos += 1;
     e46:	c4 ed       	ldi	r28, 0xD4	; 212
     e48:	d5 e0       	ldi	r29, 0x05	; 5
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	8f 5f       	subi	r24, 0xFF	; 255
     e4e:	8a 83       	std	Y+2, r24	; 0x02
			addActiveBrickToField();
     e50:	0e 94 3b 03 	call	0x676	; 0x676 <addActiveBrickToField>
			activeBrick.enabled = 0;
     e54:	18 82       	st	Y, r1
			printField();
     e56:	0e 94 69 04 	call	0x8d2	; 0x8d2 <printField>
			newActiveBrick();
     e5a:	0e 94 56 05 	call	0xaac	; 0xaac <newActiveBrick>
		}
	}
	printField();
     e5e:	0e 94 69 04 	call	0x8d2	; 0x8d2 <printField>
     e62:	85 e8       	ldi	r24, 0x85	; 133
     e64:	8a 95       	dec	r24
     e66:	f1 f7       	brne	.-4      	; 0xe64 <shiftActiveBrick+0xb0>
     e68:	00 00       	nop
	_delay_us(ws2812_resettime);
}
     e6a:	df 91       	pop	r29
     e6c:	cf 91       	pop	r28
     e6e:	08 95       	ret

00000e70 <moveFieldDownOne>:

// CHECK ON TABLE	
void moveFieldDownOne(byte startRow) 
{
     e70:	1f 93       	push	r17
     e72:	cf 93       	push	r28
     e74:	df 93       	push	r29
	//Top row has nothing on top to move
	if (startRow == (row - 1))  
     e76:	83 31       	cpi	r24, 0x13	; 19
     e78:	e9 f5       	brne	.+122    	; 0xef4 <moveFieldDownOne+0x84>
     e7a:	3e c0       	rjmp	.+124    	; 0xef8 <moveFieldDownOne+0x88>
	//Copy top row to bottom
	for (y = startRow; y < row - 1; y++)
	{
		for (x = 0; x < column; x++) 
		{
			field.pix[y][x] = field.pix[y + 1][x];
     e7c:	48 2f       	mov	r20, r24
     e7e:	50 e0       	ldi	r21, 0x00	; 0
     e80:	9a 01       	movw	r18, r20
     e82:	2f 5f       	subi	r18, 0xFF	; 255
     e84:	3f 4f       	sbci	r19, 0xFF	; 255
     e86:	69 2f       	mov	r22, r25
     e88:	70 e0       	ldi	r23, 0x00	; 0
     e8a:	f9 01       	movw	r30, r18
     e8c:	ee 0f       	add	r30, r30
     e8e:	ff 1f       	adc	r31, r31
     e90:	df 01       	movw	r26, r30
     e92:	a2 0f       	add	r26, r18
     e94:	b3 1f       	adc	r27, r19
     e96:	aa 0f       	add	r26, r26
     e98:	bb 1f       	adc	r27, r27
     e9a:	aa 0f       	add	r26, r26
     e9c:	bb 1f       	adc	r27, r27
     e9e:	a0 50       	subi	r26, 0x00	; 0
     ea0:	ba 4f       	sbci	r27, 0xFA	; 250
     ea2:	a6 0f       	add	r26, r22
     ea4:	b7 1f       	adc	r27, r23
     ea6:	1c 91       	ld	r17, X
     ea8:	da 01       	movw	r26, r20
     eaa:	aa 0f       	add	r26, r26
     eac:	bb 1f       	adc	r27, r27
     eae:	ed 01       	movw	r28, r26
     eb0:	c4 0f       	add	r28, r20
     eb2:	d5 1f       	adc	r29, r21
     eb4:	cc 0f       	add	r28, r28
     eb6:	dd 1f       	adc	r29, r29
     eb8:	cc 0f       	add	r28, r28
     eba:	dd 1f       	adc	r29, r29
     ebc:	c0 50       	subi	r28, 0x00	; 0
     ebe:	da 4f       	sbci	r29, 0xFA	; 250
     ec0:	c6 0f       	add	r28, r22
     ec2:	d7 1f       	adc	r29, r23
     ec4:	18 83       	st	Y, r17
			field.color[y][x] = field.color[y + 1][x];
     ec6:	e2 0f       	add	r30, r18
     ec8:	f3 1f       	adc	r31, r19
     eca:	ee 0f       	add	r30, r30
     ecc:	ff 1f       	adc	r31, r31
     ece:	ee 0f       	add	r30, r30
     ed0:	ff 1f       	adc	r31, r31
     ed2:	e0 50       	subi	r30, 0x00	; 0
     ed4:	fa 4f       	sbci	r31, 0xFA	; 250
     ed6:	e6 0f       	add	r30, r22
     ed8:	f7 1f       	adc	r31, r23
     eda:	e0 51       	subi	r30, 0x10	; 16
     edc:	ff 4f       	sbci	r31, 0xFF	; 255
     ede:	20 81       	ld	r18, Z
     ee0:	fe 01       	movw	r30, r28
     ee2:	e0 51       	subi	r30, 0x10	; 16
     ee4:	ff 4f       	sbci	r31, 0xFF	; 255
     ee6:	20 83       	st	Z, r18
	byte x, y;
	
	//Copy top row to bottom
	for (y = startRow; y < row - 1; y++)
	{
		for (x = 0; x < column; x++) 
     ee8:	9f 5f       	subi	r25, 0xFF	; 255
     eea:	01 c0       	rjmp	.+2      	; 0xeee <moveFieldDownOne+0x7e>
     eec:	90 e0       	ldi	r25, 0x00	; 0
     eee:	9c 30       	cpi	r25, 0x0C	; 12
     ef0:	28 f2       	brcs	.-118    	; 0xe7c <moveFieldDownOne+0xc>
		return;
	}
	byte x, y;
	
	//Copy top row to bottom
	for (y = startRow; y < row - 1; y++)
     ef2:	8f 5f       	subi	r24, 0xFF	; 255
     ef4:	83 31       	cpi	r24, 0x13	; 19
     ef6:	d0 f3       	brcs	.-12     	; 0xeec <moveFieldDownOne+0x7c>
		{
			field.pix[y][x] = field.pix[y + 1][x];
			field.color[y][x] = field.color[y + 1][x];
		}
	}
}
     ef8:	df 91       	pop	r29
     efa:	cf 91       	pop	r28
     efc:	1f 91       	pop	r17
     efe:	08 95       	ret

00000f00 <checkFullLines>:

void checkFullLines() 
{
     f00:	ef 92       	push	r14
     f02:	ff 92       	push	r15
     f04:	0f 93       	push	r16
     f06:	1f 93       	push	r17
     f08:	cf 93       	push	r28
     f0a:	df 93       	push	r29
	int x, y;
	int minY = 0;
     f0c:	c0 e0       	ldi	r28, 0x00	; 0
     f0e:	d0 e0       	ldi	r29, 0x00	; 0
	for (y = (row - 1); y >= minY; y--) 
     f10:	03 e1       	ldi	r16, 0x13	; 19
     f12:	10 e0       	ldi	r17, 0x00	; 0
     f14:	5c c0       	rjmp	.+184    	; 0xfce <checkFullLines+0xce>
	{
		//Add number of leds that are on
		byte rowSum = 0;
		for (x = 0; x < 12; x++) 
		{
			rowSum = rowSum + (field.pix[y][x]);
     f16:	f8 01       	movw	r30, r16
     f18:	ee 0f       	add	r30, r30
     f1a:	ff 1f       	adc	r31, r31
     f1c:	e0 0f       	add	r30, r16
     f1e:	f1 1f       	adc	r31, r17
     f20:	ee 0f       	add	r30, r30
     f22:	ff 1f       	adc	r31, r31
     f24:	ee 0f       	add	r30, r30
     f26:	ff 1f       	adc	r31, r31
     f28:	e0 50       	subi	r30, 0x00	; 0
     f2a:	fa 4f       	sbci	r31, 0xFA	; 250
     f2c:	e8 0f       	add	r30, r24
     f2e:	f9 1f       	adc	r31, r25
     f30:	30 81       	ld	r19, Z
     f32:	23 0f       	add	r18, r19
	int minY = 0;
	for (y = (row - 1); y >= minY; y--) 
	{
		//Add number of leds that are on
		byte rowSum = 0;
		for (x = 0; x < 12; x++) 
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	03 c0       	rjmp	.+6      	; 0xf3e <checkFullLines+0x3e>
     f38:	20 e0       	ldi	r18, 0x00	; 0
     f3a:	80 e0       	ldi	r24, 0x00	; 0
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	8c 30       	cpi	r24, 0x0C	; 12
     f40:	91 05       	cpc	r25, r1
     f42:	4c f3       	brlt	.-46     	; 0xf16 <checkFullLines+0x16>
		{
			rowSum = rowSum + (field.pix[y][x]);
		}
		if (rowSum >= 12) 
     f44:	2c 30       	cpi	r18, 0x0C	; 12
     f46:	d8 f4       	brcc	.+54     	; 0xf7e <checkFullLines+0x7e>
     f48:	40 c0       	rjmp	.+128    	; 0xfca <checkFullLines+0xca>
		{
			//Found full row, animate its removal
			for (x = 0; x < 12; x++) 
			{
				field.pix[y][x] = 0;
     f4a:	f8 01       	movw	r30, r16
     f4c:	ee 0f       	add	r30, r30
     f4e:	ff 1f       	adc	r31, r31
     f50:	e0 0f       	add	r30, r16
     f52:	f1 1f       	adc	r31, r17
     f54:	ee 0f       	add	r30, r30
     f56:	ff 1f       	adc	r31, r31
     f58:	ee 0f       	add	r30, r30
     f5a:	ff 1f       	adc	r31, r31
     f5c:	e0 50       	subi	r30, 0x00	; 0
     f5e:	fa 4f       	sbci	r31, 0xFA	; 250
     f60:	ee 0d       	add	r30, r14
     f62:	ff 1d       	adc	r31, r15
     f64:	10 82       	st	Z, r1
				printField();
     f66:	0e 94 69 04 	call	0x8d2	; 0x8d2 <printField>
     f6a:	87 ee       	ldi	r24, 0xE7	; 231
     f6c:	93 e0       	ldi	r25, 0x03	; 3
     f6e:	01 97       	sbiw	r24, 0x01	; 1
     f70:	f1 f7       	brne	.-4      	; 0xf6e <checkFullLines+0x6e>
     f72:	00 c0       	rjmp	.+0      	; 0xf74 <checkFullLines+0x74>
     f74:	00 00       	nop
			rowSum = rowSum + (field.pix[y][x]);
		}
		if (rowSum >= 12) 
		{
			//Found full row, animate its removal
			for (x = 0; x < 12; x++) 
     f76:	9f ef       	ldi	r25, 0xFF	; 255
     f78:	e9 1a       	sub	r14, r25
     f7a:	f9 0a       	sbc	r15, r25
     f7c:	02 c0       	rjmp	.+4      	; 0xf82 <checkFullLines+0x82>
     f7e:	e1 2c       	mov	r14, r1
     f80:	f1 2c       	mov	r15, r1
     f82:	2c e0       	ldi	r18, 0x0C	; 12
     f84:	e2 16       	cp	r14, r18
     f86:	f1 04       	cpc	r15, r1
     f88:	04 f3       	brlt	.-64     	; 0xf4a <checkFullLines+0x4a>
				field.pix[y][x] = 0;
				printField();
				_delay_us(10 * ws2812_resettime);
			}
			//Move all upper rows down by one
			moveFieldDownOne(y);
     f8a:	80 2f       	mov	r24, r16
     f8c:	0e 94 38 07 	call	0xe70	; 0xe70 <moveFieldDownOne>
			y++; minY++;
     f90:	0f 5f       	subi	r16, 0xFF	; 255
     f92:	1f 4f       	sbci	r17, 0xFF	; 255
     f94:	21 96       	adiw	r28, 0x01	; 1
			printField();
     f96:	0e 94 69 04 	call	0x8d2	; 0x8d2 <printField>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f9a:	8f ef       	ldi	r24, 0xFF	; 255
     f9c:	90 e7       	ldi	r25, 0x70	; 112
     f9e:	22 e0       	ldi	r18, 0x02	; 2
     fa0:	81 50       	subi	r24, 0x01	; 1
     fa2:	90 40       	sbci	r25, 0x00	; 0
     fa4:	20 40       	sbci	r18, 0x00	; 0
     fa6:	e1 f7       	brne	.-8      	; 0xfa0 <checkFullLines+0xa0>
     fa8:	00 c0       	rjmp	.+0      	; 0xfaa <checkFullLines+0xaa>
     faa:	00 00       	nop
			_delay_ms(100);

			//Increase brick fall speed
			if (falltime > 40)
     fac:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <falltime>
     fb0:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <falltime+0x1>
     fb4:	89 97       	sbiw	r24, 0x29	; 41
     fb6:	4c f0       	brlt	.+18     	; 0xfca <checkFullLines+0xca>
			{
				falltime -= 40; // Decrease by 40 * 0.005 = 200ms
     fb8:	80 91 30 02 	lds	r24, 0x0230	; 0x800230 <falltime>
     fbc:	90 91 31 02 	lds	r25, 0x0231	; 0x800231 <falltime+0x1>
     fc0:	88 97       	sbiw	r24, 0x28	; 40
     fc2:	90 93 31 02 	sts	0x0231, r25	; 0x800231 <falltime+0x1>
     fc6:	80 93 30 02 	sts	0x0230, r24	; 0x800230 <falltime>

void checkFullLines() 
{
	int x, y;
	int minY = 0;
	for (y = (row - 1); y >= minY; y--) 
     fca:	01 50       	subi	r16, 0x01	; 1
     fcc:	11 09       	sbc	r17, r1
     fce:	0c 17       	cp	r16, r28
     fd0:	1d 07       	cpc	r17, r29
     fd2:	0c f0       	brlt	.+2      	; 0xfd6 <checkFullLines+0xd6>
     fd4:	b1 cf       	rjmp	.-158    	; 0xf38 <checkFullLines+0x38>
			{
				falltime -= 40; // Decrease by 40 * 0.005 = 200ms
			}
		}
	}
}
     fd6:	df 91       	pop	r29
     fd8:	cf 91       	pop	r28
     fda:	1f 91       	pop	r17
     fdc:	0f 91       	pop	r16
     fde:	ff 90       	pop	r15
     fe0:	ef 90       	pop	r14
     fe2:	08 95       	ret

00000fe4 <clearField>:

void clearField()
{
	for (int x = 0; x < column; x++)
     fe4:	20 e0       	ldi	r18, 0x00	; 0
     fe6:	30 e0       	ldi	r19, 0x00	; 0
     fe8:	17 c0       	rjmp	.+46     	; 0x1018 <clearField+0x34>
	{
		for (int y = 0; y < row; y++)
		{
			field.pix[y][x] = 0;
     fea:	fc 01       	movw	r30, r24
     fec:	ee 0f       	add	r30, r30
     fee:	ff 1f       	adc	r31, r31
     ff0:	e8 0f       	add	r30, r24
     ff2:	f9 1f       	adc	r31, r25
     ff4:	ee 0f       	add	r30, r30
     ff6:	ff 1f       	adc	r31, r31
     ff8:	ee 0f       	add	r30, r30
     ffa:	ff 1f       	adc	r31, r31
     ffc:	e0 50       	subi	r30, 0x00	; 0
     ffe:	fa 4f       	sbci	r31, 0xFA	; 250
    1000:	e2 0f       	add	r30, r18
    1002:	f3 1f       	adc	r31, r19
    1004:	10 82       	st	Z, r1

void clearField()
{
	for (int x = 0; x < column; x++)
	{
		for (int y = 0; y < row; y++)
    1006:	01 96       	adiw	r24, 0x01	; 1
    1008:	02 c0       	rjmp	.+4      	; 0x100e <clearField+0x2a>
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	90 e0       	ldi	r25, 0x00	; 0
    100e:	84 31       	cpi	r24, 0x14	; 20
    1010:	91 05       	cpc	r25, r1
    1012:	5c f3       	brlt	.-42     	; 0xfea <clearField+0x6>
	}
}

void clearField()
{
	for (int x = 0; x < column; x++)
    1014:	2f 5f       	subi	r18, 0xFF	; 255
    1016:	3f 4f       	sbci	r19, 0xFF	; 255
    1018:	2c 30       	cpi	r18, 0x0C	; 12
    101a:	31 05       	cpc	r19, r1
    101c:	b4 f3       	brlt	.-20     	; 0x100a <clearField+0x26>
		for (int y = 0; y < row; y++)
		{
			field.pix[y][x] = 0;
		}
	}
}
    101e:	08 95       	ret

00001020 <clearTable>:

void clearTable()
{
	for(int i = MAXPIX; i > 0; i--)
    1020:	8c e2       	ldi	r24, 0x2C	; 44
    1022:	91 e0       	ldi	r25, 0x01	; 1
    1024:	0b c0       	rjmp	.+22     	; 0x103c <clearTable+0x1c>
	{
		led[i-1].r=0;led[i-1].g=0;led[i-1].b=0;
    1026:	01 97       	sbiw	r24, 0x01	; 1
    1028:	fc 01       	movw	r30, r24
    102a:	ee 0f       	add	r30, r30
    102c:	ff 1f       	adc	r31, r31
    102e:	e8 0f       	add	r30, r24
    1030:	f9 1f       	adc	r31, r25
    1032:	e0 5b       	subi	r30, 0xB0	; 176
    1034:	fd 4f       	sbci	r31, 0xFD	; 253
    1036:	11 82       	std	Z+1, r1	; 0x01
    1038:	10 82       	st	Z, r1
    103a:	12 82       	std	Z+2, r1	; 0x02
	}
}

void clearTable()
{
	for(int i = MAXPIX; i > 0; i--)
    103c:	18 16       	cp	r1, r24
    103e:	19 06       	cpc	r1, r25
    1040:	94 f3       	brlt	.-28     	; 0x1026 <clearTable+0x6>
	{
		led[i-1].r=0;led[i-1].g=0;led[i-1].b=0;
	}
	ws2812_setleds(led, MAXPIX);
    1042:	6c e2       	ldi	r22, 0x2C	; 44
    1044:	71 e0       	ldi	r23, 0x01	; 1
    1046:	80 e5       	ldi	r24, 0x50	; 80
    1048:	92 e0       	ldi	r25, 0x02	; 2
    104a:	0e 94 c3 01 	call	0x386	; 0x386 <ws2812_setleds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    104e:	85 e8       	ldi	r24, 0x85	; 133
    1050:	8a 95       	dec	r24
    1052:	f1 f7       	brne	.-4      	; 0x1050 <clearTable+0x30>
    1054:	00 00       	nop
    1056:	08 95       	ret

00001058 <Pause>:
};


// Pauses game
byte Pause(byte paus)
{
    1058:	cf 93       	push	r28
    105a:	c8 2f       	mov	r28, r24
	if (paus > 1)
    105c:	82 30       	cpi	r24, 0x02	; 2
    105e:	20 f0       	brcs	.+8      	; 0x1068 <Pause+0x10>
	{
		paus = 0;
		printField();
    1060:	0e 94 69 04 	call	0x8d2	; 0x8d2 <printField>
		return paus;
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	03 c0       	rjmp	.+6      	; 0x106e <Pause+0x16>
	}
	clearTable();
    1068:	0e 94 10 08 	call	0x1020	; 0x1020 <clearTable>
	return paus;
    106c:	8c 2f       	mov	r24, r28
}
    106e:	cf 91       	pop	r28
    1070:	08 95       	ret

00001072 <menu>:

//This menu will show tetris pieces at the bottom of the screen before the game starts
void menu()
{	
	// I on its side
	for (int i = 0; i <= 3; i++)  
    1072:	80 e0       	ldi	r24, 0x00	; 0
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	18 c0       	rjmp	.+48     	; 0x10a8 <menu+0x36>
	{
		led[pgm_read_byte(&(matrix[0][i]))] = colors[0]; 
    1078:	fc 01       	movw	r30, r24
    107a:	ee 0f       	add	r30, r30
    107c:	ff 1f       	adc	r31, r31
    107e:	e8 59       	subi	r30, 0x98	; 152
    1080:	ff 4f       	sbci	r31, 0xFF	; 255
    1082:	e4 91       	lpm	r30, Z
    1084:	f0 e0       	ldi	r31, 0x00	; 0
    1086:	9f 01       	movw	r18, r30
    1088:	22 0f       	add	r18, r18
    108a:	33 1f       	adc	r19, r19
    108c:	e2 0f       	add	r30, r18
    108e:	f3 1f       	adc	r31, r19
    1090:	e0 5b       	subi	r30, 0xB0	; 176
    1092:	fd 4f       	sbci	r31, 0xFD	; 253
    1094:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <colors>
    1098:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <colors+0x1>
    109c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <colors+0x2>
    10a0:	20 83       	st	Z, r18
    10a2:	31 83       	std	Z+1, r19	; 0x01
    10a4:	42 83       	std	Z+2, r20	; 0x02

//This menu will show tetris pieces at the bottom of the screen before the game starts
void menu()
{	
	// I on its side
	for (int i = 0; i <= 3; i++)  
    10a6:	01 96       	adiw	r24, 0x01	; 1
    10a8:	84 30       	cpi	r24, 0x04	; 4
    10aa:	91 05       	cpc	r25, r1
    10ac:	2c f3       	brlt	.-54     	; 0x1078 <menu+0x6>
    10ae:	80 e0       	ldi	r24, 0x00	; 0
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	27 c0       	rjmp	.+78     	; 0x1102 <menu+0x90>
	}
	
	// Orange T 
	for (int i = 0; i <= 2; i++) 
	{
		led[pgm_read_byte(&(matrix[1][i]))] = colors[1];
    10b4:	fc 01       	movw	r30, r24
    10b6:	3c 96       	adiw	r30, 0x0c	; 12
    10b8:	ee 0f       	add	r30, r30
    10ba:	ff 1f       	adc	r31, r31
    10bc:	e8 59       	subi	r30, 0x98	; 152
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	e4 91       	lpm	r30, Z
    10c2:	f0 e0       	ldi	r31, 0x00	; 0
    10c4:	9f 01       	movw	r18, r30
    10c6:	22 0f       	add	r18, r18
    10c8:	33 1f       	adc	r19, r19
    10ca:	e2 0f       	add	r30, r18
    10cc:	f3 1f       	adc	r31, r19
    10ce:	e0 5b       	subi	r30, 0xB0	; 176
    10d0:	fd 4f       	sbci	r31, 0xFD	; 253
    10d2:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <colors+0x3>
    10d6:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <colors+0x4>
    10da:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <colors+0x5>
    10de:	20 83       	st	Z, r18
    10e0:	31 83       	std	Z+1, r19	; 0x01
    10e2:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[2][1]))] = colors[1]; 
    10e4:	ea e9       	ldi	r30, 0x9A	; 154
    10e6:	f0 e0       	ldi	r31, 0x00	; 0
    10e8:	e4 91       	lpm	r30, Z
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	bf 01       	movw	r22, r30
    10ee:	66 0f       	add	r22, r22
    10f0:	77 1f       	adc	r23, r23
    10f2:	e6 0f       	add	r30, r22
    10f4:	f7 1f       	adc	r31, r23
    10f6:	e0 5b       	subi	r30, 0xB0	; 176
    10f8:	fd 4f       	sbci	r31, 0xFD	; 253
    10fa:	20 83       	st	Z, r18
    10fc:	31 83       	std	Z+1, r19	; 0x01
    10fe:	42 83       	std	Z+2, r20	; 0x02
	{
		led[pgm_read_byte(&(matrix[0][i]))] = colors[0]; 
	}
	
	// Orange T 
	for (int i = 0; i <= 2; i++) 
    1100:	01 96       	adiw	r24, 0x01	; 1
    1102:	83 30       	cpi	r24, 0x03	; 3
    1104:	91 05       	cpc	r25, r1
    1106:	b4 f2       	brlt	.-84     	; 0x10b4 <menu+0x42>
		led[pgm_read_byte(&(matrix[1][i]))] = colors[1];
		led[pgm_read_byte(&(matrix[2][1]))] = colors[1]; 
	}
	
	// Upside down L
		led[pgm_read_byte(&(matrix[0][4]))] = colors[2];
    1108:	e0 e7       	ldi	r30, 0x70	; 112
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	e4 91       	lpm	r30, Z
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	cf 01       	movw	r24, r30
    1112:	88 0f       	add	r24, r24
    1114:	99 1f       	adc	r25, r25
    1116:	e8 0f       	add	r30, r24
    1118:	f9 1f       	adc	r31, r25
    111a:	e0 5b       	subi	r30, 0xB0	; 176
    111c:	fd 4f       	sbci	r31, 0xFD	; 253
    111e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <colors+0x6>
    1122:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <colors+0x7>
    1126:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <colors+0x8>
    112a:	80 83       	st	Z, r24
    112c:	91 83       	std	Z+1, r25	; 0x01
    112e:	a2 83       	std	Z+2, r26	; 0x02
		led[pgm_read_byte(&(matrix[1][4]))] = colors[2];
    1130:	e8 e8       	ldi	r30, 0x88	; 136
    1132:	f0 e0       	ldi	r31, 0x00	; 0
    1134:	e4 91       	lpm	r30, Z
    1136:	f0 e0       	ldi	r31, 0x00	; 0
    1138:	9f 01       	movw	r18, r30
    113a:	22 0f       	add	r18, r18
    113c:	33 1f       	adc	r19, r19
    113e:	e2 0f       	add	r30, r18
    1140:	f3 1f       	adc	r31, r19
    1142:	e0 5b       	subi	r30, 0xB0	; 176
    1144:	fd 4f       	sbci	r31, 0xFD	; 253
    1146:	80 83       	st	Z, r24
    1148:	91 83       	std	Z+1, r25	; 0x01
    114a:	a2 83       	std	Z+2, r26	; 0x02
		led[pgm_read_byte(&(matrix[2][4]))] = colors[2];
    114c:	e0 ea       	ldi	r30, 0xA0	; 160
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	e4 91       	lpm	r30, Z
    1152:	f0 e0       	ldi	r31, 0x00	; 0
    1154:	9f 01       	movw	r18, r30
    1156:	22 0f       	add	r18, r18
    1158:	33 1f       	adc	r19, r19
    115a:	e2 0f       	add	r30, r18
    115c:	f3 1f       	adc	r31, r19
    115e:	e0 5b       	subi	r30, 0xB0	; 176
    1160:	fd 4f       	sbci	r31, 0xFD	; 253
    1162:	80 83       	st	Z, r24
    1164:	91 83       	std	Z+1, r25	; 0x01
    1166:	a2 83       	std	Z+2, r26	; 0x02
		
		led[pgm_read_byte(&(matrix[2][3]))] = colors[2];
    1168:	ee e9       	ldi	r30, 0x9E	; 158
    116a:	f0 e0       	ldi	r31, 0x00	; 0
    116c:	e4 91       	lpm	r30, Z
    116e:	f0 e0       	ldi	r31, 0x00	; 0
    1170:	9f 01       	movw	r18, r30
    1172:	22 0f       	add	r18, r18
    1174:	33 1f       	adc	r19, r19
    1176:	e2 0f       	add	r30, r18
    1178:	f3 1f       	adc	r31, r19
    117a:	e0 5b       	subi	r30, 0xB0	; 176
    117c:	fd 4f       	sbci	r31, 0xFD	; 253
    117e:	80 83       	st	Z, r24
    1180:	91 83       	std	Z+1, r25	; 0x01
    1182:	a2 83       	std	Z+2, r26	; 0x02
		
	// Upside down T
	for (int i = 1; i <= 3; i++)
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	27 c0       	rjmp	.+78     	; 0x11d8 <menu+0x166>
	{
		led[pgm_read_byte(&(matrix[3][i]))] = colors[7];
    118a:	fc 01       	movw	r30, r24
    118c:	b4 96       	adiw	r30, 0x24	; 36
    118e:	ee 0f       	add	r30, r30
    1190:	ff 1f       	adc	r31, r31
    1192:	e8 59       	subi	r30, 0x98	; 152
    1194:	ff 4f       	sbci	r31, 0xFF	; 255
    1196:	e4 91       	lpm	r30, Z
    1198:	f0 e0       	ldi	r31, 0x00	; 0
    119a:	9f 01       	movw	r18, r30
    119c:	22 0f       	add	r18, r18
    119e:	33 1f       	adc	r19, r19
    11a0:	e2 0f       	add	r30, r18
    11a2:	f3 1f       	adc	r31, r19
    11a4:	e0 5b       	subi	r30, 0xB0	; 176
    11a6:	fd 4f       	sbci	r31, 0xFD	; 253
    11a8:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <colors+0x15>
    11ac:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <colors+0x16>
    11b0:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <colors+0x17>
    11b4:	20 83       	st	Z, r18
    11b6:	31 83       	std	Z+1, r19	; 0x01
    11b8:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[2][2]))] = colors[7];
    11ba:	ec e9       	ldi	r30, 0x9C	; 156
    11bc:	f0 e0       	ldi	r31, 0x00	; 0
    11be:	e4 91       	lpm	r30, Z
    11c0:	f0 e0       	ldi	r31, 0x00	; 0
    11c2:	bf 01       	movw	r22, r30
    11c4:	66 0f       	add	r22, r22
    11c6:	77 1f       	adc	r23, r23
    11c8:	e6 0f       	add	r30, r22
    11ca:	f7 1f       	adc	r31, r23
    11cc:	e0 5b       	subi	r30, 0xB0	; 176
    11ce:	fd 4f       	sbci	r31, 0xFD	; 253
    11d0:	20 83       	st	Z, r18
    11d2:	31 83       	std	Z+1, r19	; 0x01
    11d4:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[2][4]))] = colors[2];
		
		led[pgm_read_byte(&(matrix[2][3]))] = colors[2];
		
	// Upside down T
	for (int i = 1; i <= 3; i++)
    11d6:	01 96       	adiw	r24, 0x01	; 1
    11d8:	84 30       	cpi	r24, 0x04	; 4
    11da:	91 05       	cpc	r25, r1
    11dc:	b4 f2       	brlt	.-84     	; 0x118a <menu+0x118>
    11de:	85 e0       	ldi	r24, 0x05	; 5
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	26 c0       	rjmp	.+76     	; 0x1230 <menu+0x1be>
	}
		
	// L on its side
	for (int i = 5; i <= 7; i++)  
	{
		led[pgm_read_byte(&(matrix[0][i]))] = colors[4];
    11e4:	fc 01       	movw	r30, r24
    11e6:	ee 0f       	add	r30, r30
    11e8:	ff 1f       	adc	r31, r31
    11ea:	e8 59       	subi	r30, 0x98	; 152
    11ec:	ff 4f       	sbci	r31, 0xFF	; 255
    11ee:	e4 91       	lpm	r30, Z
    11f0:	f0 e0       	ldi	r31, 0x00	; 0
    11f2:	9f 01       	movw	r18, r30
    11f4:	22 0f       	add	r18, r18
    11f6:	33 1f       	adc	r19, r19
    11f8:	e2 0f       	add	r30, r18
    11fa:	f3 1f       	adc	r31, r19
    11fc:	e0 5b       	subi	r30, 0xB0	; 176
    11fe:	fd 4f       	sbci	r31, 0xFD	; 253
    1200:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <colors+0xc>
    1204:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <colors+0xd>
    1208:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <colors+0xe>
    120c:	20 83       	st	Z, r18
    120e:	31 83       	std	Z+1, r19	; 0x01
    1210:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[1][5]))] = colors[4];	
    1212:	ea e8       	ldi	r30, 0x8A	; 138
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	e4 91       	lpm	r30, Z
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	bf 01       	movw	r22, r30
    121c:	66 0f       	add	r22, r22
    121e:	77 1f       	adc	r23, r23
    1220:	e6 0f       	add	r30, r22
    1222:	f7 1f       	adc	r31, r23
    1224:	e0 5b       	subi	r30, 0xB0	; 176
    1226:	fd 4f       	sbci	r31, 0xFD	; 253
    1228:	20 83       	st	Z, r18
    122a:	31 83       	std	Z+1, r19	; 0x01
    122c:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[3][i]))] = colors[7];
		led[pgm_read_byte(&(matrix[2][2]))] = colors[7];
	}
		
	// L on its side
	for (int i = 5; i <= 7; i++)  
    122e:	01 96       	adiw	r24, 0x01	; 1
    1230:	88 30       	cpi	r24, 0x08	; 8
    1232:	91 05       	cpc	r25, r1
    1234:	bc f2       	brlt	.-82     	; 0x11e4 <menu+0x172>
		led[pgm_read_byte(&(matrix[0][i]))] = colors[4];
		led[pgm_read_byte(&(matrix[1][5]))] = colors[4];	
	}
	
	// Rotated s
		led[pgm_read_byte(&(matrix[3][5]))] = colors[5];
    1236:	ea eb       	ldi	r30, 0xBA	; 186
    1238:	f0 e0       	ldi	r31, 0x00	; 0
    123a:	e4 91       	lpm	r30, Z
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	cf 01       	movw	r24, r30
    1240:	88 0f       	add	r24, r24
    1242:	99 1f       	adc	r25, r25
    1244:	e8 0f       	add	r30, r24
    1246:	f9 1f       	adc	r31, r25
    1248:	e0 5b       	subi	r30, 0xB0	; 176
    124a:	fd 4f       	sbci	r31, 0xFD	; 253
    124c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <colors+0xf>
    1250:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <colors+0x10>
    1254:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <colors+0x11>
    1258:	80 83       	st	Z, r24
    125a:	91 83       	std	Z+1, r25	; 0x01
    125c:	a2 83       	std	Z+2, r26	; 0x02
		led[pgm_read_byte(&(matrix[2][5]))] = colors[5];
    125e:	e2 ea       	ldi	r30, 0xA2	; 162
    1260:	f0 e0       	ldi	r31, 0x00	; 0
    1262:	e4 91       	lpm	r30, Z
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	9f 01       	movw	r18, r30
    1268:	22 0f       	add	r18, r18
    126a:	33 1f       	adc	r19, r19
    126c:	e2 0f       	add	r30, r18
    126e:	f3 1f       	adc	r31, r19
    1270:	e0 5b       	subi	r30, 0xB0	; 176
    1272:	fd 4f       	sbci	r31, 0xFD	; 253
    1274:	80 83       	st	Z, r24
    1276:	91 83       	std	Z+1, r25	; 0x01
    1278:	a2 83       	std	Z+2, r26	; 0x02
		led[pgm_read_byte(&(matrix[2][6]))] = colors[5];
    127a:	e4 ea       	ldi	r30, 0xA4	; 164
    127c:	f0 e0       	ldi	r31, 0x00	; 0
    127e:	e4 91       	lpm	r30, Z
    1280:	f0 e0       	ldi	r31, 0x00	; 0
    1282:	9f 01       	movw	r18, r30
    1284:	22 0f       	add	r18, r18
    1286:	33 1f       	adc	r19, r19
    1288:	e2 0f       	add	r30, r18
    128a:	f3 1f       	adc	r31, r19
    128c:	e0 5b       	subi	r30, 0xB0	; 176
    128e:	fd 4f       	sbci	r31, 0xFD	; 253
    1290:	80 83       	st	Z, r24
    1292:	91 83       	std	Z+1, r25	; 0x01
    1294:	a2 83       	std	Z+2, r26	; 0x02
		led[pgm_read_byte(&(matrix[1][6]))] = colors[5];
    1296:	ec e8       	ldi	r30, 0x8C	; 140
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	e4 91       	lpm	r30, Z
    129c:	f0 e0       	ldi	r31, 0x00	; 0
    129e:	9f 01       	movw	r18, r30
    12a0:	22 0f       	add	r18, r18
    12a2:	33 1f       	adc	r19, r19
    12a4:	e2 0f       	add	r30, r18
    12a6:	f3 1f       	adc	r31, r19
    12a8:	e0 5b       	subi	r30, 0xB0	; 176
    12aa:	fd 4f       	sbci	r31, 0xFD	; 253
    12ac:	80 83       	st	Z, r24
    12ae:	91 83       	std	Z+1, r25	; 0x01
    12b0:	a2 83       	std	Z+2, r26	; 0x02
		
	// Flat I
	for (int i = 6; i <= 9; i++)
    12b2:	86 e0       	ldi	r24, 0x06	; 6
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	19 c0       	rjmp	.+50     	; 0x12ea <menu+0x278>
	{
		led[pgm_read_byte(&(matrix[3][i]))] = colors[3];
    12b8:	fc 01       	movw	r30, r24
    12ba:	b4 96       	adiw	r30, 0x24	; 36
    12bc:	ee 0f       	add	r30, r30
    12be:	ff 1f       	adc	r31, r31
    12c0:	e8 59       	subi	r30, 0x98	; 152
    12c2:	ff 4f       	sbci	r31, 0xFF	; 255
    12c4:	e4 91       	lpm	r30, Z
    12c6:	f0 e0       	ldi	r31, 0x00	; 0
    12c8:	9f 01       	movw	r18, r30
    12ca:	22 0f       	add	r18, r18
    12cc:	33 1f       	adc	r19, r19
    12ce:	e2 0f       	add	r30, r18
    12d0:	f3 1f       	adc	r31, r19
    12d2:	e0 5b       	subi	r30, 0xB0	; 176
    12d4:	fd 4f       	sbci	r31, 0xFD	; 253
    12d6:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <colors+0x9>
    12da:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <colors+0xa>
    12de:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <colors+0xb>
    12e2:	20 83       	st	Z, r18
    12e4:	31 83       	std	Z+1, r19	; 0x01
    12e6:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[2][5]))] = colors[5];
		led[pgm_read_byte(&(matrix[2][6]))] = colors[5];
		led[pgm_read_byte(&(matrix[1][6]))] = colors[5];
		
	// Flat I
	for (int i = 6; i <= 9; i++)
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	8a 30       	cpi	r24, 0x0A	; 10
    12ec:	91 05       	cpc	r25, r1
    12ee:	24 f3       	brlt	.-56     	; 0x12b8 <menu+0x246>
    12f0:	89 e0       	ldi	r24, 0x09	; 9
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	53 c0       	rjmp	.+166    	; 0x139c <menu+0x32a>
	}
	
	// L on its side 
	for (int i = 9; i <= 11; i++)  
	{
		led[pgm_read_byte(&(matrix[0][i]))] = colors[8];
    12f6:	fc 01       	movw	r30, r24
    12f8:	ee 0f       	add	r30, r30
    12fa:	ff 1f       	adc	r31, r31
    12fc:	e8 59       	subi	r30, 0x98	; 152
    12fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1300:	e4 91       	lpm	r30, Z
    1302:	f0 e0       	ldi	r31, 0x00	; 0
    1304:	9f 01       	movw	r18, r30
    1306:	22 0f       	add	r18, r18
    1308:	33 1f       	adc	r19, r19
    130a:	e2 0f       	add	r30, r18
    130c:	f3 1f       	adc	r31, r19
    130e:	e0 5b       	subi	r30, 0xB0	; 176
    1310:	fd 4f       	sbci	r31, 0xFD	; 253
    1312:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <colors+0x18>
    1316:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <colors+0x19>
    131a:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <colors+0x1a>
    131e:	20 83       	st	Z, r18
    1320:	31 83       	std	Z+1, r19	; 0x01
    1322:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[1][11]))] = colors[8];
    1324:	e6 e9       	ldi	r30, 0x96	; 150
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	e4 91       	lpm	r30, Z
    132a:	f0 e0       	ldi	r31, 0x00	; 0
    132c:	bf 01       	movw	r22, r30
    132e:	66 0f       	add	r22, r22
    1330:	77 1f       	adc	r23, r23
    1332:	e6 0f       	add	r30, r22
    1334:	f7 1f       	adc	r31, r23
    1336:	e0 5b       	subi	r30, 0xB0	; 176
    1338:	fd 4f       	sbci	r31, 0xFD	; 253
    133a:	20 83       	st	Z, r18
    133c:	31 83       	std	Z+1, r19	; 0x01
    133e:	42 83       	std	Z+2, r20	; 0x02
		
		// blue Q 
		if (i < 11)
    1340:	8b 30       	cpi	r24, 0x0B	; 11
    1342:	91 05       	cpc	r25, r1
    1344:	54 f5       	brge	.+84     	; 0x139a <menu+0x328>
		{
		led[pgm_read_byte(&(matrix[1][i]))] = colors[9];
    1346:	fc 01       	movw	r30, r24
    1348:	3c 96       	adiw	r30, 0x0c	; 12
    134a:	ee 0f       	add	r30, r30
    134c:	ff 1f       	adc	r31, r31
    134e:	e8 59       	subi	r30, 0x98	; 152
    1350:	ff 4f       	sbci	r31, 0xFF	; 255
    1352:	e4 91       	lpm	r30, Z
    1354:	f0 e0       	ldi	r31, 0x00	; 0
    1356:	9f 01       	movw	r18, r30
    1358:	22 0f       	add	r18, r18
    135a:	33 1f       	adc	r19, r19
    135c:	e2 0f       	add	r30, r18
    135e:	f3 1f       	adc	r31, r19
    1360:	e0 5b       	subi	r30, 0xB0	; 176
    1362:	fd 4f       	sbci	r31, 0xFD	; 253
    1364:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <colors+0x1b>
    1368:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <colors+0x1c>
    136c:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <colors+0x1d>
    1370:	20 83       	st	Z, r18
    1372:	31 83       	std	Z+1, r19	; 0x01
    1374:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[2][i]))] = colors[9];	
    1376:	fc 01       	movw	r30, r24
    1378:	78 96       	adiw	r30, 0x18	; 24
    137a:	ee 0f       	add	r30, r30
    137c:	ff 1f       	adc	r31, r31
    137e:	e8 59       	subi	r30, 0x98	; 152
    1380:	ff 4f       	sbci	r31, 0xFF	; 255
    1382:	e4 91       	lpm	r30, Z
    1384:	f0 e0       	ldi	r31, 0x00	; 0
    1386:	bf 01       	movw	r22, r30
    1388:	66 0f       	add	r22, r22
    138a:	77 1f       	adc	r23, r23
    138c:	e6 0f       	add	r30, r22
    138e:	f7 1f       	adc	r31, r23
    1390:	e0 5b       	subi	r30, 0xB0	; 176
    1392:	fd 4f       	sbci	r31, 0xFD	; 253
    1394:	20 83       	st	Z, r18
    1396:	31 83       	std	Z+1, r19	; 0x01
    1398:	42 83       	std	Z+2, r20	; 0x02
	{
		led[pgm_read_byte(&(matrix[3][i]))] = colors[3];
	}
	
	// L on its side 
	for (int i = 9; i <= 11; i++)  
    139a:	01 96       	adiw	r24, 0x01	; 1
    139c:	8c 30       	cpi	r24, 0x0C	; 12
    139e:	91 05       	cpc	r25, r1
    13a0:	0c f4       	brge	.+2      	; 0x13a4 <menu+0x332>
    13a2:	a9 cf       	rjmp	.-174    	; 0x12f6 <menu+0x284>
		{
		led[pgm_read_byte(&(matrix[1][i]))] = colors[9];
		led[pgm_read_byte(&(matrix[2][i]))] = colors[9];	
		}
	}
	ws2812_setleds(led,MAXPIX);
    13a4:	6c e2       	ldi	r22, 0x2C	; 44
    13a6:	71 e0       	ldi	r23, 0x01	; 1
    13a8:	80 e5       	ldi	r24, 0x50	; 80
    13aa:	92 e0       	ldi	r25, 0x02	; 2
    13ac:	0e 94 c3 01 	call	0x386	; 0x386 <ws2812_setleds>
    13b0:	08 95       	ret

000013b2 <forcedown>:
}

//Piece goes all the way down until it reached the bottom or another piece
void forcedown()
{
    13b2:	0f 93       	push	r16
    13b4:	1f 93       	push	r17
    13b6:	cf 93       	push	r28
	while (!(activeBrick.ypos == 0) || !checkFieldCollision(&activeBrick))
    13b8:	25 c0       	rjmp	.+74     	; 0x1404 <forcedown+0x52>
	{
		activeBrick.ypos--;
    13ba:	8f ef       	ldi	r24, 0xFF	; 255
    13bc:	8c 0f       	add	r24, r28
    13be:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <activeBrick+0x2>
		
		if (checkFieldCollision(&activeBrick))
    13c2:	84 ed       	ldi	r24, 0xD4	; 212
    13c4:	95 e0       	ldi	r25, 0x05	; 5
    13c6:	0e 94 b0 03 	call	0x760	; 0x760 <checkFieldCollision>
    13ca:	89 2b       	or	r24, r25
    13cc:	51 f0       	breq	.+20     	; 0x13e2 <forcedown+0x30>
		{
			activeBrick.ypos++;			//Go back up one
    13ce:	04 ed       	ldi	r16, 0xD4	; 212
    13d0:	15 e0       	ldi	r17, 0x05	; 5
    13d2:	f8 01       	movw	r30, r16
    13d4:	c2 83       	std	Z+2, r28	; 0x02
			addActiveBrickToField();
    13d6:	0e 94 3b 03 	call	0x676	; 0x676 <addActiveBrickToField>
			activeBrick.enabled = 0;	//Disable brick, it is no longer moving
    13da:	f8 01       	movw	r30, r16
    13dc:	10 82       	st	Z, r1
			clearNext();
    13de:	0e 94 e7 03 	call	0x7ce	; 0x7ce <clearNext>
		}
		
		if (activeBrick.ypos == 0)
    13e2:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <activeBrick+0x2>
    13e6:	81 11       	cpse	r24, r1
    13e8:	0b c0       	rjmp	.+22     	; 0x1400 <forcedown+0x4e>
		{
			addActiveBrickToField();
    13ea:	0e 94 3b 03 	call	0x676	; 0x676 <addActiveBrickToField>
			activeBrick.enabled = 0;
    13ee:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <activeBrick>
			printField();
    13f2:	0e 94 69 04 	call	0x8d2	; 0x8d2 <printField>
			newActiveBrick();
    13f6:	0e 94 56 05 	call	0xaac	; 0xaac <newActiveBrick>
			clearNext();
    13fa:	0e 94 e7 03 	call	0x7ce	; 0x7ce <clearNext>
			break;
    13fe:	0c c0       	rjmp	.+24     	; 0x1418 <forcedown+0x66>
		}
		printField();
    1400:	0e 94 69 04 	call	0x8d2	; 0x8d2 <printField>
}

//Piece goes all the way down until it reached the bottom or another piece
void forcedown()
{
	while (!(activeBrick.ypos == 0) || !checkFieldCollision(&activeBrick))
    1404:	c0 91 d6 05 	lds	r28, 0x05D6	; 0x8005d6 <activeBrick+0x2>
    1408:	c1 11       	cpse	r28, r1
    140a:	d7 cf       	rjmp	.-82     	; 0x13ba <forcedown+0x8>
    140c:	84 ed       	ldi	r24, 0xD4	; 212
    140e:	95 e0       	ldi	r25, 0x05	; 5
    1410:	0e 94 b0 03 	call	0x760	; 0x760 <checkFieldCollision>
    1414:	89 2b       	or	r24, r25
    1416:	89 f2       	breq	.-94     	; 0x13ba <forcedown+0x8>
			clearNext();
			break;
		}
		printField();
	}
}
    1418:	cf 91       	pop	r28
    141a:	1f 91       	pop	r17
    141c:	0f 91       	pop	r16
    141e:	08 95       	ret

00001420 <_exit>:
    1420:	f8 94       	cli

00001422 <__stop_program>:
    1422:	ff cf       	rjmp	.-2      	; 0x1422 <__stop_program>
