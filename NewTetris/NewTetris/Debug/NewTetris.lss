
NewTetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000002b8  0000034c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002b8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000394  00800102  00800102  0000034e  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000034e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000380  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  000003c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002e91  00000000  00000000  00000510  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c9a  00000000  00000000  000033a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000155a  00000000  00000000  0000403b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000310  00000000  00000000  00005598  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007b4  00000000  00000000  000058a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000023a6  00000000  00000000  0000605c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000278  00000000  00000000  00008402  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 01 01 	jmp	0x202	; 0x202 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 d3 00 	jmp	0x1a6	; 0x1a6 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e8 eb       	ldi	r30, 0xB8	; 184
  7c:	f2 e0       	ldi	r31, 0x02	; 2
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	24 e0       	ldi	r18, 0x04	; 4
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a6 39       	cpi	r26, 0x96	; 150
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 37 01 	call	0x26e	; 0x26e <main>
  9e:	0c 94 5a 01 	jmp	0x2b4	; 0x2b4 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <ws2812_setleds>:
#include <avr/io.h>
#include <util/delay.h>
 
// Setleds for standard RGB 
void inline ws2812_setleds(struct cRGB *ledarray, uint16_t leds)
{
  a6:	fc 01       	movw	r30, r24
   ws2812_setleds_pin(ledarray,leds, _BV(ws2812_pin));
}

void inline ws2812_setleds_pin(struct cRGB *ledarray, uint16_t leds, uint8_t pinmask)
{
  ws2812_sendarray_mask((uint8_t*)ledarray,leds+leds+leds,pinmask);
  a8:	9b 01       	movw	r18, r22
  aa:	22 0f       	add	r18, r18
  ac:	33 1f       	adc	r19, r19
  ae:	62 0f       	add	r22, r18
  b0:	73 1f       	adc	r23, r19
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
  b2:	8a b1       	in	r24, 0x0a	; 10
  b4:	80 62       	ori	r24, 0x20	; 32
  b6:	8a b9       	out	0x0a, r24	; 10
  
  masklo	=~maskhi&ws2812_PORTREG;
  b8:	ab b1       	in	r26, 0x0b	; 11
  ba:	af 7d       	andi	r26, 0xDF	; 223
  maskhi |=        ws2812_PORTREG;
  bc:	5b b1       	in	r21, 0x0b	; 11
  be:	50 62       	ori	r21, 0x20	; 32
  
  sreg_prev=SREG;
  c0:	bf b7       	in	r27, 0x3f	; 63
  cli();  
  c2:	f8 94       	cli
  c4:	10 c0       	rjmp	.+32     	; 0xe6 <loop51+0x16>

  while (datlen--) {
    curbyte=*data++;
  c6:	9f 01       	movw	r18, r30
  c8:	2f 5f       	subi	r18, 0xFF	; 255
  ca:	3f 4f       	sbci	r19, 0xFF	; 255
  cc:	40 81       	ld	r20, Z
    
    asm volatile(
  ce:	68 e0       	ldi	r22, 0x08	; 8

000000d0 <loop51>:
  d0:	5b b9       	out	0x0b, r21	; 11
  d2:	47 ff       	sbrs	r20, 7
  d4:	ab b9       	out	0x0b, r26	; 11
  d6:	44 0f       	add	r20, r20
  d8:	00 00       	nop
  da:	00 c0       	rjmp	.+0      	; 0xdc <loop51+0xc>
  dc:	ab b9       	out	0x0b, r26	; 11
  de:	6a 95       	dec	r22
  e0:	b9 f7       	brne	.-18     	; 0xd0 <loop51>
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
  e2:	bc 01       	movw	r22, r24
    curbyte=*data++;
  e4:	f9 01       	movw	r30, r18
  maskhi |=        ws2812_PORTREG;
  
  sreg_prev=SREG;
  cli();  

  while (datlen--) {
  e6:	cb 01       	movw	r24, r22
  e8:	01 97       	sbiw	r24, 0x01	; 1
  ea:	67 2b       	or	r22, r23
  ec:	61 f7       	brne	.-40     	; 0xc6 <ws2812_setleds+0x20>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
  ee:	bf bf       	out	0x3f, r27	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f0:	85 e8       	ldi	r24, 0x85	; 133
  f2:	8a 95       	dec	r24
  f4:	f1 f7       	brne	.-4      	; 0xf2 <loop51+0x22>
  f6:	00 00       	nop
  f8:	08 95       	ret

000000fa <testleds>:
	{
		while((UCSR0A & (1<<UDRE0)) == 0);
		UDR0 = buffer[i];
		i++;
	}
}
  fa:	cf 93       	push	r28
  fc:	df 93       	push	r29
  fe:	c0 e0       	ldi	r28, 0x00	; 0
 100:	d0 e0       	ldi	r29, 0x00	; 0
 102:	1a c0       	rjmp	.+52     	; 0x138 <testleds+0x3e>
 104:	fe 01       	movw	r30, r28
 106:	ee 0f       	add	r30, r30
 108:	ff 1f       	adc	r31, r31
 10a:	ec 0f       	add	r30, r28
 10c:	fd 1f       	adc	r31, r29
 10e:	ee 5e       	subi	r30, 0xEE	; 238
 110:	fe 4f       	sbci	r31, 0xFE	; 254
 112:	8b e0       	ldi	r24, 0x0B	; 11
 114:	81 83       	std	Z+1, r24	; 0x01
 116:	82 83       	std	Z+2, r24	; 0x02
 118:	6c e2       	ldi	r22, 0x2C	; 44
 11a:	71 e0       	ldi	r23, 0x01	; 1
 11c:	82 e1       	ldi	r24, 0x12	; 18
 11e:	91 e0       	ldi	r25, 0x01	; 1
 120:	0e 94 53 00 	call	0xa6	; 0xa6 <ws2812_setleds>
 124:	2f e7       	ldi	r18, 0x7F	; 127
 126:	88 e3       	ldi	r24, 0x38	; 56
 128:	91 e0       	ldi	r25, 0x01	; 1
 12a:	21 50       	subi	r18, 0x01	; 1
 12c:	80 40       	sbci	r24, 0x00	; 0
 12e:	90 40       	sbci	r25, 0x00	; 0
 130:	e1 f7       	brne	.-8      	; 0x12a <testleds+0x30>
 132:	00 c0       	rjmp	.+0      	; 0x134 <testleds+0x3a>
 134:	00 00       	nop
 136:	21 96       	adiw	r28, 0x01	; 1
 138:	cf 3f       	cpi	r28, 0xFF	; 255
 13a:	d1 05       	cpc	r29, r1
 13c:	19 f3       	breq	.-58     	; 0x104 <testleds+0xa>
 13e:	14 f3       	brlt	.-60     	; 0x104 <testleds+0xa>
 140:	df 91       	pop	r29
 142:	cf 91       	pop	r28
 144:	08 95       	ret

00000146 <init>:
 146:	84 b1       	in	r24, 0x04	; 4
 148:	80 62       	ori	r24, 0x20	; 32
 14a:	84 b9       	out	0x04, r24	; 4
 14c:	0e 94 3e 01 	call	0x27c	; 0x27c <clearTable>
 150:	2f e7       	ldi	r18, 0x7F	; 127
 152:	88 e3       	ldi	r24, 0x38	; 56
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	21 50       	subi	r18, 0x01	; 1
 158:	80 40       	sbci	r24, 0x00	; 0
 15a:	90 40       	sbci	r25, 0x00	; 0
 15c:	e1 f7       	brne	.-8      	; 0x156 <init+0x10>
 15e:	00 c0       	rjmp	.+0      	; 0x160 <init+0x1a>
 160:	00 00       	nop
 162:	84 b1       	in	r24, 0x04	; 4
 164:	82 60       	ori	r24, 0x02	; 2
 166:	84 b9       	out	0x04, r24	; 4
 168:	82 e0       	ldi	r24, 0x02	; 2
 16a:	85 b9       	out	0x05, r24	; 5
 16c:	97 e2       	ldi	r25, 0x27	; 39
 16e:	97 bd       	out	0x27, r25	; 39
 170:	84 bd       	out	0x24, r24	; 36
 172:	95 ec       	ldi	r25, 0xC5	; 197
 174:	95 bd       	out	0x25, r25	; 37
 176:	ee e6       	ldi	r30, 0x6E	; 110
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	90 81       	ld	r25, Z
 17c:	92 60       	ori	r25, 0x02	; 2
 17e:	90 83       	st	Z, r25
 180:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 184:	97 e6       	ldi	r25, 0x67	; 103
 186:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 18a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 18e:	e1 ec       	ldi	r30, 0xC1	; 193
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	88 69       	ori	r24, 0x98	; 152
 196:	80 83       	st	Z, r24
 198:	e2 ec       	ldi	r30, 0xC2	; 194
 19a:	f0 e0       	ldi	r31, 0x00	; 0
 19c:	80 81       	ld	r24, Z
 19e:	86 60       	ori	r24, 0x06	; 6
 1a0:	80 83       	st	Z, r24
 1a2:	78 94       	sei
 1a4:	08 95       	ret

000001a6 <__vector_18>:
 1a6:	1f 92       	push	r1
 1a8:	0f 92       	push	r0
 1aa:	0f b6       	in	r0, 0x3f	; 63
 1ac:	0f 92       	push	r0
 1ae:	11 24       	eor	r1, r1
 1b0:	8f 93       	push	r24
 1b2:	af 93       	push	r26
 1b4:	bf 93       	push	r27
 1b6:	ef 93       	push	r30
 1b8:	ff 93       	push	r31
 1ba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
 1be:	e2 e0       	ldi	r30, 0x02	; 2
 1c0:	f1 e0       	ldi	r31, 0x01	; 1
 1c2:	81 83       	std	Z+1, r24	; 0x01
 1c4:	81 81       	ldd	r24, Z+1	; 0x01
 1c6:	88 71       	andi	r24, 0x18	; 24
 1c8:	29 f0       	breq	.+10     	; 0x1d4 <__vector_18+0x2e>
 1ca:	e4 e0       	ldi	r30, 0x04	; 4
 1cc:	f1 e0       	ldi	r31, 0x01	; 1
 1ce:	80 81       	ld	r24, Z
 1d0:	82 60       	ori	r24, 0x02	; 2
 1d2:	80 83       	st	Z, r24
 1d4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 1d8:	e2 e0       	ldi	r30, 0x02	; 2
 1da:	f1 e0       	ldi	r31, 0x01	; 1
 1dc:	80 83       	st	Z, r24
 1de:	a4 e0       	ldi	r26, 0x04	; 4
 1e0:	b1 e0       	ldi	r27, 0x01	; 1
 1e2:	8c 91       	ld	r24, X
 1e4:	81 60       	ori	r24, 0x01	; 1
 1e6:	8c 93       	st	X, r24
 1e8:	80 81       	ld	r24, Z
 1ea:	80 93 11 01 	sts	0x0111, r24	; 0x800111 <button>
 1ee:	ff 91       	pop	r31
 1f0:	ef 91       	pop	r30
 1f2:	bf 91       	pop	r27
 1f4:	af 91       	pop	r26
 1f6:	8f 91       	pop	r24
 1f8:	0f 90       	pop	r0
 1fa:	0f be       	out	0x3f, r0	; 63
 1fc:	0f 90       	pop	r0
 1fe:	1f 90       	pop	r1
 200:	18 95       	reti

00000202 <__vector_14>:

ISR(TIMER0_COMPA_vect) {	// Timer 0
 202:	1f 92       	push	r1
 204:	0f 92       	push	r0
 206:	0f b6       	in	r0, 0x3f	; 63
 208:	0f 92       	push	r0
 20a:	11 24       	eor	r1, r1
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
	count_1000++;
 210:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <count_1000>
 214:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <count_1000+0x1>
 218:	01 96       	adiw	r24, 0x01	; 1
 21a:	90 93 06 01 	sts	0x0106, r25	; 0x800106 <count_1000+0x1>
 21e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <count_1000>

	if (count_1000 == 100)	// When Timer 0 counts to 100, time = 0.005 * 100 = 0.5s = 500ms
 222:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <count_1000>
 226:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <count_1000+0x1>
 22a:	84 36       	cpi	r24, 0x64	; 100
 22c:	91 05       	cpc	r25, r1
 22e:	c1 f4       	brne	.+48     	; 0x260 <__vector_14+0x5e>
	{
		count_1000 = 0;		// Resets Timer
 230:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <count_1000+0x1>
 234:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <count_1000>

		if (flag_LED == 1)	// If LED ON
 238:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 23c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	31 f4       	brne	.+12     	; 0x250 <__vector_14+0x4e>
		{
			PORTB = 0b00000000;
 244:	15 b8       	out	0x05, r1	; 5
			flag_LED = 0;	// Turns LED OFF
 246:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 24a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
 24e:	08 c0       	rjmp	.+16     	; 0x260 <__vector_14+0x5e>
		}
		else				// If LED OFF
		{
			PORTB = 0b00000010;
 250:	82 e0       	ldi	r24, 0x02	; 2
 252:	85 b9       	out	0x05, r24	; 5
			flag_LED = 1;	// Turns LED ON
 254:	81 e0       	ldi	r24, 0x01	; 1
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 25c:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
}
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	0f 90       	pop	r0
 266:	0f be       	out	0x3f, r0	; 63
 268:	0f 90       	pop	r0
 26a:	1f 90       	pop	r1
 26c:	18 95       	reti

0000026e <main>:

int main(void)
{
	init();
 26e:	0e 94 a3 00 	call	0x146	; 0x146 <init>
	    led[0].r = 0;
	    ws2812_setleds(led, MAXPIX);
	    _delay_us(ws2812_resettime);
    }
	*/
	testleds();
 272:	0e 94 7d 00 	call	0xfa	; 0xfa <testleds>
	
 276:	80 e0       	ldi	r24, 0x00	; 0
 278:	90 e0       	ldi	r25, 0x00	; 0
 27a:	08 95       	ret

0000027c <clearTable>:
	}
}

void clearTable()
{
	for(int i = MAXPIX; i > 0; i--)
 27c:	8c e2       	ldi	r24, 0x2C	; 44
 27e:	91 e0       	ldi	r25, 0x01	; 1
 280:	0b c0       	rjmp	.+22     	; 0x298 <clearTable+0x1c>
	{
		led[i-1].r=0;led[i-1].g=0;led[i-1].b=0;
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	fc 01       	movw	r30, r24
 286:	ee 0f       	add	r30, r30
 288:	ff 1f       	adc	r31, r31
 28a:	e8 0f       	add	r30, r24
 28c:	f9 1f       	adc	r31, r25
 28e:	ee 5e       	subi	r30, 0xEE	; 238
 290:	fe 4f       	sbci	r31, 0xFE	; 254
 292:	11 82       	std	Z+1, r1	; 0x01
 294:	10 82       	st	Z, r1
 296:	12 82       	std	Z+2, r1	; 0x02
	}
}

void clearTable()
{
	for(int i = MAXPIX; i > 0; i--)
 298:	18 16       	cp	r1, r24
 29a:	19 06       	cpc	r1, r25
 29c:	94 f3       	brlt	.-28     	; 0x282 <clearTable+0x6>
	{
		led[i-1].r=0;led[i-1].g=0;led[i-1].b=0;
	}
	ws2812_setleds(led, MAXPIX);
 29e:	6c e2       	ldi	r22, 0x2C	; 44
 2a0:	71 e0       	ldi	r23, 0x01	; 1
 2a2:	82 e1       	ldi	r24, 0x12	; 18
 2a4:	91 e0       	ldi	r25, 0x01	; 1
 2a6:	0e 94 53 00 	call	0xa6	; 0xa6 <ws2812_setleds>
 2aa:	85 e8       	ldi	r24, 0x85	; 133
 2ac:	8a 95       	dec	r24
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <clearTable+0x30>
 2b0:	00 00       	nop
 2b2:	08 95       	ret

000002b4 <_exit>:
 2b4:	f8 94       	cli

000002b6 <__stop_program>:
 2b6:	ff cf       	rjmp	.-2      	; 0x2b6 <__stop_program>
