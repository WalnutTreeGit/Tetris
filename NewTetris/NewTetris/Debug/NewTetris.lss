
NewTetris.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000176  00800100  0000130c  000013a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000130c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005c7  00800276  00800276  00001516  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001516  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001548  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000148  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000261a  00000000  00000000  000016d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d09  00000000  00000000  00003cea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000140f  00000000  00000000  000049f3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000033c  00000000  00000000  00005e04  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000811  00000000  00000000  00006140  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001a75  00000000  00000000  00006951  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  000083c6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 a4 01 	jmp	0x348	; 0x348 <__ctors_end>
       4:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
       8:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
       c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      10:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      14:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      18:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      1c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      20:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      24:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      28:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      2c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      30:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      34:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      38:	0c 94 4d 02 	jmp	0x49a	; 0x49a <__vector_14>
      3c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      40:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      44:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      48:	0c 94 1f 02 	jmp	0x43e	; 0x43e <__vector_18>
      4c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      50:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      54:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      58:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      5c:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      60:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>
      64:	0c 94 c1 01 	jmp	0x382	; 0x382 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	00 00       	nop
      6a:	01 00       	.word	0x0001	; ????
      6c:	02 00       	.word	0x0002	; ????
      6e:	03 00       	.word	0x0003	; ????
      70:	04 00       	.word	0x0004	; ????
      72:	05 00       	.word	0x0005	; ????
      74:	06 00       	.word	0x0006	; ????
      76:	07 00       	.word	0x0007	; ????
      78:	08 00       	.word	0x0008	; ????
      7a:	09 00       	.word	0x0009	; ????
      7c:	0a 00       	.word	0x000a	; ????
      7e:	0b 00       	.word	0x000b	; ????
      80:	17 00       	.word	0x0017	; ????
      82:	16 00       	.word	0x0016	; ????
      84:	15 00       	.word	0x0015	; ????
      86:	14 00       	.word	0x0014	; ????
      88:	13 00       	.word	0x0013	; ????
      8a:	12 00       	.word	0x0012	; ????
      8c:	11 00       	.word	0x0011	; ????
      8e:	10 00       	.word	0x0010	; ????
      90:	0f 00       	.word	0x000f	; ????
      92:	0e 00       	.word	0x000e	; ????
      94:	0d 00       	.word	0x000d	; ????
      96:	0c 00       	.word	0x000c	; ????
      98:	18 00       	.word	0x0018	; ????
      9a:	19 00       	.word	0x0019	; ????
      9c:	1a 00       	.word	0x001a	; ????
      9e:	1b 00       	.word	0x001b	; ????
      a0:	1c 00       	.word	0x001c	; ????
      a2:	1d 00       	.word	0x001d	; ????
      a4:	1e 00       	.word	0x001e	; ????
      a6:	1f 00       	.word	0x001f	; ????
      a8:	20 00       	.word	0x0020	; ????
      aa:	21 00       	.word	0x0021	; ????
      ac:	22 00       	.word	0x0022	; ????
      ae:	23 00       	.word	0x0023	; ????
      b0:	2f 00       	.word	0x002f	; ????
      b2:	2e 00       	.word	0x002e	; ????
      b4:	2d 00       	.word	0x002d	; ????
      b6:	2c 00       	.word	0x002c	; ????
      b8:	2b 00       	.word	0x002b	; ????
      ba:	2a 00       	.word	0x002a	; ????
      bc:	29 00       	.word	0x0029	; ????
      be:	28 00       	.word	0x0028	; ????
      c0:	27 00       	.word	0x0027	; ????
      c2:	26 00       	.word	0x0026	; ????
      c4:	25 00       	.word	0x0025	; ????
      c6:	24 00       	.word	0x0024	; ????
      c8:	30 00       	.word	0x0030	; ????
      ca:	31 00       	.word	0x0031	; ????
      cc:	32 00       	.word	0x0032	; ????
      ce:	33 00       	.word	0x0033	; ????
      d0:	34 00       	.word	0x0034	; ????
      d2:	35 00       	.word	0x0035	; ????
      d4:	36 00       	.word	0x0036	; ????
      d6:	37 00       	.word	0x0037	; ????
      d8:	38 00       	.word	0x0038	; ????
      da:	39 00       	.word	0x0039	; ????
      dc:	3a 00       	.word	0x003a	; ????
      de:	3b 00       	.word	0x003b	; ????
      e0:	47 00       	.word	0x0047	; ????
      e2:	46 00       	.word	0x0046	; ????
      e4:	45 00       	.word	0x0045	; ????
      e6:	44 00       	.word	0x0044	; ????
      e8:	43 00       	.word	0x0043	; ????
      ea:	42 00       	.word	0x0042	; ????
      ec:	41 00       	.word	0x0041	; ????
      ee:	40 00       	.word	0x0040	; ????
      f0:	3f 00       	.word	0x003f	; ????
      f2:	3e 00       	.word	0x003e	; ????
      f4:	3d 00       	.word	0x003d	; ????
      f6:	3c 00       	.word	0x003c	; ????
      f8:	48 00       	.word	0x0048	; ????
      fa:	49 00       	.word	0x0049	; ????
      fc:	4a 00       	.word	0x004a	; ????
      fe:	4b 00       	.word	0x004b	; ????
     100:	4c 00       	.word	0x004c	; ????
     102:	4d 00       	.word	0x004d	; ????
     104:	4e 00       	.word	0x004e	; ????
     106:	4f 00       	.word	0x004f	; ????
     108:	50 00       	.word	0x0050	; ????
     10a:	51 00       	.word	0x0051	; ????
     10c:	52 00       	.word	0x0052	; ????
     10e:	53 00       	.word	0x0053	; ????
     110:	5f 00       	.word	0x005f	; ????
     112:	5e 00       	.word	0x005e	; ????
     114:	5d 00       	.word	0x005d	; ????
     116:	5c 00       	.word	0x005c	; ????
     118:	5b 00       	.word	0x005b	; ????
     11a:	5a 00       	.word	0x005a	; ????
     11c:	59 00       	.word	0x0059	; ????
     11e:	58 00       	.word	0x0058	; ????
     120:	57 00       	.word	0x0057	; ????
     122:	56 00       	.word	0x0056	; ????
     124:	55 00       	.word	0x0055	; ????
     126:	54 00       	.word	0x0054	; ????
     128:	60 00       	.word	0x0060	; ????
     12a:	61 00       	.word	0x0061	; ????
     12c:	62 00       	.word	0x0062	; ????
     12e:	63 00       	.word	0x0063	; ????
     130:	64 00       	.word	0x0064	; ????
     132:	65 00       	.word	0x0065	; ????
     134:	66 00       	.word	0x0066	; ????
     136:	67 00       	.word	0x0067	; ????
     138:	68 00       	.word	0x0068	; ????
     13a:	69 00       	.word	0x0069	; ????
     13c:	6a 00       	.word	0x006a	; ????
     13e:	6b 00       	.word	0x006b	; ????
     140:	77 00       	.word	0x0077	; ????
     142:	76 00       	.word	0x0076	; ????
     144:	75 00       	.word	0x0075	; ????
     146:	74 00       	.word	0x0074	; ????
     148:	73 00       	.word	0x0073	; ????
     14a:	72 00       	.word	0x0072	; ????
     14c:	71 00       	.word	0x0071	; ????
     14e:	70 00       	.word	0x0070	; ????
     150:	6f 00       	.word	0x006f	; ????
     152:	6e 00       	.word	0x006e	; ????
     154:	6d 00       	.word	0x006d	; ????
     156:	6c 00       	.word	0x006c	; ????
     158:	78 00       	.word	0x0078	; ????
     15a:	79 00       	.word	0x0079	; ????
     15c:	7a 00       	.word	0x007a	; ????
     15e:	7b 00       	.word	0x007b	; ????
     160:	7c 00       	.word	0x007c	; ????
     162:	7d 00       	.word	0x007d	; ????
     164:	7e 00       	.word	0x007e	; ????
     166:	7f 00       	.word	0x007f	; ????
     168:	80 00       	.word	0x0080	; ????
     16a:	81 00       	.word	0x0081	; ????
     16c:	82 00       	.word	0x0082	; ????
     16e:	83 00       	.word	0x0083	; ????
     170:	8f 00       	.word	0x008f	; ????
     172:	8e 00       	.word	0x008e	; ????
     174:	8d 00       	.word	0x008d	; ????
     176:	8c 00       	.word	0x008c	; ????
     178:	8b 00       	.word	0x008b	; ????
     17a:	8a 00       	.word	0x008a	; ????
     17c:	89 00       	.word	0x0089	; ????
     17e:	88 00       	.word	0x0088	; ????
     180:	87 00       	.word	0x0087	; ????
     182:	86 00       	.word	0x0086	; ????
     184:	85 00       	.word	0x0085	; ????
     186:	84 00       	.word	0x0084	; ????
     188:	90 00       	.word	0x0090	; ????
     18a:	91 00       	.word	0x0091	; ????
     18c:	92 00       	.word	0x0092	; ????
     18e:	93 00       	.word	0x0093	; ????
     190:	94 00       	.word	0x0094	; ????
     192:	95 00       	.word	0x0095	; ????
     194:	96 00       	.word	0x0096	; ????
     196:	97 00       	.word	0x0097	; ????
     198:	98 00       	.word	0x0098	; ????
     19a:	99 00       	.word	0x0099	; ????
     19c:	9a 00       	.word	0x009a	; ????
     19e:	9b 00       	.word	0x009b	; ????
     1a0:	a7 00       	.word	0x00a7	; ????
     1a2:	a6 00       	.word	0x00a6	; ????
     1a4:	a5 00       	.word	0x00a5	; ????
     1a6:	a4 00       	.word	0x00a4	; ????
     1a8:	a3 00       	.word	0x00a3	; ????
     1aa:	a2 00       	.word	0x00a2	; ????
     1ac:	a1 00       	.word	0x00a1	; ????
     1ae:	a0 00       	.word	0x00a0	; ????
     1b0:	9f 00       	.word	0x009f	; ????
     1b2:	9e 00       	.word	0x009e	; ????
     1b4:	9d 00       	.word	0x009d	; ????
     1b6:	9c 00       	.word	0x009c	; ????
     1b8:	a8 00       	.word	0x00a8	; ????
     1ba:	a9 00       	.word	0x00a9	; ????
     1bc:	aa 00       	.word	0x00aa	; ????
     1be:	ab 00       	.word	0x00ab	; ????
     1c0:	ac 00       	.word	0x00ac	; ????
     1c2:	ad 00       	.word	0x00ad	; ????
     1c4:	ae 00       	.word	0x00ae	; ????
     1c6:	af 00       	.word	0x00af	; ????
     1c8:	b0 00       	.word	0x00b0	; ????
     1ca:	b1 00       	.word	0x00b1	; ????
     1cc:	b2 00       	.word	0x00b2	; ????
     1ce:	b3 00       	.word	0x00b3	; ????
     1d0:	bf 00       	.word	0x00bf	; ????
     1d2:	be 00       	.word	0x00be	; ????
     1d4:	bd 00       	.word	0x00bd	; ????
     1d6:	bc 00       	.word	0x00bc	; ????
     1d8:	bb 00       	.word	0x00bb	; ????
     1da:	ba 00       	.word	0x00ba	; ????
     1dc:	b9 00       	.word	0x00b9	; ????
     1de:	b8 00       	.word	0x00b8	; ????
     1e0:	b7 00       	.word	0x00b7	; ????
     1e2:	b6 00       	.word	0x00b6	; ????
     1e4:	b5 00       	.word	0x00b5	; ????
     1e6:	b4 00       	.word	0x00b4	; ????
     1e8:	c0 00       	.word	0x00c0	; ????
     1ea:	c1 00       	.word	0x00c1	; ????
     1ec:	c2 00       	.word	0x00c2	; ????
     1ee:	c3 00       	.word	0x00c3	; ????
     1f0:	c4 00       	.word	0x00c4	; ????
     1f2:	c5 00       	.word	0x00c5	; ????
     1f4:	c6 00       	.word	0x00c6	; ????
     1f6:	c7 00       	.word	0x00c7	; ????
     1f8:	c8 00       	.word	0x00c8	; ????
     1fa:	c9 00       	.word	0x00c9	; ????
     1fc:	ca 00       	.word	0x00ca	; ????
     1fe:	cb 00       	.word	0x00cb	; ????
     200:	d7 00       	.word	0x00d7	; ????
     202:	d6 00       	.word	0x00d6	; ????
     204:	d5 00       	.word	0x00d5	; ????
     206:	d4 00       	.word	0x00d4	; ????
     208:	d3 00       	.word	0x00d3	; ????
     20a:	d2 00       	.word	0x00d2	; ????
     20c:	d1 00       	.word	0x00d1	; ????
     20e:	d0 00       	.word	0x00d0	; ????
     210:	cf 00       	.word	0x00cf	; ????
     212:	ce 00       	.word	0x00ce	; ????
     214:	cd 00       	.word	0x00cd	; ????
     216:	cc 00       	.word	0x00cc	; ????
     218:	d8 00       	.word	0x00d8	; ????
     21a:	d9 00       	.word	0x00d9	; ????
     21c:	da 00       	.word	0x00da	; ????
     21e:	db 00       	.word	0x00db	; ????
     220:	dc 00       	.word	0x00dc	; ????
     222:	dd 00       	.word	0x00dd	; ????
     224:	de 00       	.word	0x00de	; ????
     226:	df 00       	.word	0x00df	; ????
     228:	e0 00       	.word	0x00e0	; ????
     22a:	e1 00       	.word	0x00e1	; ????
     22c:	e2 00       	.word	0x00e2	; ????
     22e:	e3 00       	.word	0x00e3	; ????
     230:	ef 00       	.word	0x00ef	; ????
     232:	ee 00       	.word	0x00ee	; ????
     234:	ed 00       	.word	0x00ed	; ????
     236:	ec 00       	.word	0x00ec	; ????
     238:	eb 00       	.word	0x00eb	; ????
     23a:	ea 00       	.word	0x00ea	; ????
     23c:	e9 00       	.word	0x00e9	; ????
     23e:	e8 00       	.word	0x00e8	; ????
     240:	e7 00       	.word	0x00e7	; ????
     242:	e6 00       	.word	0x00e6	; ????
     244:	e5 00       	.word	0x00e5	; ????
     246:	e4 00       	.word	0x00e4	; ????
     248:	f0 00       	.word	0x00f0	; ????
     24a:	f1 00       	.word	0x00f1	; ????
     24c:	f2 00       	.word	0x00f2	; ????
     24e:	f3 00       	.word	0x00f3	; ????
     250:	f4 00       	.word	0x00f4	; ????
     252:	f5 00       	.word	0x00f5	; ????
     254:	f6 00       	.word	0x00f6	; ????
     256:	f7 00       	.word	0x00f7	; ????
     258:	f8 00       	.word	0x00f8	; ????
     25a:	f9 00       	.word	0x00f9	; ????
     25c:	fa 00       	.word	0x00fa	; ????
     25e:	fb 00       	.word	0x00fb	; ????
     260:	07 01       	movw	r0, r14
     262:	06 01       	movw	r0, r12
     264:	05 01       	movw	r0, r10
     266:	04 01       	movw	r0, r8
     268:	03 01       	movw	r0, r6
     26a:	02 01       	movw	r0, r4
     26c:	01 01       	movw	r0, r2
     26e:	00 01       	movw	r0, r0
     270:	ff 00       	.word	0x00ff	; ????
     272:	fe 00       	.word	0x00fe	; ????
     274:	fd 00       	.word	0x00fd	; ????
     276:	fc 00       	.word	0x00fc	; ????
     278:	08 01       	movw	r0, r16
     27a:	09 01       	movw	r0, r18
     27c:	0a 01       	movw	r0, r20
     27e:	0b 01       	movw	r0, r22
     280:	0c 01       	movw	r0, r24
     282:	0d 01       	movw	r0, r26
     284:	0e 01       	movw	r0, r28
     286:	0f 01       	movw	r0, r30
     288:	10 01       	movw	r2, r0
     28a:	11 01       	movw	r2, r2
     28c:	12 01       	movw	r2, r4
     28e:	13 01       	movw	r2, r6
     290:	1f 01       	movw	r2, r30
     292:	1e 01       	movw	r2, r28
     294:	1d 01       	movw	r2, r26
     296:	1c 01       	movw	r2, r24
     298:	1b 01       	movw	r2, r22
     29a:	1a 01       	movw	r2, r20
     29c:	19 01       	movw	r2, r18
     29e:	18 01       	movw	r2, r16
     2a0:	17 01       	movw	r2, r14
     2a2:	16 01       	movw	r2, r12
     2a4:	15 01       	movw	r2, r10
     2a6:	14 01       	movw	r2, r8
     2a8:	20 01       	movw	r4, r0
     2aa:	21 01       	movw	r4, r2
     2ac:	22 01       	movw	r4, r4
     2ae:	23 01       	movw	r4, r6
     2b0:	24 01       	movw	r4, r8
     2b2:	25 01       	movw	r4, r10
     2b4:	26 01       	movw	r4, r12
     2b6:	27 01       	movw	r4, r14
     2b8:	28 01       	movw	r4, r16
     2ba:	29 01       	movw	r4, r18
     2bc:	2a 01       	movw	r4, r20
     2be:	2b 01       	movw	r4, r22

000002c0 <randomcolor>:
     2c0:	04 00 00 00 07 00 03 00 06 00 02 00 05 00 09 00     ................
     2d0:	08 00 01 00 08 00 09 00 02 00 04 00 00 00 01 00     ................
     2e0:	06 00 07 00 05 00 03 00 08 00 01 00 03 00 02 00     ................
     2f0:	05 00 07 00 04 00 00 00 09 00 06 00 00 00 05 00     ................
     300:	09 00 08 00 02 00 01 00 07 00 06 00 03 00 04 00     ................

00000310 <randombrick>:
     310:	04 00 00 00 03 00 05 00 01 00 06 00 03 00 01 00     ................
     320:	04 00 03 00 02 00 00 00 06 00 05 00 00 00 05 00     ................
     330:	02 00 06 00 01 00 03 00 04 00 00 00 06 00 01 00     ................
     340:	03 00 05 00 02 00 04 00                             ........

00000348 <__ctors_end>:
     348:	11 24       	eor	r1, r1
     34a:	1f be       	out	0x3f, r1	; 63
     34c:	cf ef       	ldi	r28, 0xFF	; 255
     34e:	d8 e0       	ldi	r29, 0x08	; 8
     350:	de bf       	out	0x3e, r29	; 62
     352:	cd bf       	out	0x3d, r28	; 61

00000354 <__do_copy_data>:
     354:	12 e0       	ldi	r17, 0x02	; 2
     356:	a0 e0       	ldi	r26, 0x00	; 0
     358:	b1 e0       	ldi	r27, 0x01	; 1
     35a:	ec e0       	ldi	r30, 0x0C	; 12
     35c:	f3 e1       	ldi	r31, 0x13	; 19
     35e:	02 c0       	rjmp	.+4      	; 0x364 <__do_copy_data+0x10>
     360:	05 90       	lpm	r0, Z+
     362:	0d 92       	st	X+, r0
     364:	a6 37       	cpi	r26, 0x76	; 118
     366:	b1 07       	cpc	r27, r17
     368:	d9 f7       	brne	.-10     	; 0x360 <__do_copy_data+0xc>

0000036a <__do_clear_bss>:
     36a:	28 e0       	ldi	r18, 0x08	; 8
     36c:	a6 e7       	ldi	r26, 0x76	; 118
     36e:	b2 e0       	ldi	r27, 0x02	; 2
     370:	01 c0       	rjmp	.+2      	; 0x374 <.do_clear_bss_start>

00000372 <.do_clear_bss_loop>:
     372:	1d 92       	st	X+, r1

00000374 <.do_clear_bss_start>:
     374:	ad 33       	cpi	r26, 0x3D	; 61
     376:	b2 07       	cpc	r27, r18
     378:	e1 f7       	brne	.-8      	; 0x372 <.do_clear_bss_loop>
     37a:	0e 94 bc 02 	call	0x578	; 0x578 <main>
     37e:	0c 94 84 09 	jmp	0x1308	; 0x1308 <_exit>

00000382 <__bad_interrupt>:
     382:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000386 <ws2812_setleds>:
     386:	fc 01       	movw	r30, r24
     388:	9b 01       	movw	r18, r22
     38a:	22 0f       	add	r18, r18
     38c:	33 1f       	adc	r19, r19
     38e:	62 0f       	add	r22, r18
     390:	73 1f       	adc	r23, r19
     392:	8a b1       	in	r24, 0x0a	; 10
     394:	80 62       	ori	r24, 0x20	; 32
     396:	8a b9       	out	0x0a, r24	; 10
     398:	ab b1       	in	r26, 0x0b	; 11
     39a:	af 7d       	andi	r26, 0xDF	; 223
     39c:	5b b1       	in	r21, 0x0b	; 11
     39e:	50 62       	ori	r21, 0x20	; 32
     3a0:	bf b7       	in	r27, 0x3f	; 63
     3a2:	f8 94       	cli
     3a4:	10 c0       	rjmp	.+32     	; 0x3c6 <loop51+0x16>
     3a6:	9f 01       	movw	r18, r30
     3a8:	2f 5f       	subi	r18, 0xFF	; 255
     3aa:	3f 4f       	sbci	r19, 0xFF	; 255
     3ac:	40 81       	ld	r20, Z
     3ae:	68 e0       	ldi	r22, 0x08	; 8

000003b0 <loop51>:
     3b0:	5b b9       	out	0x0b, r21	; 11
     3b2:	47 ff       	sbrs	r20, 7
     3b4:	ab b9       	out	0x0b, r26	; 11
     3b6:	44 0f       	add	r20, r20
     3b8:	00 00       	nop
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <loop51+0xc>
     3bc:	ab b9       	out	0x0b, r26	; 11
     3be:	6a 95       	dec	r22
     3c0:	b9 f7       	brne	.-18     	; 0x3b0 <loop51>
     3c2:	bc 01       	movw	r22, r24
     3c4:	f9 01       	movw	r30, r18
     3c6:	cb 01       	movw	r24, r22
     3c8:	01 97       	sbiw	r24, 0x01	; 1
     3ca:	67 2b       	or	r22, r23
     3cc:	61 f7       	brne	.-40     	; 0x3a6 <ws2812_setleds+0x20>
     3ce:	bf bf       	out	0x3f, r27	; 63
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d0:	85 e8       	ldi	r24, 0x85	; 133
     3d2:	8a 95       	dec	r24
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <loop51+0x22>
     3d6:	00 00       	nop
     3d8:	08 95       	ret

000003da <init>:
	{
		while((UCSR0A & (1<<UDRE0)) == 0);
		UDR0 = buffer[i];
		i++;
	}
}
     3da:	84 b1       	in	r24, 0x04	; 4
     3dc:	80 62       	ori	r24, 0x20	; 32
     3de:	84 b9       	out	0x04, r24	; 4
     3e0:	0e 94 88 07 	call	0xf10	; 0xf10 <clearTable>
     3e4:	0e 94 b1 07 	call	0xf62	; 0xf62 <menu>
     3e8:	2f e7       	ldi	r18, 0x7F	; 127
     3ea:	88 e3       	ldi	r24, 0x38	; 56
     3ec:	91 e0       	ldi	r25, 0x01	; 1
     3ee:	21 50       	subi	r18, 0x01	; 1
     3f0:	80 40       	sbci	r24, 0x00	; 0
     3f2:	90 40       	sbci	r25, 0x00	; 0
     3f4:	e1 f7       	brne	.-8      	; 0x3ee <init+0x14>
     3f6:	00 c0       	rjmp	.+0      	; 0x3f8 <init+0x1e>
     3f8:	00 00       	nop
     3fa:	84 b1       	in	r24, 0x04	; 4
     3fc:	82 60       	ori	r24, 0x02	; 2
     3fe:	84 b9       	out	0x04, r24	; 4
     400:	82 e0       	ldi	r24, 0x02	; 2
     402:	85 b9       	out	0x05, r24	; 5
     404:	97 e2       	ldi	r25, 0x27	; 39
     406:	97 bd       	out	0x27, r25	; 39
     408:	84 bd       	out	0x24, r24	; 36
     40a:	95 ec       	ldi	r25, 0xC5	; 197
     40c:	95 bd       	out	0x25, r25	; 37
     40e:	ee e6       	ldi	r30, 0x6E	; 110
     410:	f0 e0       	ldi	r31, 0x00	; 0
     412:	90 81       	ld	r25, Z
     414:	92 60       	ori	r25, 0x02	; 2
     416:	90 83       	st	Z, r25
     418:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
     41c:	97 e6       	ldi	r25, 0x67	; 103
     41e:	90 93 c4 00 	sts	0x00C4, r25	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
     422:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     426:	e1 ec       	ldi	r30, 0xC1	; 193
     428:	f0 e0       	ldi	r31, 0x00	; 0
     42a:	80 81       	ld	r24, Z
     42c:	88 69       	ori	r24, 0x98	; 152
     42e:	80 83       	st	Z, r24
     430:	e2 ec       	ldi	r30, 0xC2	; 194
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	86 60       	ori	r24, 0x06	; 6
     438:	80 83       	st	Z, r24
     43a:	78 94       	sei
     43c:	08 95       	ret

0000043e <__vector_18>:
     43e:	1f 92       	push	r1
     440:	0f 92       	push	r0
     442:	0f b6       	in	r0, 0x3f	; 63
     444:	0f 92       	push	r0
     446:	11 24       	eor	r1, r1
     448:	8f 93       	push	r24
     44a:	af 93       	push	r26
     44c:	bf 93       	push	r27
     44e:	ef 93       	push	r30
     450:	ff 93       	push	r31
     452:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7f80c0>
     456:	e6 e7       	ldi	r30, 0x76	; 118
     458:	f2 e0       	ldi	r31, 0x02	; 2
     45a:	81 83       	std	Z+1, r24	; 0x01
     45c:	81 81       	ldd	r24, Z+1	; 0x01
     45e:	88 71       	andi	r24, 0x18	; 24
     460:	29 f0       	breq	.+10     	; 0x46c <__vector_18+0x2e>
     462:	e8 e7       	ldi	r30, 0x78	; 120
     464:	f2 e0       	ldi	r31, 0x02	; 2
     466:	80 81       	ld	r24, Z
     468:	82 60       	ori	r24, 0x02	; 2
     46a:	80 83       	st	Z, r24
     46c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
     470:	e6 e7       	ldi	r30, 0x76	; 118
     472:	f2 e0       	ldi	r31, 0x02	; 2
     474:	80 83       	st	Z, r24
     476:	a8 e7       	ldi	r26, 0x78	; 120
     478:	b2 e0       	ldi	r27, 0x02	; 2
     47a:	8c 91       	ld	r24, X
     47c:	81 60       	ori	r24, 0x01	; 1
     47e:	8c 93       	st	X, r24
     480:	80 81       	ld	r24, Z
     482:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <button>
     486:	ff 91       	pop	r31
     488:	ef 91       	pop	r30
     48a:	bf 91       	pop	r27
     48c:	af 91       	pop	r26
     48e:	8f 91       	pop	r24
     490:	0f 90       	pop	r0
     492:	0f be       	out	0x3f, r0	; 63
     494:	0f 90       	pop	r0
     496:	1f 90       	pop	r1
     498:	18 95       	reti

0000049a <__vector_14>:

ISR(TIMER0_COMPA_vect) {	// Timer 0
     49a:	1f 92       	push	r1
     49c:	0f 92       	push	r0
     49e:	0f b6       	in	r0, 0x3f	; 63
     4a0:	0f 92       	push	r0
     4a2:	11 24       	eor	r1, r1
     4a4:	2f 93       	push	r18
     4a6:	3f 93       	push	r19
     4a8:	4f 93       	push	r20
     4aa:	5f 93       	push	r21
     4ac:	6f 93       	push	r22
     4ae:	7f 93       	push	r23
     4b0:	8f 93       	push	r24
     4b2:	9f 93       	push	r25
     4b4:	af 93       	push	r26
     4b6:	bf 93       	push	r27
     4b8:	ef 93       	push	r30
     4ba:	ff 93       	push	r31
	count_1000++;
     4bc:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <count_1000>
     4c0:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <count_1000+0x1>
     4c4:	01 96       	adiw	r24, 0x01	; 1
     4c6:	90 93 7a 02 	sts	0x027A, r25	; 0x80027a <count_1000+0x1>
     4ca:	80 93 79 02 	sts	0x0279, r24	; 0x800279 <count_1000>
	countspeed++;
     4ce:	80 91 93 02 	lds	r24, 0x0293	; 0x800293 <countspeed>
     4d2:	90 91 94 02 	lds	r25, 0x0294	; 0x800294 <countspeed+0x1>
     4d6:	01 96       	adiw	r24, 0x01	; 1
     4d8:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <countspeed+0x1>
     4dc:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <countspeed>
	
	if (count_1000 == 100)	// When Timer 0 counts to 100, time = 0.005 * 100 = 0.5s = 500ms
     4e0:	80 91 79 02 	lds	r24, 0x0279	; 0x800279 <count_1000>
     4e4:	90 91 7a 02 	lds	r25, 0x027A	; 0x80027a <count_1000+0x1>
     4e8:	84 36       	cpi	r24, 0x64	; 100
     4ea:	91 05       	cpc	r25, r1
     4ec:	c1 f4       	brne	.+48     	; 0x51e <__vector_14+0x84>
	{
		count_1000 = 0;		// Resets Timer
     4ee:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <count_1000+0x1>
     4f2:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <count_1000>

		if (flag_LED == 1)	// If LED ON
     4f6:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     4fa:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     4fe:	01 97       	sbiw	r24, 0x01	; 1
     500:	31 f4       	brne	.+12     	; 0x50e <__vector_14+0x74>
		{
			PORTB = 0b00000000;
     502:	15 b8       	out	0x05, r1	; 5
			flag_LED = 0;	// Turns LED OFF
     504:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     508:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <__DATA_REGION_ORIGIN__>
     50c:	08 c0       	rjmp	.+16     	; 0x51e <__vector_14+0x84>
		}
		else				// If LED OFF
		{
			PORTB = 0b00000010;
     50e:	82 e0       	ldi	r24, 0x02	; 2
     510:	85 b9       	out	0x05, r24	; 5
			flag_LED = 1;	// Turns LED ON
     512:	81 e0       	ldi	r24, 0x01	; 1
     514:	90 e0       	ldi	r25, 0x00	; 0
     516:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     51a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
		}
	}
	
	if (countspeed >= falltime && startgame == 1 && pause == 0) // 200 * 0.005 * 200 = 1s
     51e:	20 91 93 02 	lds	r18, 0x0293	; 0x800293 <countspeed>
     522:	30 91 94 02 	lds	r19, 0x0294	; 0x800294 <countspeed+0x1>
     526:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <falltime>
     52a:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <falltime+0x1>
     52e:	28 17       	cp	r18, r24
     530:	39 07       	cpc	r19, r25
     532:	8c f0       	brlt	.+34     	; 0x556 <__vector_14+0xbc>
     534:	80 91 7c 02 	lds	r24, 0x027C	; 0x80027c <startgame>
     538:	90 91 7d 02 	lds	r25, 0x027D	; 0x80027d <startgame+0x1>
     53c:	01 97       	sbiw	r24, 0x01	; 1
     53e:	59 f4       	brne	.+22     	; 0x556 <__vector_14+0xbc>
     540:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <pause>
     544:	81 11       	cpse	r24, r1
     546:	07 c0       	rjmp	.+14     	; 0x556 <__vector_14+0xbc>
	{
		shiftActiveBrick('d');
     548:	84 e6       	ldi	r24, 0x64	; 100
     54a:	0e 94 4c 06 	call	0xc98	; 0xc98 <shiftActiveBrick>
		countspeed = 0;						// Reset Timer
     54e:	10 92 94 02 	sts	0x0294, r1	; 0x800294 <countspeed+0x1>
     552:	10 92 93 02 	sts	0x0293, r1	; 0x800293 <countspeed>
	}

}
     556:	ff 91       	pop	r31
     558:	ef 91       	pop	r30
     55a:	bf 91       	pop	r27
     55c:	af 91       	pop	r26
     55e:	9f 91       	pop	r25
     560:	8f 91       	pop	r24
     562:	7f 91       	pop	r23
     564:	6f 91       	pop	r22
     566:	5f 91       	pop	r21
     568:	4f 91       	pop	r20
     56a:	3f 91       	pop	r19
     56c:	2f 91       	pop	r18
     56e:	0f 90       	pop	r0
     570:	0f be       	out	0x3f, r0	; 63
     572:	0f 90       	pop	r0
     574:	1f 90       	pop	r1
     576:	18 95       	reti

00000578 <main>:

int main(void)
{
	while(1)
	{
		init();
     578:	0e 94 ed 01 	call	0x3da	; 0x3da <init>
	
		// BLUETOOTH
		//Awaits for a button to be pressed
		while (button != 'a' && button != 's' && button != 'd' && button != 'j'  && button != 'k'  && button != 'l' );
     57c:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <button>
     580:	81 36       	cpi	r24, 0x61	; 97
     582:	a1 f0       	breq	.+40     	; 0x5ac <main+0x34>
     584:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <button>
     588:	83 37       	cpi	r24, 0x73	; 115
     58a:	81 f0       	breq	.+32     	; 0x5ac <main+0x34>
     58c:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <button>
     590:	84 36       	cpi	r24, 0x64	; 100
     592:	61 f0       	breq	.+24     	; 0x5ac <main+0x34>
     594:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <button>
     598:	8a 36       	cpi	r24, 0x6A	; 106
     59a:	41 f0       	breq	.+16     	; 0x5ac <main+0x34>
     59c:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <button>
     5a0:	8b 36       	cpi	r24, 0x6B	; 107
     5a2:	21 f0       	breq	.+8      	; 0x5ac <main+0x34>
     5a4:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <button>
     5a8:	8c 36       	cpi	r24, 0x6C	; 108
     5aa:	41 f7       	brne	.-48     	; 0x57c <main+0x4>
		//while (button != ('a' || 's' || 'd' || 'j' || 'k' || 'l'));
		startgame = 1;
     5ac:	81 e0       	ldi	r24, 0x01	; 1
     5ae:	90 e0       	ldi	r25, 0x00	; 0
     5b0:	90 93 7d 02 	sts	0x027D, r25	; 0x80027d <startgame+0x1>
     5b4:	80 93 7c 02 	sts	0x027C, r24	; 0x80027c <startgame>
		clearTable();
     5b8:	0e 94 88 07 	call	0xf10	; 0xf10 <clearTable>
		button = ' ';
     5bc:	80 e2       	ldi	r24, 0x20	; 32
     5be:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <button>
		newActiveBrick();
     5c2:	0e 94 ce 04 	call	0x99c	; 0x99c <newActiveBrick>
		while(1)
		{
			// BLUETOOTH
			//shiftActiveBrick('d');
			//fallActiveBrick();
			switch (button)
     5c6:	80 91 92 02 	lds	r24, 0x0292	; 0x800292 <button>
     5ca:	8a 36       	cpi	r24, 0x6A	; 106
     5cc:	c9 f0       	breq	.+50     	; 0x600 <main+0x88>
     5ce:	28 f4       	brcc	.+10     	; 0x5da <main+0x62>
     5d0:	81 36       	cpi	r24, 0x61	; 97
     5d2:	51 f0       	breq	.+20     	; 0x5e8 <main+0x70>
     5d4:	84 36       	cpi	r24, 0x64	; 100
     5d6:	61 f0       	breq	.+24     	; 0x5f0 <main+0x78>
     5d8:	22 c0       	rjmp	.+68     	; 0x61e <main+0xa6>
     5da:	80 37       	cpi	r24, 0x70	; 112
     5dc:	b9 f0       	breq	.+46     	; 0x60c <main+0x94>
     5de:	83 37       	cpi	r24, 0x73	; 115
     5e0:	59 f0       	breq	.+22     	; 0x5f8 <main+0x80>
     5e2:	8b 36       	cpi	r24, 0x6B	; 107
     5e4:	e1 f4       	brne	.+56     	; 0x61e <main+0xa6>
     5e6:	0f c0       	rjmp	.+30     	; 0x606 <main+0x8e>
			{
				// Left
				case 'a':
				shiftActiveBrick('l');
     5e8:	8c e6       	ldi	r24, 0x6C	; 108
     5ea:	0e 94 4c 06 	call	0xc98	; 0xc98 <shiftActiveBrick>
				break;
     5ee:	17 c0       	rjmp	.+46     	; 0x61e <main+0xa6>

				// Right
				case 'd':
				shiftActiveBrick('r');
     5f0:	82 e7       	ldi	r24, 0x72	; 114
     5f2:	0e 94 4c 06 	call	0xc98	; 0xc98 <shiftActiveBrick>
				break;
     5f6:	13 c0       	rjmp	.+38     	; 0x61e <main+0xa6>
			
				// Down
				case 's':
				shiftActiveBrick('d');
     5f8:	84 e6       	ldi	r24, 0x64	; 100
     5fa:	0e 94 4c 06 	call	0xc98	; 0xc98 <shiftActiveBrick>
				break;
     5fe:	0f c0       	rjmp	.+30     	; 0x61e <main+0xa6>
			
				// Rotate
				case 'j':
				rotateActiveBrick();
     600:	0e 94 6e 05 	call	0xadc	; 0xadc <rotateActiveBrick>
				break;
     604:	0c c0       	rjmp	.+24     	; 0x61e <main+0xa6>
			
				case 'k':
				forcedown();
     606:	0e 94 51 09 	call	0x12a2	; 0x12a2 <forcedown>
				break;
     60a:	09 c0       	rjmp	.+18     	; 0x61e <main+0xa6>
			
				// Pause
				//case 'l':
				case 'p':
				pause += 1;
     60c:	80 91 7b 02 	lds	r24, 0x027B	; 0x80027b <pause>
     610:	8f 5f       	subi	r24, 0xFF	; 255
     612:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <pause>
				pause = Pause(pause);
     616:	0e 94 a4 07 	call	0xf48	; 0xf48 <Pause>
     61a:	80 93 7b 02 	sts	0x027B, r24	; 0x80027b <pause>
				break;
				
				//default:
				// default statements
			}
			checkFullLines();
     61e:	0e 94 f3 06 	call	0xde6	; 0xde6 <checkFullLines>
			button = ' ';
     622:	80 e2       	ldi	r24, 0x20	; 32
     624:	80 93 92 02 	sts	0x0292, r24	; 0x800292 <button>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     628:	2f e7       	ldi	r18, 0x7F	; 127
     62a:	88 e3       	ldi	r24, 0x38	; 56
     62c:	91 e0       	ldi	r25, 0x01	; 1
     62e:	21 50       	subi	r18, 0x01	; 1
     630:	80 40       	sbci	r24, 0x00	; 0
     632:	90 40       	sbci	r25, 0x00	; 0
     634:	e1 f7       	brne	.-8      	; 0x62e <main+0xb6>
     636:	00 c0       	rjmp	.+0      	; 0x638 <main+0xc0>
     638:	00 00       	nop
			_delay_ms(50);
			if (tetrisGameOver) 
     63a:	80 91 83 02 	lds	r24, 0x0283	; 0x800283 <tetrisGameOver>
     63e:	88 23       	and	r24, r24
     640:	11 f2       	breq	.-124    	; 0x5c6 <main+0x4e>
			{
				falltime = 200;
     642:	88 ec       	ldi	r24, 0xC8	; 200
     644:	90 e0       	ldi	r25, 0x00	; 0
     646:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <falltime+0x1>
     64a:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <falltime>
				clearTable();
     64e:	0e 94 88 07 	call	0xf10	; 0xf10 <clearTable>
				clearField();
     652:	0e 94 6d 07 	call	0xeda	; 0xeda <clearField>
				tetrisGameOver = 0;
     656:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <tetrisGameOver>
				startgame = 0;
     65a:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <startgame+0x1>
     65e:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <startgame>
				break;
			}
		}
	}
     662:	8a cf       	rjmp	.-236    	; 0x578 <main>

00000664 <addActiveBrickToField>:
	for (int x = 0; x < column; x++)
	{
		field.pix[y][x] = 1;
		field.color[y][x] = 1;
	}
	printField();
     664:	cf 93       	push	r28
     666:	df 93       	push	r29
     668:	b0 e0       	ldi	r27, 0x00	; 0
     66a:	4b c0       	rjmp	.+150    	; 0x702 <addActiveBrickToField+0x9e>
     66c:	ea e1       	ldi	r30, 0x1A	; 26
     66e:	f6 e0       	ldi	r31, 0x06	; 6
     670:	81 81       	ldd	r24, Z+1	; 0x01
     672:	8a 0f       	add	r24, r26
     674:	22 81       	ldd	r18, Z+2	; 0x02
     676:	2b 0f       	add	r18, r27
     678:	8c 30       	cpi	r24, 0x0C	; 12
     67a:	e0 f5       	brcc	.+120    	; 0x6f4 <addActiveBrickToField+0x90>
     67c:	24 31       	cpi	r18, 0x14	; 20
     67e:	d0 f5       	brcc	.+116    	; 0x6f4 <addActiveBrickToField+0x90>
     680:	4b 2f       	mov	r20, r27
     682:	50 e0       	ldi	r21, 0x00	; 0
     684:	6a 2f       	mov	r22, r26
     686:	70 e0       	ldi	r23, 0x00	; 0
     688:	fa 01       	movw	r30, r20
     68a:	ee 0f       	add	r30, r30
     68c:	ff 1f       	adc	r31, r31
     68e:	ee 0f       	add	r30, r30
     690:	ff 1f       	adc	r31, r31
     692:	e6 5e       	subi	r30, 0xE6	; 230
     694:	f9 4f       	sbci	r31, 0xF9	; 249
     696:	e6 0f       	add	r30, r22
     698:	f7 1f       	adc	r31, r23
     69a:	c5 81       	ldd	r28, Z+5	; 0x05
     69c:	cc 23       	and	r28, r28
     69e:	51 f1       	breq	.+84     	; 0x6f4 <addActiveBrickToField+0x90>
     6a0:	30 e0       	ldi	r19, 0x00	; 0
     6a2:	90 e0       	ldi	r25, 0x00	; 0
     6a4:	dd e0       	ldi	r29, 0x0D	; 13
     6a6:	d2 9f       	mul	r29, r18
     6a8:	f0 01       	movw	r30, r0
     6aa:	d3 9f       	mul	r29, r19
     6ac:	f0 0d       	add	r31, r0
     6ae:	11 24       	eor	r1, r1
     6b0:	e7 5b       	subi	r30, 0xB7	; 183
     6b2:	f9 4f       	sbci	r31, 0xF9	; 249
     6b4:	e8 0f       	add	r30, r24
     6b6:	f9 1f       	adc	r31, r25
     6b8:	c0 83       	st	Z, r28
     6ba:	c0 91 2f 06 	lds	r28, 0x062F	; 0x80062f <activeBrick+0x15>
     6be:	f9 01       	movw	r30, r18
     6c0:	ee 0f       	add	r30, r30
     6c2:	ff 1f       	adc	r31, r31
     6c4:	2e 0f       	add	r18, r30
     6c6:	3f 1f       	adc	r19, r31
     6c8:	22 0f       	add	r18, r18
     6ca:	33 1f       	adc	r19, r19
     6cc:	22 0f       	add	r18, r18
     6ce:	33 1f       	adc	r19, r19
     6d0:	27 5b       	subi	r18, 0xB7	; 183
     6d2:	39 4f       	sbci	r19, 0xF9	; 249
     6d4:	82 0f       	add	r24, r18
     6d6:	93 1f       	adc	r25, r19
     6d8:	fc 01       	movw	r30, r24
     6da:	ec 5f       	subi	r30, 0xFC	; 252
     6dc:	fe 4f       	sbci	r31, 0xFE	; 254
     6de:	c0 83       	st	Z, r28
     6e0:	44 0f       	add	r20, r20
     6e2:	55 1f       	adc	r21, r21
     6e4:	44 0f       	add	r20, r20
     6e6:	55 1f       	adc	r21, r21
     6e8:	46 5e       	subi	r20, 0xE6	; 230
     6ea:	59 4f       	sbci	r21, 0xF9	; 249
     6ec:	fa 01       	movw	r30, r20
     6ee:	e6 0f       	add	r30, r22
     6f0:	f7 1f       	adc	r31, r23
     6f2:	15 82       	std	Z+5, r1	; 0x05
     6f4:	af 5f       	subi	r26, 0xFF	; 255
     6f6:	01 c0       	rjmp	.+2      	; 0x6fa <addActiveBrickToField+0x96>
     6f8:	a0 e0       	ldi	r26, 0x00	; 0
     6fa:	a4 30       	cpi	r26, 0x04	; 4
     6fc:	08 f4       	brcc	.+2      	; 0x700 <addActiveBrickToField+0x9c>
     6fe:	b6 cf       	rjmp	.-148    	; 0x66c <addActiveBrickToField+0x8>
     700:	bf 5f       	subi	r27, 0xFF	; 255
     702:	b4 30       	cpi	r27, 0x04	; 4
     704:	c8 f3       	brcs	.-14     	; 0x6f8 <addActiveBrickToField+0x94>
     706:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <I_rot>
     70a:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <t_rot>
     70e:	85 e8       	ldi	r24, 0x85	; 133
     710:	8a 95       	dec	r24
     712:	f1 f7       	brne	.-4      	; 0x710 <addActiveBrickToField+0xac>
     714:	00 00       	nop
     716:	df 91       	pop	r29
     718:	cf 91       	pop	r28
     71a:	08 95       	ret

0000071c <checkSidesCollision>:
     71c:	dc 01       	movw	r26, r24
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	19 c0       	rjmp	.+50     	; 0x754 <checkSidesCollision+0x38>
     722:	e3 2f       	mov	r30, r19
     724:	f0 e0       	ldi	r31, 0x00	; 0
     726:	ee 0f       	add	r30, r30
     728:	ff 1f       	adc	r31, r31
     72a:	ee 0f       	add	r30, r30
     72c:	ff 1f       	adc	r31, r31
     72e:	ea 0f       	add	r30, r26
     730:	fb 1f       	adc	r31, r27
     732:	e9 0f       	add	r30, r25
     734:	f1 1d       	adc	r31, r1
     736:	25 81       	ldd	r18, Z+5	; 0x05
     738:	22 23       	and	r18, r18
     73a:	31 f0       	breq	.+12     	; 0x748 <checkSidesCollision+0x2c>
     73c:	11 96       	adiw	r26, 0x01	; 1
     73e:	2c 91       	ld	r18, X
     740:	11 97       	sbiw	r26, 0x01	; 1
     742:	29 0f       	add	r18, r25
     744:	2c 30       	cpi	r18, 0x0C	; 12
     746:	58 f4       	brcc	.+22     	; 0x75e <checkSidesCollision+0x42>
     748:	9f 5f       	subi	r25, 0xFF	; 255
     74a:	01 c0       	rjmp	.+2      	; 0x74e <checkSidesCollision+0x32>
     74c:	90 e0       	ldi	r25, 0x00	; 0
     74e:	94 30       	cpi	r25, 0x04	; 4
     750:	40 f3       	brcs	.-48     	; 0x722 <checkSidesCollision+0x6>
     752:	3f 5f       	subi	r19, 0xFF	; 255
     754:	34 30       	cpi	r19, 0x04	; 4
     756:	d0 f3       	brcs	.-12     	; 0x74c <checkSidesCollision+0x30>
     758:	80 e0       	ldi	r24, 0x00	; 0
     75a:	90 e0       	ldi	r25, 0x00	; 0
     75c:	08 95       	ret
     75e:	81 e0       	ldi	r24, 0x01	; 1
     760:	90 e0       	ldi	r25, 0x00	; 0
     762:	08 95       	ret

00000764 <checkFieldCollision>:
     764:	dc 01       	movw	r26, r24
     766:	30 e0       	ldi	r19, 0x00	; 0
     768:	27 c0       	rjmp	.+78     	; 0x7b8 <checkFieldCollision+0x54>
     76a:	11 96       	adiw	r26, 0x01	; 1
     76c:	8c 91       	ld	r24, X
     76e:	11 97       	sbiw	r26, 0x01	; 1
     770:	89 0f       	add	r24, r25
     772:	12 96       	adiw	r26, 0x02	; 2
     774:	ec 91       	ld	r30, X
     776:	12 97       	sbiw	r26, 0x02	; 2
     778:	23 2f       	mov	r18, r19
     77a:	2e 0f       	add	r18, r30
     77c:	e3 2f       	mov	r30, r19
     77e:	f0 e0       	ldi	r31, 0x00	; 0
     780:	ee 0f       	add	r30, r30
     782:	ff 1f       	adc	r31, r31
     784:	ee 0f       	add	r30, r30
     786:	ff 1f       	adc	r31, r31
     788:	ea 0f       	add	r30, r26
     78a:	fb 1f       	adc	r31, r27
     78c:	e9 0f       	add	r30, r25
     78e:	f1 1d       	adc	r31, r1
     790:	45 81       	ldd	r20, Z+5	; 0x05
     792:	41 30       	cpi	r20, 0x01	; 1
     794:	59 f4       	brne	.+22     	; 0x7ac <checkFieldCollision+0x48>
     796:	4d e0       	ldi	r20, 0x0D	; 13
     798:	24 9f       	mul	r18, r20
     79a:	f0 01       	movw	r30, r0
     79c:	11 24       	eor	r1, r1
     79e:	e7 5b       	subi	r30, 0xB7	; 183
     7a0:	f9 4f       	sbci	r31, 0xF9	; 249
     7a2:	e8 0f       	add	r30, r24
     7a4:	f1 1d       	adc	r31, r1
     7a6:	80 81       	ld	r24, Z
     7a8:	81 30       	cpi	r24, 0x01	; 1
     7aa:	59 f0       	breq	.+22     	; 0x7c2 <checkFieldCollision+0x5e>
     7ac:	9f 5f       	subi	r25, 0xFF	; 255
     7ae:	01 c0       	rjmp	.+2      	; 0x7b2 <checkFieldCollision+0x4e>
     7b0:	90 e0       	ldi	r25, 0x00	; 0
     7b2:	94 30       	cpi	r25, 0x04	; 4
     7b4:	d0 f2       	brcs	.-76     	; 0x76a <checkFieldCollision+0x6>
     7b6:	3f 5f       	subi	r19, 0xFF	; 255
     7b8:	34 30       	cpi	r19, 0x04	; 4
     7ba:	d0 f3       	brcs	.-12     	; 0x7b0 <checkFieldCollision+0x4c>
     7bc:	80 e0       	ldi	r24, 0x00	; 0
     7be:	90 e0       	ldi	r25, 0x00	; 0
     7c0:	08 95       	ret
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	90 e0       	ldi	r25, 0x00	; 0
     7c6:	08 95       	ret

000007c8 <printField>:
     7c8:	cf 92       	push	r12
     7ca:	df 92       	push	r13
     7cc:	ef 92       	push	r14
     7ce:	40 e0       	ldi	r20, 0x00	; 0
     7d0:	50 e0       	ldi	r21, 0x00	; 0
     7d2:	d3 c0       	rjmp	.+422    	; 0x97a <__stack+0x7b>
     7d4:	20 91 1a 06 	lds	r18, 0x061A	; 0x80061a <activeBrick>
     7d8:	22 23       	and	r18, r18
     7da:	59 f1       	breq	.+86     	; 0x832 <__DATA_REGION_LENGTH__+0x32>
     7dc:	20 91 1b 06 	lds	r18, 0x061B	; 0x80061b <activeBrick+0x1>
     7e0:	30 e0       	ldi	r19, 0x00	; 0
     7e2:	42 17       	cp	r20, r18
     7e4:	53 07       	cpc	r21, r19
     7e6:	3c f1       	brlt	.+78     	; 0x836 <__DATA_REGION_LENGTH__+0x36>
     7e8:	60 91 1e 06 	lds	r22, 0x061E	; 0x80061e <activeBrick+0x4>
     7ec:	70 e0       	ldi	r23, 0x00	; 0
     7ee:	f9 01       	movw	r30, r18
     7f0:	e6 0f       	add	r30, r22
     7f2:	f7 1f       	adc	r31, r23
     7f4:	4e 17       	cp	r20, r30
     7f6:	5f 07       	cpc	r21, r31
     7f8:	04 f5       	brge	.+64     	; 0x83a <__DATA_REGION_LENGTH__+0x3a>
     7fa:	e0 91 1c 06 	lds	r30, 0x061C	; 0x80061c <activeBrick+0x2>
     7fe:	f0 e0       	ldi	r31, 0x00	; 0
     800:	8e 17       	cp	r24, r30
     802:	9f 07       	cpc	r25, r31
     804:	e4 f0       	brlt	.+56     	; 0x83e <__DATA_REGION_LENGTH__+0x3e>
     806:	6e 0f       	add	r22, r30
     808:	7f 1f       	adc	r23, r31
     80a:	86 17       	cp	r24, r22
     80c:	97 07       	cpc	r25, r23
     80e:	cc f4       	brge	.+50     	; 0x842 <__DATA_REGION_LENGTH__+0x42>
     810:	bc 01       	movw	r22, r24
     812:	6e 1b       	sub	r22, r30
     814:	7f 0b       	sbc	r23, r31
     816:	fa 01       	movw	r30, r20
     818:	e2 1b       	sub	r30, r18
     81a:	f3 0b       	sbc	r31, r19
     81c:	9b 01       	movw	r18, r22
     81e:	22 0f       	add	r18, r18
     820:	33 1f       	adc	r19, r19
     822:	22 0f       	add	r18, r18
     824:	33 1f       	adc	r19, r19
     826:	26 5e       	subi	r18, 0xE6	; 230
     828:	39 4f       	sbci	r19, 0xF9	; 249
     82a:	e2 0f       	add	r30, r18
     82c:	f3 1f       	adc	r31, r19
     82e:	35 81       	ldd	r19, Z+5	; 0x05
     830:	09 c0       	rjmp	.+18     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	07 c0       	rjmp	.+14     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     836:	30 e0       	ldi	r19, 0x00	; 0
     838:	05 c0       	rjmp	.+10     	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     83a:	30 e0       	ldi	r19, 0x00	; 0
     83c:	03 c0       	rjmp	.+6      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     83e:	30 e0       	ldi	r19, 0x00	; 0
     840:	01 c0       	rjmp	.+2      	; 0x844 <__DATA_REGION_LENGTH__+0x44>
     842:	30 e0       	ldi	r19, 0x00	; 0
     844:	2d e0       	ldi	r18, 0x0D	; 13
     846:	28 9f       	mul	r18, r24
     848:	f0 01       	movw	r30, r0
     84a:	29 9f       	mul	r18, r25
     84c:	f0 0d       	add	r31, r0
     84e:	11 24       	eor	r1, r1
     850:	e7 5b       	subi	r30, 0xB7	; 183
     852:	f9 4f       	sbci	r31, 0xF9	; 249
     854:	e4 0f       	add	r30, r20
     856:	f5 1f       	adc	r31, r21
     858:	20 81       	ld	r18, Z
     85a:	22 23       	and	r18, r18
     85c:	b9 f1       	breq	.+110    	; 0x8cc <__DATA_REGION_LENGTH__+0xcc>
     85e:	9c 01       	movw	r18, r24
     860:	22 0f       	add	r18, r18
     862:	33 1f       	adc	r19, r19
     864:	f9 01       	movw	r30, r18
     866:	e8 0f       	add	r30, r24
     868:	f9 1f       	adc	r31, r25
     86a:	ee 0f       	add	r30, r30
     86c:	ff 1f       	adc	r31, r31
     86e:	ee 0f       	add	r30, r30
     870:	ff 1f       	adc	r31, r31
     872:	e4 0f       	add	r30, r20
     874:	f5 1f       	adc	r31, r21
     876:	ee 0f       	add	r30, r30
     878:	ff 1f       	adc	r31, r31
     87a:	e8 59       	subi	r30, 0x98	; 152
     87c:	ff 4f       	sbci	r31, 0xFF	; 255
     87e:	e4 91       	lpm	r30, Z
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	d9 01       	movw	r26, r18
     884:	a8 0f       	add	r26, r24
     886:	b9 1f       	adc	r27, r25
     888:	aa 0f       	add	r26, r26
     88a:	bb 1f       	adc	r27, r27
     88c:	aa 0f       	add	r26, r26
     88e:	bb 1f       	adc	r27, r27
     890:	a7 5b       	subi	r26, 0xB7	; 183
     892:	b9 4f       	sbci	r27, 0xF9	; 249
     894:	a4 0f       	add	r26, r20
     896:	b5 1f       	adc	r27, r21
     898:	ac 5f       	subi	r26, 0xFC	; 252
     89a:	be 4f       	sbci	r27, 0xFE	; 254
     89c:	2c 91       	ld	r18, X
     89e:	30 e0       	ldi	r19, 0x00	; 0
     8a0:	bf 01       	movw	r22, r30
     8a2:	66 0f       	add	r22, r22
     8a4:	77 1f       	adc	r23, r23
     8a6:	e6 0f       	add	r30, r22
     8a8:	f7 1f       	adc	r31, r23
     8aa:	eb 56       	subi	r30, 0x6B	; 107
     8ac:	fd 4f       	sbci	r31, 0xFD	; 253
     8ae:	d9 01       	movw	r26, r18
     8b0:	aa 0f       	add	r26, r26
     8b2:	bb 1f       	adc	r27, r27
     8b4:	2a 0f       	add	r18, r26
     8b6:	3b 1f       	adc	r19, r27
     8b8:	d9 01       	movw	r26, r18
     8ba:	ae 5f       	subi	r26, 0xFE	; 254
     8bc:	be 4f       	sbci	r27, 0xFE	; 254
     8be:	cd 90       	ld	r12, X+
     8c0:	dd 90       	ld	r13, X+
     8c2:	ec 90       	ld	r14, X
     8c4:	c0 82       	st	Z, r12
     8c6:	d1 82       	std	Z+1, r13	; 0x01
     8c8:	e2 82       	std	Z+2, r14	; 0x02
     8ca:	4d c0       	rjmp	.+154    	; 0x966 <__stack+0x67>
     8cc:	33 23       	and	r19, r19
     8ce:	51 f1       	breq	.+84     	; 0x924 <__stack+0x25>
     8d0:	fc 01       	movw	r30, r24
     8d2:	ee 0f       	add	r30, r30
     8d4:	ff 1f       	adc	r31, r31
     8d6:	e8 0f       	add	r30, r24
     8d8:	f9 1f       	adc	r31, r25
     8da:	ee 0f       	add	r30, r30
     8dc:	ff 1f       	adc	r31, r31
     8de:	ee 0f       	add	r30, r30
     8e0:	ff 1f       	adc	r31, r31
     8e2:	e4 0f       	add	r30, r20
     8e4:	f5 1f       	adc	r31, r21
     8e6:	ee 0f       	add	r30, r30
     8e8:	ff 1f       	adc	r31, r31
     8ea:	e8 59       	subi	r30, 0x98	; 152
     8ec:	ff 4f       	sbci	r31, 0xFF	; 255
     8ee:	e4 91       	lpm	r30, Z
     8f0:	f0 e0       	ldi	r31, 0x00	; 0
     8f2:	20 91 2f 06 	lds	r18, 0x062F	; 0x80062f <activeBrick+0x15>
     8f6:	30 e0       	ldi	r19, 0x00	; 0
     8f8:	bf 01       	movw	r22, r30
     8fa:	66 0f       	add	r22, r22
     8fc:	77 1f       	adc	r23, r23
     8fe:	e6 0f       	add	r30, r22
     900:	f7 1f       	adc	r31, r23
     902:	eb 56       	subi	r30, 0x6B	; 107
     904:	fd 4f       	sbci	r31, 0xFD	; 253
     906:	d9 01       	movw	r26, r18
     908:	aa 0f       	add	r26, r26
     90a:	bb 1f       	adc	r27, r27
     90c:	2a 0f       	add	r18, r26
     90e:	3b 1f       	adc	r19, r27
     910:	d9 01       	movw	r26, r18
     912:	ae 5f       	subi	r26, 0xFE	; 254
     914:	be 4f       	sbci	r27, 0xFE	; 254
     916:	cd 90       	ld	r12, X+
     918:	dd 90       	ld	r13, X+
     91a:	ec 90       	ld	r14, X
     91c:	c0 82       	st	Z, r12
     91e:	d1 82       	std	Z+1, r13	; 0x01
     920:	e2 82       	std	Z+2, r14	; 0x02
     922:	21 c0       	rjmp	.+66     	; 0x966 <__stack+0x67>
     924:	fc 01       	movw	r30, r24
     926:	ee 0f       	add	r30, r30
     928:	ff 1f       	adc	r31, r31
     92a:	e8 0f       	add	r30, r24
     92c:	f9 1f       	adc	r31, r25
     92e:	ee 0f       	add	r30, r30
     930:	ff 1f       	adc	r31, r31
     932:	ee 0f       	add	r30, r30
     934:	ff 1f       	adc	r31, r31
     936:	e4 0f       	add	r30, r20
     938:	f5 1f       	adc	r31, r21
     93a:	ee 0f       	add	r30, r30
     93c:	ff 1f       	adc	r31, r31
     93e:	e8 59       	subi	r30, 0x98	; 152
     940:	ff 4f       	sbci	r31, 0xFF	; 255
     942:	e4 91       	lpm	r30, Z
     944:	f0 e0       	ldi	r31, 0x00	; 0
     946:	9f 01       	movw	r18, r30
     948:	22 0f       	add	r18, r18
     94a:	33 1f       	adc	r19, r19
     94c:	e2 0f       	add	r30, r18
     94e:	f3 1f       	adc	r31, r19
     950:	eb 56       	subi	r30, 0x6B	; 107
     952:	fd 4f       	sbci	r31, 0xFD	; 253
     954:	c0 90 7e 02 	lds	r12, 0x027E	; 0x80027e <led_off>
     958:	d0 90 7f 02 	lds	r13, 0x027F	; 0x80027f <led_off+0x1>
     95c:	e0 90 80 02 	lds	r14, 0x0280	; 0x800280 <led_off+0x2>
     960:	c0 82       	st	Z, r12
     962:	d1 82       	std	Z+1, r13	; 0x01
     964:	e2 82       	std	Z+2, r14	; 0x02
     966:	01 96       	adiw	r24, 0x01	; 1
     968:	02 c0       	rjmp	.+4      	; 0x96e <__stack+0x6f>
     96a:	80 e0       	ldi	r24, 0x00	; 0
     96c:	90 e0       	ldi	r25, 0x00	; 0
     96e:	84 31       	cpi	r24, 0x14	; 20
     970:	91 05       	cpc	r25, r1
     972:	0c f4       	brge	.+2      	; 0x976 <__stack+0x77>
     974:	2f cf       	rjmp	.-418    	; 0x7d4 <printField+0xc>
     976:	4f 5f       	subi	r20, 0xFF	; 255
     978:	5f 4f       	sbci	r21, 0xFF	; 255
     97a:	4c 30       	cpi	r20, 0x0C	; 12
     97c:	51 05       	cpc	r21, r1
     97e:	ac f3       	brlt	.-22     	; 0x96a <__stack+0x6b>
     980:	6c e2       	ldi	r22, 0x2C	; 44
     982:	71 e0       	ldi	r23, 0x01	; 1
     984:	85 e9       	ldi	r24, 0x95	; 149
     986:	92 e0       	ldi	r25, 0x02	; 2
     988:	0e 94 c3 01 	call	0x386	; 0x386 <ws2812_setleds>
     98c:	85 e8       	ldi	r24, 0x85	; 133
     98e:	8a 95       	dec	r24
     990:	f1 f7       	brne	.-4      	; 0x98e <__stack+0x8f>
     992:	00 00       	nop
     994:	ef 90       	pop	r14
     996:	df 90       	pop	r13
     998:	cf 90       	pop	r12
     99a:	08 95       	ret

0000099c <newActiveBrick>:
	activeBrick = nextBrick;
	*/
}

void newActiveBrick() 
{
     99c:	cf 93       	push	r28
     99e:	df 93       	push	r29
     9a0:	cd b7       	in	r28, 0x3d	; 61
     9a2:	de b7       	in	r29, 0x3e	; 62
     9a4:	66 97       	sbiw	r28, 0x16	; 22
     9a6:	0f b6       	in	r0, 0x3f	; 63
     9a8:	f8 94       	cli
     9aa:	de bf       	out	0x3e, r29	; 62
     9ac:	0f be       	out	0x3f, r0	; 63
     9ae:	cd bf       	out	0x3d, r28	; 61
	//Reads value from flash memory for brick's shape and color
	selectedBrick = pgm_read_byte(&randombrick[random6]); // 0-6, 7 pieces
     9b0:	90 91 87 02 	lds	r25, 0x0287	; 0x800287 <random6>
     9b4:	e9 2f       	mov	r30, r25
     9b6:	f0 e0       	ldi	r31, 0x00	; 0
     9b8:	ee 0f       	add	r30, r30
     9ba:	ff 1f       	adc	r31, r31
     9bc:	e0 5f       	subi	r30, 0xF0	; 240
     9be:	fc 4f       	sbci	r31, 0xFC	; 252
     9c0:	44 91       	lpm	r20, Z
     9c2:	40 93 82 02 	sts	0x0282, r20	; 0x800282 <selectedBrick>
	selectedColor = pgm_read_byte(&randomcolor[random9]); // 0-9, 10 colors
     9c6:	80 91 86 02 	lds	r24, 0x0286	; 0x800286 <random9>
     9ca:	e8 2f       	mov	r30, r24
     9cc:	f0 e0       	ldi	r31, 0x00	; 0
     9ce:	ee 0f       	add	r30, r30
     9d0:	ff 1f       	adc	r31, r31
     9d2:	e0 54       	subi	r30, 0x40	; 64
     9d4:	fd 4f       	sbci	r31, 0xFD	; 253
     9d6:	34 91       	lpm	r19, Z
     9d8:	30 93 81 02 	sts	0x0281, r19	; 0x800281 <selectedColor>
	//printcolor = selectedColor;
	
	random6++;
     9dc:	9f 5f       	subi	r25, 0xFF	; 255
     9de:	90 93 87 02 	sts	0x0287, r25	; 0x800287 <random6>
	random9++;
     9e2:	8f 5f       	subi	r24, 0xFF	; 255
     9e4:	80 93 86 02 	sts	0x0286, r24	; 0x800286 <random9>
	
	if (random6 > 6) random6 = 0;
     9e8:	97 30       	cpi	r25, 0x07	; 7
     9ea:	10 f0       	brcs	.+4      	; 0x9f0 <newActiveBrick+0x54>
     9ec:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <random6>
	if (random9 > 9) random9 = 0; 
     9f0:	8a 30       	cpi	r24, 0x0A	; 10
     9f2:	10 f0       	brcs	.+4      	; 0x9f8 <newActiveBrick+0x5c>
     9f4:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <random9>
	
	activeBrick.siz = brickLib[selectedBrick].siz;
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	22 e2       	ldi	r18, 0x22	; 34
     9fc:	24 9f       	mul	r18, r20
     9fe:	c0 01       	movw	r24, r0
     a00:	25 9f       	mul	r18, r21
     a02:	90 0d       	add	r25, r0
     a04:	11 24       	eor	r1, r1
     a06:	80 5e       	subi	r24, 0xE0	; 224
     a08:	9e 4f       	sbci	r25, 0xFE	; 254
     a0a:	dc 01       	movw	r26, r24
     a0c:	11 96       	adiw	r26, 0x01	; 1
     a0e:	2c 91       	ld	r18, X
     a10:	aa e1       	ldi	r26, 0x1A	; 26
     a12:	b6 e0       	ldi	r27, 0x06	; 6
     a14:	14 96       	adiw	r26, 0x04	; 4
     a16:	2c 93       	st	X, r18
     a18:	14 97       	sbiw	r26, 0x04	; 4
	activeBrick.yOffset = brickLib[selectedBrick].yOffset;
     a1a:	fc 01       	movw	r30, r24
     a1c:	90 81       	ld	r25, Z
     a1e:	13 96       	adiw	r26, 0x03	; 3
     a20:	9c 93       	st	X, r25
     a22:	13 97       	sbiw	r26, 0x03	; 3
	
	//activeBrick.xpos = column / 2 - activeBrick.siz / 2; // //To center
	activeBrick.xpos = 6;
     a24:	86 e0       	ldi	r24, 0x06	; 6
     a26:	11 96       	adiw	r26, 0x01	; 1
     a28:	8c 93       	st	X, r24
     a2a:	11 97       	sbiw	r26, 0x01	; 1
	
	activeBrick.ypos = 20 - 1 - activeBrick.yOffset;			//Top of the screen
     a2c:	83 e1       	ldi	r24, 0x13	; 19
     a2e:	89 1b       	sub	r24, r25
     a30:	12 96       	adiw	r26, 0x02	; 2
     a32:	8c 93       	st	X, r24
     a34:	12 97       	sbiw	r26, 0x02	; 2
	//activeBrick.ypos = 17;
	
	activeBrick.enabled = 1;
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	8c 93       	st	X, r24

	activeBrick.color = selectedColor; // matrix = color;
     a3a:	55 96       	adiw	r26, 0x15	; 21
     a3c:	3c 93       	st	X, r19
	//activeBrick.color = 0;
	//1 + selectedColor;
	 
	//Copy pix array of selected Brick
	for (byte y = 0; y < 4; y++) 
     a3e:	70 e0       	ldi	r23, 0x00	; 0
     a40:	25 c0       	rjmp	.+74     	; 0xa8c <newActiveBrick+0xf0>
	{
		for (byte x = 0; x < 4; x++) 
		{
			activeBrick.pix[y][x] = (brickLib[selectedBrick]).pix[y][x];
     a42:	87 2f       	mov	r24, r23
     a44:	90 e0       	ldi	r25, 0x00	; 0
     a46:	26 2f       	mov	r18, r22
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	88 0f       	add	r24, r24
     a4c:	99 1f       	adc	r25, r25
     a4e:	88 0f       	add	r24, r24
     a50:	99 1f       	adc	r25, r25
     a52:	a1 e1       	ldi	r26, 0x11	; 17
     a54:	a4 9f       	mul	r26, r20
     a56:	f0 01       	movw	r30, r0
     a58:	a5 9f       	mul	r26, r21
     a5a:	f0 0d       	add	r31, r0
     a5c:	11 24       	eor	r1, r1
     a5e:	e8 0f       	add	r30, r24
     a60:	f9 1f       	adc	r31, r25
     a62:	e2 0f       	add	r30, r18
     a64:	f3 1f       	adc	r31, r19
     a66:	31 96       	adiw	r30, 0x01	; 1
     a68:	ee 0f       	add	r30, r30
     a6a:	ff 1f       	adc	r31, r31
     a6c:	e0 5e       	subi	r30, 0xE0	; 224
     a6e:	fe 4f       	sbci	r31, 0xFE	; 254
     a70:	e0 81       	ld	r30, Z
     a72:	86 5e       	subi	r24, 0xE6	; 230
     a74:	99 4f       	sbci	r25, 0xF9	; 249
     a76:	dc 01       	movw	r26, r24
     a78:	a2 0f       	add	r26, r18
     a7a:	b3 1f       	adc	r27, r19
     a7c:	15 96       	adiw	r26, 0x05	; 5
     a7e:	ec 93       	st	X, r30
	//1 + selectedColor;
	 
	//Copy pix array of selected Brick
	for (byte y = 0; y < 4; y++) 
	{
		for (byte x = 0; x < 4; x++) 
     a80:	6f 5f       	subi	r22, 0xFF	; 255
     a82:	01 c0       	rjmp	.+2      	; 0xa86 <newActiveBrick+0xea>
     a84:	60 e0       	ldi	r22, 0x00	; 0
     a86:	64 30       	cpi	r22, 0x04	; 4
     a88:	e0 f2       	brcs	.-72     	; 0xa42 <newActiveBrick+0xa6>
	activeBrick.color = selectedColor; // matrix = color;
	//activeBrick.color = 0;
	//1 + selectedColor;
	 
	//Copy pix array of selected Brick
	for (byte y = 0; y < 4; y++) 
     a8a:	7f 5f       	subi	r23, 0xFF	; 255
     a8c:	74 30       	cpi	r23, 0x04	; 4
     a8e:	d0 f3       	brcs	.-12     	; 0xa84 <newActiveBrick+0xe8>
			activeBrick.pix[y][x] = (brickLib[selectedBrick]).pix[y][x];
		}
	}
	
	Brick realBrick;
	realBrick = activeBrick;
     a90:	86 e1       	ldi	r24, 0x16	; 22
     a92:	ea e1       	ldi	r30, 0x1A	; 26
     a94:	f6 e0       	ldi	r31, 0x06	; 6
     a96:	de 01       	movw	r26, r28
     a98:	11 96       	adiw	r26, 0x01	; 1
     a9a:	01 90       	ld	r0, Z+
     a9c:	0d 92       	st	X+, r0
     a9e:	8a 95       	dec	r24
     aa0:	e1 f7       	brne	.-8      	; 0xa9a <newActiveBrick+0xfe>
	//showNextPiece();
	activeBrick = realBrick;
     aa2:	86 e1       	ldi	r24, 0x16	; 22
     aa4:	fe 01       	movw	r30, r28
     aa6:	31 96       	adiw	r30, 0x01	; 1
     aa8:	aa e1       	ldi	r26, 0x1A	; 26
     aaa:	b6 e0       	ldi	r27, 0x06	; 6
     aac:	01 90       	ld	r0, Z+
     aae:	0d 92       	st	X+, r0
     ab0:	8a 95       	dec	r24
     ab2:	e1 f7       	brne	.-8      	; 0xaac <newActiveBrick+0x110>
	
	printField();
     ab4:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printField>
	//clearNext();
	
	if (checkFieldCollision(&activeBrick)) 
     ab8:	8a e1       	ldi	r24, 0x1A	; 26
     aba:	96 e0       	ldi	r25, 0x06	; 6
     abc:	0e 94 b2 03 	call	0x764	; 0x764 <checkFieldCollision>
     ac0:	89 2b       	or	r24, r25
     ac2:	19 f0       	breq	.+6      	; 0xaca <newActiveBrick+0x12e>
	{
		tetrisGameOver = 1;
     ac4:	81 e0       	ldi	r24, 0x01	; 1
     ac6:	80 93 83 02 	sts	0x0283, r24	; 0x800283 <tetrisGameOver>
	}	
}
     aca:	66 96       	adiw	r28, 0x16	; 22
     acc:	0f b6       	in	r0, 0x3f	; 63
     ace:	f8 94       	cli
     ad0:	de bf       	out	0x3e, r29	; 62
     ad2:	0f be       	out	0x3f, r0	; 63
     ad4:	cd bf       	out	0x3d, r28	; 61
     ad6:	df 91       	pop	r29
     ad8:	cf 91       	pop	r28
     ada:	08 95       	ret

00000adc <rotateActiveBrick>:

// CHECK ON TABLE
void rotateActiveBrick() {
	//Copy active brick pix array to temporary pix array
	
	for (byte y = 0; y < 4; y++) 
     adc:	60 e0       	ldi	r22, 0x00	; 0
     ade:	1a c0       	rjmp	.+52     	; 0xb14 <rotateActiveBrick+0x38>
	{
		for (byte x = 0; x < 4; x++) 
		{
			tmpBrick.pix[y][x] = activeBrick.pix[y][x]; // IMPORTANTE, verificar x,y e y,x na mesa
     ae0:	86 2f       	mov	r24, r22
     ae2:	90 e0       	ldi	r25, 0x00	; 0
     ae4:	24 2f       	mov	r18, r20
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	88 0f       	add	r24, r24
     aea:	99 1f       	adc	r25, r25
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	fc 01       	movw	r30, r24
     af2:	e6 5e       	subi	r30, 0xE6	; 230
     af4:	f9 4f       	sbci	r31, 0xF9	; 249
     af6:	e2 0f       	add	r30, r18
     af8:	f3 1f       	adc	r31, r19
     afa:	55 81       	ldd	r21, Z+5	; 0x05
     afc:	80 5d       	subi	r24, 0xD0	; 208
     afe:	99 4f       	sbci	r25, 0xF9	; 249
     b00:	fc 01       	movw	r30, r24
     b02:	e2 0f       	add	r30, r18
     b04:	f3 1f       	adc	r31, r19
     b06:	55 83       	std	Z+5, r21	; 0x05
void rotateActiveBrick() {
	//Copy active brick pix array to temporary pix array
	
	for (byte y = 0; y < 4; y++) 
	{
		for (byte x = 0; x < 4; x++) 
     b08:	4f 5f       	subi	r20, 0xFF	; 255
     b0a:	01 c0       	rjmp	.+2      	; 0xb0e <rotateActiveBrick+0x32>
     b0c:	40 e0       	ldi	r20, 0x00	; 0
     b0e:	44 30       	cpi	r20, 0x04	; 4
     b10:	38 f3       	brcs	.-50     	; 0xae0 <rotateActiveBrick+0x4>

// CHECK ON TABLE
void rotateActiveBrick() {
	//Copy active brick pix array to temporary pix array
	
	for (byte y = 0; y < 4; y++) 
     b12:	6f 5f       	subi	r22, 0xFF	; 255
     b14:	64 30       	cpi	r22, 0x04	; 4
     b16:	d0 f3       	brcs	.-12     	; 0xb0c <rotateActiveBrick+0x30>
		for (byte x = 0; x < 4; x++) 
		{
			tmpBrick.pix[y][x] = activeBrick.pix[y][x]; // IMPORTANTE, verificar x,y e y,x na mesa
		}
	}
	tmpBrick.xpos = activeBrick.xpos;
     b18:	aa e1       	ldi	r26, 0x1A	; 26
     b1a:	b6 e0       	ldi	r27, 0x06	; 6
     b1c:	11 96       	adiw	r26, 0x01	; 1
     b1e:	8c 91       	ld	r24, X
     b20:	11 97       	sbiw	r26, 0x01	; 1
     b22:	e0 e3       	ldi	r30, 0x30	; 48
     b24:	f6 e0       	ldi	r31, 0x06	; 6
     b26:	81 83       	std	Z+1, r24	; 0x01
	tmpBrick.ypos = activeBrick.ypos;
     b28:	12 96       	adiw	r26, 0x02	; 2
     b2a:	8c 91       	ld	r24, X
     b2c:	12 97       	sbiw	r26, 0x02	; 2
     b2e:	82 83       	std	Z+2, r24	; 0x02
	tmpBrick.siz = activeBrick.siz;
     b30:	14 96       	adiw	r26, 0x04	; 4
     b32:	8c 91       	ld	r24, X
     b34:	14 97       	sbiw	r26, 0x04	; 4
     b36:	84 83       	std	Z+4, r24	; 0x04

	//Depending on size of the active brick, we will rotate differently
	if (activeBrick.siz == 3) 
     b38:	83 30       	cpi	r24, 0x03	; 3
     b3a:	59 f5       	brne	.+86     	; 0xb92 <rotateActiveBrick+0xb6>
	{
		//Perform rotation around center pix
		tmpBrick.pix[0][0] = activeBrick.pix[0][2];
     b3c:	17 96       	adiw	r26, 0x07	; 7
     b3e:	8c 91       	ld	r24, X
     b40:	17 97       	sbiw	r26, 0x07	; 7
     b42:	85 83       	std	Z+5, r24	; 0x05
		tmpBrick.pix[0][1] = activeBrick.pix[1][2];
     b44:	1b 96       	adiw	r26, 0x0b	; 11
     b46:	8c 91       	ld	r24, X
     b48:	1b 97       	sbiw	r26, 0x0b	; 11
     b4a:	86 83       	std	Z+6, r24	; 0x06
		tmpBrick.pix[0][2] = activeBrick.pix[2][2];
     b4c:	1f 96       	adiw	r26, 0x0f	; 15
     b4e:	8c 91       	ld	r24, X
     b50:	1f 97       	sbiw	r26, 0x0f	; 15
     b52:	87 83       	std	Z+7, r24	; 0x07
		tmpBrick.pix[1][0] = activeBrick.pix[0][1];
     b54:	16 96       	adiw	r26, 0x06	; 6
     b56:	8c 91       	ld	r24, X
     b58:	16 97       	sbiw	r26, 0x06	; 6
     b5a:	81 87       	std	Z+9, r24	; 0x09
		tmpBrick.pix[1][1] = activeBrick.pix[1][1];
     b5c:	1a 96       	adiw	r26, 0x0a	; 10
     b5e:	8c 91       	ld	r24, X
     b60:	1a 97       	sbiw	r26, 0x0a	; 10
     b62:	82 87       	std	Z+10, r24	; 0x0a
		tmpBrick.pix[1][2] = activeBrick.pix[2][1];
     b64:	1e 96       	adiw	r26, 0x0e	; 14
     b66:	8c 91       	ld	r24, X
     b68:	1e 97       	sbiw	r26, 0x0e	; 14
     b6a:	83 87       	std	Z+11, r24	; 0x0b
		tmpBrick.pix[2][0] = activeBrick.pix[0][0];
     b6c:	15 96       	adiw	r26, 0x05	; 5
     b6e:	8c 91       	ld	r24, X
     b70:	15 97       	sbiw	r26, 0x05	; 5
     b72:	85 87       	std	Z+13, r24	; 0x0d
		tmpBrick.pix[2][1] = activeBrick.pix[1][0];
     b74:	19 96       	adiw	r26, 0x09	; 9
     b76:	8c 91       	ld	r24, X
     b78:	19 97       	sbiw	r26, 0x09	; 9
     b7a:	86 87       	std	Z+14, r24	; 0x0e
		tmpBrick.pix[2][2] = activeBrick.pix[2][0];
     b7c:	1d 96       	adiw	r26, 0x0d	; 13
     b7e:	8c 91       	ld	r24, X
     b80:	87 87       	std	Z+15, r24	; 0x0f
		//Keep other parts of temporary block clear
		tmpBrick.pix[0][3] = 0;
     b82:	10 86       	std	Z+8, r1	; 0x08
		tmpBrick.pix[1][3] = 0;
     b84:	14 86       	std	Z+12, r1	; 0x0c
		tmpBrick.pix[2][3] = 0;
     b86:	10 8a       	std	Z+16, r1	; 0x10
		tmpBrick.pix[3][3] = 0;
     b88:	14 8a       	std	Z+20, r1	; 0x14
		tmpBrick.pix[3][2] = 0;
     b8a:	13 8a       	std	Z+19, r1	; 0x13
		tmpBrick.pix[3][1] = 0;
     b8c:	12 8a       	std	Z+18, r1	; 0x12
		tmpBrick.pix[3][0] = 0;
     b8e:	11 8a       	std	Z+17, r1	; 0x11
     b90:	55 c0       	rjmp	.+170    	; 0xc3c <rotateActiveBrick+0x160>
	
		*/
		
	} 
	
	else if (selectedBrick == 0)
     b92:	90 91 82 02 	lds	r25, 0x0282	; 0x800282 <selectedBrick>
     b96:	99 23       	and	r25, r25
     b98:	09 f4       	brne	.+2      	; 0xb9c <rotateActiveBrick+0xc0>
     b9a:	7d c0       	rjmp	.+250    	; 0xc96 <rotateActiveBrick+0x1ba>
	{
		return;
	}
	
	else if (activeBrick.siz == 4)
     b9c:	84 30       	cpi	r24, 0x04	; 4
     b9e:	09 f0       	breq	.+2      	; 0xba2 <rotateActiveBrick+0xc6>
     ba0:	4d c0       	rjmp	.+154    	; 0xc3c <rotateActiveBrick+0x160>
	{
		if (I_rot == 0)
     ba2:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <I_rot>
     ba6:	88 23       	and	r24, r24
     ba8:	09 f1       	breq	.+66     	; 0xbec <rotateActiveBrick+0x110>
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	43 c0       	rjmp	.+134    	; 0xc34 <rotateActiveBrick+0x158>
		{
			for (byte y = 0; y < 4; y++)
			{
				for (byte x = 0; x < 4; x++)
				{
					tmpBrick.pix[y][x] = (brickLib[7]).pix[y][x];
     bae:	86 2f       	mov	r24, r22
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	24 2f       	mov	r18, r20
     bb4:	30 e0       	ldi	r19, 0x00	; 0
     bb6:	88 0f       	add	r24, r24
     bb8:	99 1f       	adc	r25, r25
     bba:	88 0f       	add	r24, r24
     bbc:	99 1f       	adc	r25, r25
     bbe:	fc 01       	movw	r30, r24
     bc0:	e2 0f       	add	r30, r18
     bc2:	f3 1f       	adc	r31, r19
     bc4:	e8 58       	subi	r30, 0x88	; 136
     bc6:	ff 4f       	sbci	r31, 0xFF	; 255
     bc8:	ee 0f       	add	r30, r30
     bca:	ff 1f       	adc	r31, r31
     bcc:	e0 5e       	subi	r30, 0xE0	; 224
     bce:	fe 4f       	sbci	r31, 0xFE	; 254
     bd0:	50 81       	ld	r21, Z
     bd2:	80 5d       	subi	r24, 0xD0	; 208
     bd4:	99 4f       	sbci	r25, 0xF9	; 249
     bd6:	fc 01       	movw	r30, r24
     bd8:	e2 0f       	add	r30, r18
     bda:	f3 1f       	adc	r31, r19
     bdc:	55 83       	std	Z+5, r21	; 0x05
	{
		if (I_rot == 0)
		{
			for (byte y = 0; y < 4; y++)
			{
				for (byte x = 0; x < 4; x++)
     bde:	4f 5f       	subi	r20, 0xFF	; 255
     be0:	01 c0       	rjmp	.+2      	; 0xbe4 <rotateActiveBrick+0x108>
     be2:	40 e0       	ldi	r20, 0x00	; 0
     be4:	44 30       	cpi	r20, 0x04	; 4
     be6:	18 f3       	brcs	.-58     	; 0xbae <rotateActiveBrick+0xd2>
	
	else if (activeBrick.siz == 4)
	{
		if (I_rot == 0)
		{
			for (byte y = 0; y < 4; y++)
     be8:	6f 5f       	subi	r22, 0xFF	; 255
     bea:	01 c0       	rjmp	.+2      	; 0xbee <rotateActiveBrick+0x112>
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	64 30       	cpi	r22, 0x04	; 4
     bf0:	c0 f3       	brcs	.-16     	; 0xbe2 <rotateActiveBrick+0x106>
				for (byte x = 0; x < 4; x++)
				{
					tmpBrick.pix[y][x] = (brickLib[7]).pix[y][x];
				}
			}
			I_rot = 1;
     bf2:	81 e0       	ldi	r24, 0x01	; 1
     bf4:	80 93 84 02 	sts	0x0284, r24	; 0x800284 <I_rot>
     bf8:	21 c0       	rjmp	.+66     	; 0xc3c <rotateActiveBrick+0x160>
		{
			for (byte y = 0; y < 4; y++)
			{
				for (byte x = 0; x < 4; x++)
				{
					tmpBrick.pix[y][x] = (brickLib[1]).pix[y][x];
     bfa:	86 2f       	mov	r24, r22
     bfc:	90 e0       	ldi	r25, 0x00	; 0
     bfe:	24 2f       	mov	r18, r20
     c00:	30 e0       	ldi	r19, 0x00	; 0
     c02:	88 0f       	add	r24, r24
     c04:	99 1f       	adc	r25, r25
     c06:	88 0f       	add	r24, r24
     c08:	99 1f       	adc	r25, r25
     c0a:	fc 01       	movw	r30, r24
     c0c:	e2 0f       	add	r30, r18
     c0e:	f3 1f       	adc	r31, r19
     c10:	72 96       	adiw	r30, 0x12	; 18
     c12:	ee 0f       	add	r30, r30
     c14:	ff 1f       	adc	r31, r31
     c16:	e0 5e       	subi	r30, 0xE0	; 224
     c18:	fe 4f       	sbci	r31, 0xFE	; 254
     c1a:	50 81       	ld	r21, Z
     c1c:	80 5d       	subi	r24, 0xD0	; 208
     c1e:	99 4f       	sbci	r25, 0xF9	; 249
     c20:	fc 01       	movw	r30, r24
     c22:	e2 0f       	add	r30, r18
     c24:	f3 1f       	adc	r31, r19
     c26:	55 83       	std	Z+5, r21	; 0x05
		}
		else
		{
			for (byte y = 0; y < 4; y++)
			{
				for (byte x = 0; x < 4; x++)
     c28:	4f 5f       	subi	r20, 0xFF	; 255
     c2a:	01 c0       	rjmp	.+2      	; 0xc2e <rotateActiveBrick+0x152>
     c2c:	40 e0       	ldi	r20, 0x00	; 0
     c2e:	44 30       	cpi	r20, 0x04	; 4
     c30:	20 f3       	brcs	.-56     	; 0xbfa <rotateActiveBrick+0x11e>
			}
			I_rot = 1;
		}
		else
		{
			for (byte y = 0; y < 4; y++)
     c32:	6f 5f       	subi	r22, 0xFF	; 255
     c34:	64 30       	cpi	r22, 0x04	; 4
     c36:	d0 f3       	brcs	.-12     	; 0xc2c <rotateActiveBrick+0x150>
				for (byte x = 0; x < 4; x++)
				{
					tmpBrick.pix[y][x] = (brickLib[1]).pix[y][x];
				}
			}
			I_rot = 0;
     c38:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <I_rot>
	//Collision possibilities:
	//      -Brick now sticks outside field
	//      -Brick now sticks inside fixed bricks of field
	//In case of collision, we just discard the rotated temporary brick
	
	if ((!checkSidesCollision(&tmpBrick)) && (!checkFieldCollision(&tmpBrick)))
     c3c:	80 e3       	ldi	r24, 0x30	; 48
     c3e:	96 e0       	ldi	r25, 0x06	; 6
     c40:	0e 94 8e 03 	call	0x71c	; 0x71c <checkSidesCollision>
     c44:	89 2b       	or	r24, r25
     c46:	29 f5       	brne	.+74     	; 0xc92 <rotateActiveBrick+0x1b6>
     c48:	80 e3       	ldi	r24, 0x30	; 48
     c4a:	96 e0       	ldi	r25, 0x06	; 6
     c4c:	0e 94 b2 03 	call	0x764	; 0x764 <checkFieldCollision>
     c50:	89 2b       	or	r24, r25
     c52:	e1 f0       	breq	.+56     	; 0xc8c <rotateActiveBrick+0x1b0>
     c54:	1e c0       	rjmp	.+60     	; 0xc92 <rotateActiveBrick+0x1b6>
		
		for (byte y = 0; y < 4; y++) 
		{
			for (byte x = 0; x < 4; x++) 
			{
				activeBrick.pix[y][x] = tmpBrick.pix[y][x];
     c56:	86 2f       	mov	r24, r22
     c58:	90 e0       	ldi	r25, 0x00	; 0
     c5a:	24 2f       	mov	r18, r20
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	88 0f       	add	r24, r24
     c60:	99 1f       	adc	r25, r25
     c62:	88 0f       	add	r24, r24
     c64:	99 1f       	adc	r25, r25
     c66:	fc 01       	movw	r30, r24
     c68:	e0 5d       	subi	r30, 0xD0	; 208
     c6a:	f9 4f       	sbci	r31, 0xF9	; 249
     c6c:	e2 0f       	add	r30, r18
     c6e:	f3 1f       	adc	r31, r19
     c70:	55 81       	ldd	r21, Z+5	; 0x05
     c72:	86 5e       	subi	r24, 0xE6	; 230
     c74:	99 4f       	sbci	r25, 0xF9	; 249
     c76:	fc 01       	movw	r30, r24
     c78:	e2 0f       	add	r30, r18
     c7a:	f3 1f       	adc	r31, r19
     c7c:	55 83       	std	Z+5, r21	; 0x05
	{
		//Copy temporary brick pix array to active pix array
		
		for (byte y = 0; y < 4; y++) 
		{
			for (byte x = 0; x < 4; x++) 
     c7e:	4f 5f       	subi	r20, 0xFF	; 255
     c80:	01 c0       	rjmp	.+2      	; 0xc84 <rotateActiveBrick+0x1a8>
     c82:	40 e0       	ldi	r20, 0x00	; 0
     c84:	44 30       	cpi	r20, 0x04	; 4
     c86:	38 f3       	brcs	.-50     	; 0xc56 <rotateActiveBrick+0x17a>
	
	if ((!checkSidesCollision(&tmpBrick)) && (!checkFieldCollision(&tmpBrick)))
	{
		//Copy temporary brick pix array to active pix array
		
		for (byte y = 0; y < 4; y++) 
     c88:	6f 5f       	subi	r22, 0xFF	; 255
     c8a:	01 c0       	rjmp	.+2      	; 0xc8e <rotateActiveBrick+0x1b2>
     c8c:	60 e0       	ldi	r22, 0x00	; 0
     c8e:	64 30       	cpi	r22, 0x04	; 4
     c90:	c0 f3       	brcs	.-16     	; 0xc82 <rotateActiveBrick+0x1a6>
		}
		*/
	}
	
	//activeBrick.ypos = tmpBrick.ypos;
	printField(); // ?
     c92:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printField>
     c96:	08 95       	ret

00000c98 <shiftActiveBrick>:
}

//Shift brick left/right/down by one if possible
void shiftActiveBrick(char dir) 
{
     c98:	cf 93       	push	r28
     c9a:	df 93       	push	r29
     c9c:	c8 2f       	mov	r28, r24
	char down = 'd';
	char left = 'l';
	char right = 'r';
	
	//Change position of active brick 
	if (dir == left) 
     c9e:	8c 36       	cpi	r24, 0x6C	; 108
     ca0:	31 f4       	brne	.+12     	; 0xcae <shiftActiveBrick+0x16>
	{
		activeBrick.xpos--;
     ca2:	ea e1       	ldi	r30, 0x1A	; 26
     ca4:	f6 e0       	ldi	r31, 0x06	; 6
     ca6:	81 81       	ldd	r24, Z+1	; 0x01
     ca8:	81 50       	subi	r24, 0x01	; 1
     caa:	81 83       	std	Z+1, r24	; 0x01
     cac:	1e c0       	rjmp	.+60     	; 0xcea <shiftActiveBrick+0x52>
	} 
	else if (dir == right) 
     cae:	82 37       	cpi	r24, 0x72	; 114
     cb0:	31 f4       	brne	.+12     	; 0xcbe <shiftActiveBrick+0x26>
	{
		activeBrick.xpos++;
     cb2:	ea e1       	ldi	r30, 0x1A	; 26
     cb4:	f6 e0       	ldi	r31, 0x06	; 6
     cb6:	81 81       	ldd	r24, Z+1	; 0x01
     cb8:	8f 5f       	subi	r24, 0xFF	; 255
     cba:	81 83       	std	Z+1, r24	; 0x01
     cbc:	16 c0       	rjmp	.+44     	; 0xcea <shiftActiveBrick+0x52>
}
	else if (dir == down) 
     cbe:	84 36       	cpi	r24, 0x64	; 100
     cc0:	a1 f4       	brne	.+40     	; 0xcea <shiftActiveBrick+0x52>
	{
		activeBrick.ypos--;
     cc2:	ea e1       	ldi	r30, 0x1A	; 26
     cc4:	f6 e0       	ldi	r31, 0x06	; 6
     cc6:	82 81       	ldd	r24, Z+2	; 0x02
     cc8:	81 50       	subi	r24, 0x01	; 1
     cca:	82 83       	std	Z+2, r24	; 0x02
		
		if (activeBrick.ypos == 0) // If brick has reached the bottom, stop and generate new brick
     ccc:	81 11       	cpse	r24, r1
     cce:	0d c0       	rjmp	.+26     	; 0xcea <shiftActiveBrick+0x52>
					}
				}
			}
			
			*/
			if (!checkFieldCollision(&activeBrick))
     cd0:	cf 01       	movw	r24, r30
     cd2:	0e 94 b2 03 	call	0x764	; 0x764 <checkFieldCollision>
     cd6:	89 2b       	or	r24, r25
     cd8:	41 f4       	brne	.+16     	; 0xcea <shiftActiveBrick+0x52>
			{
				addActiveBrickToField();
     cda:	0e 94 32 03 	call	0x664	; 0x664 <addActiveBrickToField>
				activeBrick.enabled = 0;
     cde:	10 92 1a 06 	sts	0x061A, r1	; 0x80061a <activeBrick>
				printField();
     ce2:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printField>
				
				//clearNext();
				newActiveBrick();
     ce6:	0e 94 ce 04 	call	0x99c	; 0x99c <newActiveBrick>
	}
	*/
	
	//Check for collision
	//In case of collision, go back to previous position
	if ((checkSidesCollision(&activeBrick)) || (checkFieldCollision(&activeBrick)))
     cea:	8a e1       	ldi	r24, 0x1A	; 26
     cec:	96 e0       	ldi	r25, 0x06	; 6
     cee:	0e 94 8e 03 	call	0x71c	; 0x71c <checkSidesCollision>
     cf2:	89 2b       	or	r24, r25
     cf4:	31 f4       	brne	.+12     	; 0xd02 <shiftActiveBrick+0x6a>
     cf6:	8a e1       	ldi	r24, 0x1A	; 26
     cf8:	96 e0       	ldi	r25, 0x06	; 6
     cfa:	0e 94 b2 03 	call	0x764	; 0x764 <checkFieldCollision>
     cfe:	89 2b       	or	r24, r25
     d00:	f1 f0       	breq	.+60     	; 0xd3e <shiftActiveBrick+0xa6>
	{
		if (dir == left)
     d02:	cc 36       	cpi	r28, 0x6C	; 108
     d04:	31 f4       	brne	.+12     	; 0xd12 <shiftActiveBrick+0x7a>
		{
			activeBrick.xpos++;
     d06:	ea e1       	ldi	r30, 0x1A	; 26
     d08:	f6 e0       	ldi	r31, 0x06	; 6
     d0a:	81 81       	ldd	r24, Z+1	; 0x01
     d0c:	8f 5f       	subi	r24, 0xFF	; 255
     d0e:	81 83       	std	Z+1, r24	; 0x01
     d10:	16 c0       	rjmp	.+44     	; 0xd3e <shiftActiveBrick+0xa6>
		}
		else if (dir == right)
     d12:	c2 37       	cpi	r28, 0x72	; 114
     d14:	31 f4       	brne	.+12     	; 0xd22 <shiftActiveBrick+0x8a>
		{
			activeBrick.xpos--;
     d16:	ea e1       	ldi	r30, 0x1A	; 26
     d18:	f6 e0       	ldi	r31, 0x06	; 6
     d1a:	81 81       	ldd	r24, Z+1	; 0x01
     d1c:	81 50       	subi	r24, 0x01	; 1
     d1e:	81 83       	std	Z+1, r24	; 0x01
     d20:	0e c0       	rjmp	.+28     	; 0xd3e <shiftActiveBrick+0xa6>
		}
		else if (dir == down)
     d22:	c4 36       	cpi	r28, 0x64	; 100
     d24:	61 f4       	brne	.+24     	; 0xd3e <shiftActiveBrick+0xa6>
		{	
			activeBrick.ypos += 1;
     d26:	ca e1       	ldi	r28, 0x1A	; 26
     d28:	d6 e0       	ldi	r29, 0x06	; 6
     d2a:	8a 81       	ldd	r24, Y+2	; 0x02
     d2c:	8f 5f       	subi	r24, 0xFF	; 255
     d2e:	8a 83       	std	Y+2, r24	; 0x02
			addActiveBrickToField();
     d30:	0e 94 32 03 	call	0x664	; 0x664 <addActiveBrickToField>
			activeBrick.enabled = 0;
     d34:	18 82       	st	Y, r1
			printField();
     d36:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printField>
			newActiveBrick();
     d3a:	0e 94 ce 04 	call	0x99c	; 0x99c <newActiveBrick>
			
		}
	}
	
	printField();
     d3e:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printField>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     d42:	85 e8       	ldi	r24, 0x85	; 133
     d44:	8a 95       	dec	r24
     d46:	f1 f7       	brne	.-4      	; 0xd44 <shiftActiveBrick+0xac>
     d48:	00 00       	nop
	_delay_us(ws2812_resettime);
	
}
     d4a:	df 91       	pop	r29
     d4c:	cf 91       	pop	r28
     d4e:	08 95       	ret

00000d50 <moveFieldDownOne>:

// CHECK ON TABLE	
void moveFieldDownOne(byte startRow) 
{
	if (startRow == (row - 1))  //Top row has nothing on top to move...
     d50:	83 31       	cpi	r24, 0x13	; 19
     d52:	09 f0       	breq	.+2      	; 0xd56 <moveFieldDownOne+0x6>
     d54:	45 c0       	rjmp	.+138    	; 0xde0 <moveFieldDownOne+0x90>
     d56:	08 95       	ret
	//Copy top row to bottom
	for (y = startRow; y < row - 1; y++) // y = startRow - 1;
	{
		for (x = 0; x < column; x++) 
		{
			field.pix[y][x] = field.pix[y + 1][x];
     d58:	48 2f       	mov	r20, r24
     d5a:	50 e0       	ldi	r21, 0x00	; 0
     d5c:	9a 01       	movw	r18, r20
     d5e:	2f 5f       	subi	r18, 0xFF	; 255
     d60:	3f 4f       	sbci	r19, 0xFF	; 255
     d62:	69 2f       	mov	r22, r25
     d64:	70 e0       	ldi	r23, 0x00	; 0
     d66:	ad e0       	ldi	r26, 0x0D	; 13
     d68:	a2 9f       	mul	r26, r18
     d6a:	f0 01       	movw	r30, r0
     d6c:	a3 9f       	mul	r26, r19
     d6e:	f0 0d       	add	r31, r0
     d70:	11 24       	eor	r1, r1
     d72:	e7 5b       	subi	r30, 0xB7	; 183
     d74:	f9 4f       	sbci	r31, 0xF9	; 249
     d76:	e6 0f       	add	r30, r22
     d78:	f7 1f       	adc	r31, r23
     d7a:	b0 81       	ld	r27, Z
     d7c:	a4 9f       	mul	r26, r20
     d7e:	f0 01       	movw	r30, r0
     d80:	a5 9f       	mul	r26, r21
     d82:	f0 0d       	add	r31, r0
     d84:	11 24       	eor	r1, r1
     d86:	e7 5b       	subi	r30, 0xB7	; 183
     d88:	f9 4f       	sbci	r31, 0xF9	; 249
     d8a:	e6 0f       	add	r30, r22
     d8c:	f7 1f       	adc	r31, r23
     d8e:	b0 83       	st	Z, r27
			field.color[y][x] = field.color[y + 1][x];
     d90:	f9 01       	movw	r30, r18
     d92:	ee 0f       	add	r30, r30
     d94:	ff 1f       	adc	r31, r31
     d96:	e2 0f       	add	r30, r18
     d98:	f3 1f       	adc	r31, r19
     d9a:	ee 0f       	add	r30, r30
     d9c:	ff 1f       	adc	r31, r31
     d9e:	ee 0f       	add	r30, r30
     da0:	ff 1f       	adc	r31, r31
     da2:	e7 5b       	subi	r30, 0xB7	; 183
     da4:	f9 4f       	sbci	r31, 0xF9	; 249
     da6:	e6 0f       	add	r30, r22
     da8:	f7 1f       	adc	r31, r23
     daa:	ec 5f       	subi	r30, 0xFC	; 252
     dac:	fe 4f       	sbci	r31, 0xFE	; 254
     dae:	20 81       	ld	r18, Z
     db0:	fa 01       	movw	r30, r20
     db2:	ee 0f       	add	r30, r30
     db4:	ff 1f       	adc	r31, r31
     db6:	4e 0f       	add	r20, r30
     db8:	5f 1f       	adc	r21, r31
     dba:	44 0f       	add	r20, r20
     dbc:	55 1f       	adc	r21, r21
     dbe:	44 0f       	add	r20, r20
     dc0:	55 1f       	adc	r21, r21
     dc2:	47 5b       	subi	r20, 0xB7	; 183
     dc4:	59 4f       	sbci	r21, 0xF9	; 249
     dc6:	46 0f       	add	r20, r22
     dc8:	57 1f       	adc	r21, r23
     dca:	fa 01       	movw	r30, r20
     dcc:	ec 5f       	subi	r30, 0xFC	; 252
     dce:	fe 4f       	sbci	r31, 0xFE	; 254
     dd0:	20 83       	st	Z, r18
	
	byte x, y;
	//Copy top row to bottom
	for (y = startRow; y < row - 1; y++) // y = startRow - 1;
	{
		for (x = 0; x < column; x++) 
     dd2:	9f 5f       	subi	r25, 0xFF	; 255
     dd4:	01 c0       	rjmp	.+2      	; 0xdd8 <moveFieldDownOne+0x88>
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	9c 30       	cpi	r25, 0x0C	; 12
     dda:	08 f4       	brcc	.+2      	; 0xdde <moveFieldDownOne+0x8e>
     ddc:	bd cf       	rjmp	.-134    	; 0xd58 <moveFieldDownOne+0x8>
		return;
	}
	
	byte x, y;
	//Copy top row to bottom
	for (y = startRow; y < row - 1; y++) // y = startRow - 1;
     dde:	8f 5f       	subi	r24, 0xFF	; 255
     de0:	83 31       	cpi	r24, 0x13	; 19
     de2:	c8 f3       	brcs	.-14     	; 0xdd6 <moveFieldDownOne+0x86>
     de4:	08 95       	ret

00000de6 <checkFullLines>:
		}
	}
}

void checkFullLines() 
{
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
	int x, y;
	int minY = 0;
     df2:	c0 e0       	ldi	r28, 0x00	; 0
     df4:	d0 e0       	ldi	r29, 0x00	; 0
	for (y = (row - 1); y >= minY; y--) 
     df6:	03 e1       	ldi	r16, 0x13	; 19
     df8:	10 e0       	ldi	r17, 0x00	; 0
     dfa:	64 c0       	rjmp	.+200    	; 0xec4 <checkFullLines+0xde>
	{
		//Add number of leds that are on
		byte rowSum = 0;
		for (x = 0; x < 12; x++) 
		{
			rowSum = rowSum + (field.pix[y][x]);
     dfc:	3d e0       	ldi	r19, 0x0D	; 13
     dfe:	30 9f       	mul	r19, r16
     e00:	f0 01       	movw	r30, r0
     e02:	31 9f       	mul	r19, r17
     e04:	f0 0d       	add	r31, r0
     e06:	11 24       	eor	r1, r1
     e08:	e7 5b       	subi	r30, 0xB7	; 183
     e0a:	f9 4f       	sbci	r31, 0xF9	; 249
     e0c:	e8 0f       	add	r30, r24
     e0e:	f9 1f       	adc	r31, r25
     e10:	30 81       	ld	r19, Z
     e12:	23 0f       	add	r18, r19
	int minY = 0;
	for (y = (row - 1); y >= minY; y--) 
	{
		//Add number of leds that are on
		byte rowSum = 0;
		for (x = 0; x < 12; x++) 
     e14:	01 96       	adiw	r24, 0x01	; 1
     e16:	03 c0       	rjmp	.+6      	; 0xe1e <checkFullLines+0x38>
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	8c 30       	cpi	r24, 0x0C	; 12
     e20:	91 05       	cpc	r25, r1
     e22:	64 f3       	brlt	.-40     	; 0xdfc <checkFullLines+0x16>
		{
			rowSum = rowSum + (field.pix[y][x]);
		}
		if (rowSum >= 12) 
     e24:	2c 30       	cpi	r18, 0x0C	; 12
     e26:	c0 f4       	brcc	.+48     	; 0xe58 <checkFullLines+0x72>
     e28:	4b c0       	rjmp	.+150    	; 0xec0 <checkFullLines+0xda>
		{
			//Found full row, animate its removal
			for (x = 0; x < 12; x++) 
			{
				field.pix[y][x] = 0;
     e2a:	8d e0       	ldi	r24, 0x0D	; 13
     e2c:	80 9f       	mul	r24, r16
     e2e:	f0 01       	movw	r30, r0
     e30:	81 9f       	mul	r24, r17
     e32:	f0 0d       	add	r31, r0
     e34:	11 24       	eor	r1, r1
     e36:	e7 5b       	subi	r30, 0xB7	; 183
     e38:	f9 4f       	sbci	r31, 0xF9	; 249
     e3a:	ee 0d       	add	r30, r14
     e3c:	ff 1d       	adc	r31, r15
     e3e:	10 82       	st	Z, r1
				printField();
     e40:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printField>
     e44:	87 ee       	ldi	r24, 0xE7	; 231
     e46:	93 e0       	ldi	r25, 0x03	; 3
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <checkFullLines+0x62>
     e4c:	00 c0       	rjmp	.+0      	; 0xe4e <checkFullLines+0x68>
     e4e:	00 00       	nop
			rowSum = rowSum + (field.pix[y][x]);
		}
		if (rowSum >= 12) 
		{
			//Found full row, animate its removal
			for (x = 0; x < 12; x++) 
     e50:	9f ef       	ldi	r25, 0xFF	; 255
     e52:	e9 1a       	sub	r14, r25
     e54:	f9 0a       	sbc	r15, r25
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <checkFullLines+0x76>
     e58:	e1 2c       	mov	r14, r1
     e5a:	f1 2c       	mov	r15, r1
     e5c:	2c e0       	ldi	r18, 0x0C	; 12
     e5e:	e2 16       	cp	r14, r18
     e60:	f1 04       	cpc	r15, r1
     e62:	1c f3       	brlt	.-58     	; 0xe2a <checkFullLines+0x44>
				field.pix[y][x] = 0;
				printField();
				_delay_us(10 * ws2812_resettime);
			}
			//Move all upper rows down by one
			moveFieldDownOne(y);
     e64:	80 2f       	mov	r24, r16
     e66:	0e 94 a8 06 	call	0xd50	; 0xd50 <moveFieldDownOne>
			y++; minY++;
     e6a:	0f 5f       	subi	r16, 0xFF	; 255
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	21 96       	adiw	r28, 0x01	; 1
			printField();
     e70:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printField>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     e74:	8f ef       	ldi	r24, 0xFF	; 255
     e76:	90 e7       	ldi	r25, 0x70	; 112
     e78:	22 e0       	ldi	r18, 0x02	; 2
     e7a:	81 50       	subi	r24, 0x01	; 1
     e7c:	90 40       	sbci	r25, 0x00	; 0
     e7e:	20 40       	sbci	r18, 0x00	; 0
     e80:	e1 f7       	brne	.-8      	; 0xe7a <checkFullLines+0x94>
     e82:	00 c0       	rjmp	.+0      	; 0xe84 <checkFullLines+0x9e>
     e84:	00 00       	nop
			_delay_ms(100);

			nbRowsThisLevel++; nbRowsTotal++;
     e86:	80 91 19 06 	lds	r24, 0x0619	; 0x800619 <nbRowsThisLevel>
     e8a:	8f 5f       	subi	r24, 0xFF	; 255
     e8c:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <nbRowsThisLevel>
     e90:	80 91 47 06 	lds	r24, 0x0647	; 0x800647 <nbRowsTotal>
     e94:	90 91 48 06 	lds	r25, 0x0648	; 0x800648 <nbRowsTotal+0x1>
     e98:	01 96       	adiw	r24, 0x01	; 1
     e9a:	90 93 48 06 	sts	0x0648, r25	; 0x800648 <nbRowsTotal+0x1>
     e9e:	80 93 47 06 	sts	0x0647, r24	; 0x800647 <nbRowsTotal>
				//Increase brick fall speed
				if (falltime > 40)
     ea2:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <falltime>
     ea6:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <falltime+0x1>
     eaa:	89 97       	sbiw	r24, 0x29	; 41
     eac:	4c f0       	brlt	.+18     	; 0xec0 <checkFullLines+0xda>
				{
					falltime -= 20;
     eae:	80 91 74 02 	lds	r24, 0x0274	; 0x800274 <falltime>
     eb2:	90 91 75 02 	lds	r25, 0x0275	; 0x800275 <falltime+0x1>
     eb6:	44 97       	sbiw	r24, 0x14	; 20
     eb8:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <falltime+0x1>
     ebc:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <falltime>

void checkFullLines() 
{
	int x, y;
	int minY = 0;
	for (y = (row - 1); y >= minY; y--) 
     ec0:	01 50       	subi	r16, 0x01	; 1
     ec2:	11 09       	sbc	r17, r1
     ec4:	0c 17       	cp	r16, r28
     ec6:	1d 07       	cpc	r17, r29
     ec8:	0c f0       	brlt	.+2      	; 0xecc <checkFullLines+0xe6>
     eca:	a6 cf       	rjmp	.-180    	; 0xe18 <checkFullLines+0x32>
				{
					falltime -= 20;
				}
		}
	}
}
     ecc:	df 91       	pop	r29
     ece:	cf 91       	pop	r28
     ed0:	1f 91       	pop	r17
     ed2:	0f 91       	pop	r16
     ed4:	ff 90       	pop	r15
     ed6:	ef 90       	pop	r14
     ed8:	08 95       	ret

00000eda <clearField>:

void clearField()
{
	for (int x = 0; x < column; x++)
     eda:	40 e0       	ldi	r20, 0x00	; 0
     edc:	50 e0       	ldi	r21, 0x00	; 0
     ede:	14 c0       	rjmp	.+40     	; 0xf08 <clearField+0x2e>
	{
		for (int y = 0; y < row; y++)
		{
			field.pix[y][x] = 0;
     ee0:	2d e0       	ldi	r18, 0x0D	; 13
     ee2:	28 9f       	mul	r18, r24
     ee4:	f0 01       	movw	r30, r0
     ee6:	29 9f       	mul	r18, r25
     ee8:	f0 0d       	add	r31, r0
     eea:	11 24       	eor	r1, r1
     eec:	e7 5b       	subi	r30, 0xB7	; 183
     eee:	f9 4f       	sbci	r31, 0xF9	; 249
     ef0:	e4 0f       	add	r30, r20
     ef2:	f5 1f       	adc	r31, r21
     ef4:	10 82       	st	Z, r1

void clearField()
{
	for (int x = 0; x < column; x++)
	{
		for (int y = 0; y < row; y++)
     ef6:	01 96       	adiw	r24, 0x01	; 1
     ef8:	02 c0       	rjmp	.+4      	; 0xefe <clearField+0x24>
     efa:	80 e0       	ldi	r24, 0x00	; 0
     efc:	90 e0       	ldi	r25, 0x00	; 0
     efe:	84 31       	cpi	r24, 0x14	; 20
     f00:	91 05       	cpc	r25, r1
     f02:	74 f3       	brlt	.-36     	; 0xee0 <clearField+0x6>
	}
}

void clearField()
{
	for (int x = 0; x < column; x++)
     f04:	4f 5f       	subi	r20, 0xFF	; 255
     f06:	5f 4f       	sbci	r21, 0xFF	; 255
     f08:	4c 30       	cpi	r20, 0x0C	; 12
     f0a:	51 05       	cpc	r21, r1
     f0c:	b4 f3       	brlt	.-20     	; 0xefa <clearField+0x20>
		for (int y = 0; y < row; y++)
		{
			field.pix[y][x] = 0;
		}
	}
}
     f0e:	08 95       	ret

00000f10 <clearTable>:

void clearTable()
{
	for(int i = MAXPIX; i > 0; i--)
     f10:	8c e2       	ldi	r24, 0x2C	; 44
     f12:	91 e0       	ldi	r25, 0x01	; 1
     f14:	0b c0       	rjmp	.+22     	; 0xf2c <clearTable+0x1c>
	{
		led[i-1].r=0;led[i-1].g=0;led[i-1].b=0;
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	fc 01       	movw	r30, r24
     f1a:	ee 0f       	add	r30, r30
     f1c:	ff 1f       	adc	r31, r31
     f1e:	e8 0f       	add	r30, r24
     f20:	f9 1f       	adc	r31, r25
     f22:	eb 56       	subi	r30, 0x6B	; 107
     f24:	fd 4f       	sbci	r31, 0xFD	; 253
     f26:	11 82       	std	Z+1, r1	; 0x01
     f28:	10 82       	st	Z, r1
     f2a:	12 82       	std	Z+2, r1	; 0x02
	}
}

void clearTable()
{
	for(int i = MAXPIX; i > 0; i--)
     f2c:	18 16       	cp	r1, r24
     f2e:	19 06       	cpc	r1, r25
     f30:	94 f3       	brlt	.-28     	; 0xf16 <clearTable+0x6>
	{
		led[i-1].r=0;led[i-1].g=0;led[i-1].b=0;
	}
	ws2812_setleds(led, MAXPIX);
     f32:	6c e2       	ldi	r22, 0x2C	; 44
     f34:	71 e0       	ldi	r23, 0x01	; 1
     f36:	85 e9       	ldi	r24, 0x95	; 149
     f38:	92 e0       	ldi	r25, 0x02	; 2
     f3a:	0e 94 c3 01 	call	0x386	; 0x386 <ws2812_setleds>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     f3e:	85 e8       	ldi	r24, 0x85	; 133
     f40:	8a 95       	dec	r24
     f42:	f1 f7       	brne	.-4      	; 0xf40 <clearTable+0x30>
     f44:	00 00       	nop
     f46:	08 95       	ret

00000f48 <Pause>:
};


//edit to show bars
byte Pause(byte paus)
{
     f48:	cf 93       	push	r28
     f4a:	c8 2f       	mov	r28, r24
	if (paus > 1)
     f4c:	82 30       	cpi	r24, 0x02	; 2
     f4e:	20 f0       	brcs	.+8      	; 0xf58 <Pause+0x10>
	{
		paus = 0;
		printField();
     f50:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printField>
		return paus;
     f54:	80 e0       	ldi	r24, 0x00	; 0
     f56:	03 c0       	rjmp	.+6      	; 0xf5e <Pause+0x16>
	}
	clearTable();
     f58:	0e 94 88 07 	call	0xf10	; 0xf10 <clearTable>
	return paus;
     f5c:	8c 2f       	mov	r24, r28
}
     f5e:	cf 91       	pop	r28
     f60:	08 95       	ret

00000f62 <menu>:
}

//This menu will show tetris pieces at the bottom of the screen before the game starts
void menu()
{	
	for (int i = 0; i <= 3; i++)  
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	18 c0       	rjmp	.+48     	; 0xf98 <menu+0x36>
	{
		led[pgm_read_byte(&(matrix[0][i]))] = colors[0]; // I on its side
     f68:	fc 01       	movw	r30, r24
     f6a:	ee 0f       	add	r30, r30
     f6c:	ff 1f       	adc	r31, r31
     f6e:	e8 59       	subi	r30, 0x98	; 152
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	e4 91       	lpm	r30, Z
     f74:	f0 e0       	ldi	r31, 0x00	; 0
     f76:	9f 01       	movw	r18, r30
     f78:	22 0f       	add	r18, r18
     f7a:	33 1f       	adc	r19, r19
     f7c:	e2 0f       	add	r30, r18
     f7e:	f3 1f       	adc	r31, r19
     f80:	eb 56       	subi	r30, 0x6B	; 107
     f82:	fd 4f       	sbci	r31, 0xFD	; 253
     f84:	20 91 02 01 	lds	r18, 0x0102	; 0x800102 <colors>
     f88:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <colors+0x1>
     f8c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <colors+0x2>
     f90:	20 83       	st	Z, r18
     f92:	31 83       	std	Z+1, r19	; 0x01
     f94:	42 83       	std	Z+2, r20	; 0x02
}

//This menu will show tetris pieces at the bottom of the screen before the game starts
void menu()
{	
	for (int i = 0; i <= 3; i++)  
     f96:	01 96       	adiw	r24, 0x01	; 1
     f98:	84 30       	cpi	r24, 0x04	; 4
     f9a:	91 05       	cpc	r25, r1
     f9c:	2c f3       	brlt	.-54     	; 0xf68 <menu+0x6>
     f9e:	80 e0       	ldi	r24, 0x00	; 0
     fa0:	90 e0       	ldi	r25, 0x00	; 0
     fa2:	27 c0       	rjmp	.+78     	; 0xff2 <menu+0x90>
	}
	
	// Orange T 
	for (int i = 0; i <= 2; i++) 
	{
		led[pgm_read_byte(&(matrix[1][i]))] = colors[1];
     fa4:	fc 01       	movw	r30, r24
     fa6:	3c 96       	adiw	r30, 0x0c	; 12
     fa8:	ee 0f       	add	r30, r30
     faa:	ff 1f       	adc	r31, r31
     fac:	e8 59       	subi	r30, 0x98	; 152
     fae:	ff 4f       	sbci	r31, 0xFF	; 255
     fb0:	e4 91       	lpm	r30, Z
     fb2:	f0 e0       	ldi	r31, 0x00	; 0
     fb4:	9f 01       	movw	r18, r30
     fb6:	22 0f       	add	r18, r18
     fb8:	33 1f       	adc	r19, r19
     fba:	e2 0f       	add	r30, r18
     fbc:	f3 1f       	adc	r31, r19
     fbe:	eb 56       	subi	r30, 0x6B	; 107
     fc0:	fd 4f       	sbci	r31, 0xFD	; 253
     fc2:	20 91 05 01 	lds	r18, 0x0105	; 0x800105 <colors+0x3>
     fc6:	30 91 06 01 	lds	r19, 0x0106	; 0x800106 <colors+0x4>
     fca:	40 91 07 01 	lds	r20, 0x0107	; 0x800107 <colors+0x5>
     fce:	20 83       	st	Z, r18
     fd0:	31 83       	std	Z+1, r19	; 0x01
     fd2:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[2][1]))] = colors[1]; 
     fd4:	ea e9       	ldi	r30, 0x9A	; 154
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	e4 91       	lpm	r30, Z
     fda:	f0 e0       	ldi	r31, 0x00	; 0
     fdc:	bf 01       	movw	r22, r30
     fde:	66 0f       	add	r22, r22
     fe0:	77 1f       	adc	r23, r23
     fe2:	e6 0f       	add	r30, r22
     fe4:	f7 1f       	adc	r31, r23
     fe6:	eb 56       	subi	r30, 0x6B	; 107
     fe8:	fd 4f       	sbci	r31, 0xFD	; 253
     fea:	20 83       	st	Z, r18
     fec:	31 83       	std	Z+1, r19	; 0x01
     fee:	42 83       	std	Z+2, r20	; 0x02
	{
		led[pgm_read_byte(&(matrix[0][i]))] = colors[0]; // I on its side
	}
	
	// Orange T 
	for (int i = 0; i <= 2; i++) 
     ff0:	01 96       	adiw	r24, 0x01	; 1
     ff2:	83 30       	cpi	r24, 0x03	; 3
     ff4:	91 05       	cpc	r25, r1
     ff6:	b4 f2       	brlt	.-84     	; 0xfa4 <menu+0x42>
		led[pgm_read_byte(&(matrix[1][i]))] = colors[1];
		led[pgm_read_byte(&(matrix[2][1]))] = colors[1]; 
	}
	
	// Upside down L
		led[pgm_read_byte(&(matrix[0][4]))] = colors[2];
     ff8:	e0 e7       	ldi	r30, 0x70	; 112
     ffa:	f0 e0       	ldi	r31, 0x00	; 0
     ffc:	e4 91       	lpm	r30, Z
     ffe:	f0 e0       	ldi	r31, 0x00	; 0
    1000:	cf 01       	movw	r24, r30
    1002:	88 0f       	add	r24, r24
    1004:	99 1f       	adc	r25, r25
    1006:	e8 0f       	add	r30, r24
    1008:	f9 1f       	adc	r31, r25
    100a:	eb 56       	subi	r30, 0x6B	; 107
    100c:	fd 4f       	sbci	r31, 0xFD	; 253
    100e:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <colors+0x6>
    1012:	90 91 09 01 	lds	r25, 0x0109	; 0x800109 <colors+0x7>
    1016:	a0 91 0a 01 	lds	r26, 0x010A	; 0x80010a <colors+0x8>
    101a:	80 83       	st	Z, r24
    101c:	91 83       	std	Z+1, r25	; 0x01
    101e:	a2 83       	std	Z+2, r26	; 0x02
		led[pgm_read_byte(&(matrix[1][4]))] = colors[2];
    1020:	e8 e8       	ldi	r30, 0x88	; 136
    1022:	f0 e0       	ldi	r31, 0x00	; 0
    1024:	e4 91       	lpm	r30, Z
    1026:	f0 e0       	ldi	r31, 0x00	; 0
    1028:	9f 01       	movw	r18, r30
    102a:	22 0f       	add	r18, r18
    102c:	33 1f       	adc	r19, r19
    102e:	e2 0f       	add	r30, r18
    1030:	f3 1f       	adc	r31, r19
    1032:	eb 56       	subi	r30, 0x6B	; 107
    1034:	fd 4f       	sbci	r31, 0xFD	; 253
    1036:	80 83       	st	Z, r24
    1038:	91 83       	std	Z+1, r25	; 0x01
    103a:	a2 83       	std	Z+2, r26	; 0x02
		led[pgm_read_byte(&(matrix[2][4]))] = colors[2];
    103c:	e0 ea       	ldi	r30, 0xA0	; 160
    103e:	f0 e0       	ldi	r31, 0x00	; 0
    1040:	e4 91       	lpm	r30, Z
    1042:	f0 e0       	ldi	r31, 0x00	; 0
    1044:	9f 01       	movw	r18, r30
    1046:	22 0f       	add	r18, r18
    1048:	33 1f       	adc	r19, r19
    104a:	e2 0f       	add	r30, r18
    104c:	f3 1f       	adc	r31, r19
    104e:	eb 56       	subi	r30, 0x6B	; 107
    1050:	fd 4f       	sbci	r31, 0xFD	; 253
    1052:	80 83       	st	Z, r24
    1054:	91 83       	std	Z+1, r25	; 0x01
    1056:	a2 83       	std	Z+2, r26	; 0x02
		
		led[pgm_read_byte(&(matrix[2][3]))] = colors[2];
    1058:	ee e9       	ldi	r30, 0x9E	; 158
    105a:	f0 e0       	ldi	r31, 0x00	; 0
    105c:	e4 91       	lpm	r30, Z
    105e:	f0 e0       	ldi	r31, 0x00	; 0
    1060:	9f 01       	movw	r18, r30
    1062:	22 0f       	add	r18, r18
    1064:	33 1f       	adc	r19, r19
    1066:	e2 0f       	add	r30, r18
    1068:	f3 1f       	adc	r31, r19
    106a:	eb 56       	subi	r30, 0x6B	; 107
    106c:	fd 4f       	sbci	r31, 0xFD	; 253
    106e:	80 83       	st	Z, r24
    1070:	91 83       	std	Z+1, r25	; 0x01
    1072:	a2 83       	std	Z+2, r26	; 0x02
		
	// Upside down T
	
	for (int i = 1; i <= 3; i++)
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	27 c0       	rjmp	.+78     	; 0x10c8 <menu+0x166>
	{
		led[pgm_read_byte(&(matrix[3][i]))] = colors[7];
    107a:	fc 01       	movw	r30, r24
    107c:	b4 96       	adiw	r30, 0x24	; 36
    107e:	ee 0f       	add	r30, r30
    1080:	ff 1f       	adc	r31, r31
    1082:	e8 59       	subi	r30, 0x98	; 152
    1084:	ff 4f       	sbci	r31, 0xFF	; 255
    1086:	e4 91       	lpm	r30, Z
    1088:	f0 e0       	ldi	r31, 0x00	; 0
    108a:	9f 01       	movw	r18, r30
    108c:	22 0f       	add	r18, r18
    108e:	33 1f       	adc	r19, r19
    1090:	e2 0f       	add	r30, r18
    1092:	f3 1f       	adc	r31, r19
    1094:	eb 56       	subi	r30, 0x6B	; 107
    1096:	fd 4f       	sbci	r31, 0xFD	; 253
    1098:	20 91 17 01 	lds	r18, 0x0117	; 0x800117 <colors+0x15>
    109c:	30 91 18 01 	lds	r19, 0x0118	; 0x800118 <colors+0x16>
    10a0:	40 91 19 01 	lds	r20, 0x0119	; 0x800119 <colors+0x17>
    10a4:	20 83       	st	Z, r18
    10a6:	31 83       	std	Z+1, r19	; 0x01
    10a8:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[2][2]))] = colors[7];
    10aa:	ec e9       	ldi	r30, 0x9C	; 156
    10ac:	f0 e0       	ldi	r31, 0x00	; 0
    10ae:	e4 91       	lpm	r30, Z
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	bf 01       	movw	r22, r30
    10b4:	66 0f       	add	r22, r22
    10b6:	77 1f       	adc	r23, r23
    10b8:	e6 0f       	add	r30, r22
    10ba:	f7 1f       	adc	r31, r23
    10bc:	eb 56       	subi	r30, 0x6B	; 107
    10be:	fd 4f       	sbci	r31, 0xFD	; 253
    10c0:	20 83       	st	Z, r18
    10c2:	31 83       	std	Z+1, r19	; 0x01
    10c4:	42 83       	std	Z+2, r20	; 0x02
		
		led[pgm_read_byte(&(matrix[2][3]))] = colors[2];
		
	// Upside down T
	
	for (int i = 1; i <= 3; i++)
    10c6:	01 96       	adiw	r24, 0x01	; 1
    10c8:	84 30       	cpi	r24, 0x04	; 4
    10ca:	91 05       	cpc	r25, r1
    10cc:	b4 f2       	brlt	.-84     	; 0x107a <menu+0x118>
    10ce:	85 e0       	ldi	r24, 0x05	; 5
    10d0:	90 e0       	ldi	r25, 0x00	; 0
    10d2:	26 c0       	rjmp	.+76     	; 0x1120 <menu+0x1be>
	}
		
	// L on its side
	for (int i = 5; i <= 7; i++)  
	{
		led[pgm_read_byte(&(matrix[0][i]))] = colors[4];
    10d4:	fc 01       	movw	r30, r24
    10d6:	ee 0f       	add	r30, r30
    10d8:	ff 1f       	adc	r31, r31
    10da:	e8 59       	subi	r30, 0x98	; 152
    10dc:	ff 4f       	sbci	r31, 0xFF	; 255
    10de:	e4 91       	lpm	r30, Z
    10e0:	f0 e0       	ldi	r31, 0x00	; 0
    10e2:	9f 01       	movw	r18, r30
    10e4:	22 0f       	add	r18, r18
    10e6:	33 1f       	adc	r19, r19
    10e8:	e2 0f       	add	r30, r18
    10ea:	f3 1f       	adc	r31, r19
    10ec:	eb 56       	subi	r30, 0x6B	; 107
    10ee:	fd 4f       	sbci	r31, 0xFD	; 253
    10f0:	20 91 0e 01 	lds	r18, 0x010E	; 0x80010e <colors+0xc>
    10f4:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <colors+0xd>
    10f8:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <colors+0xe>
    10fc:	20 83       	st	Z, r18
    10fe:	31 83       	std	Z+1, r19	; 0x01
    1100:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[1][5]))] = colors[4];	
    1102:	ea e8       	ldi	r30, 0x8A	; 138
    1104:	f0 e0       	ldi	r31, 0x00	; 0
    1106:	e4 91       	lpm	r30, Z
    1108:	f0 e0       	ldi	r31, 0x00	; 0
    110a:	bf 01       	movw	r22, r30
    110c:	66 0f       	add	r22, r22
    110e:	77 1f       	adc	r23, r23
    1110:	e6 0f       	add	r30, r22
    1112:	f7 1f       	adc	r31, r23
    1114:	eb 56       	subi	r30, 0x6B	; 107
    1116:	fd 4f       	sbci	r31, 0xFD	; 253
    1118:	20 83       	st	Z, r18
    111a:	31 83       	std	Z+1, r19	; 0x01
    111c:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[3][i]))] = colors[7];
		led[pgm_read_byte(&(matrix[2][2]))] = colors[7];
	}
		
	// L on its side
	for (int i = 5; i <= 7; i++)  
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	88 30       	cpi	r24, 0x08	; 8
    1122:	91 05       	cpc	r25, r1
    1124:	bc f2       	brlt	.-82     	; 0x10d4 <menu+0x172>
		led[pgm_read_byte(&(matrix[0][i]))] = colors[4];
		led[pgm_read_byte(&(matrix[1][5]))] = colors[4];	
	}
	
	// Rotated s
		led[pgm_read_byte(&(matrix[3][5]))] = colors[5];
    1126:	ea eb       	ldi	r30, 0xBA	; 186
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	e4 91       	lpm	r30, Z
    112c:	f0 e0       	ldi	r31, 0x00	; 0
    112e:	cf 01       	movw	r24, r30
    1130:	88 0f       	add	r24, r24
    1132:	99 1f       	adc	r25, r25
    1134:	e8 0f       	add	r30, r24
    1136:	f9 1f       	adc	r31, r25
    1138:	eb 56       	subi	r30, 0x6B	; 107
    113a:	fd 4f       	sbci	r31, 0xFD	; 253
    113c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <colors+0xf>
    1140:	90 91 12 01 	lds	r25, 0x0112	; 0x800112 <colors+0x10>
    1144:	a0 91 13 01 	lds	r26, 0x0113	; 0x800113 <colors+0x11>
    1148:	80 83       	st	Z, r24
    114a:	91 83       	std	Z+1, r25	; 0x01
    114c:	a2 83       	std	Z+2, r26	; 0x02
		led[pgm_read_byte(&(matrix[2][5]))] = colors[5];
    114e:	e2 ea       	ldi	r30, 0xA2	; 162
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	e4 91       	lpm	r30, Z
    1154:	f0 e0       	ldi	r31, 0x00	; 0
    1156:	9f 01       	movw	r18, r30
    1158:	22 0f       	add	r18, r18
    115a:	33 1f       	adc	r19, r19
    115c:	e2 0f       	add	r30, r18
    115e:	f3 1f       	adc	r31, r19
    1160:	eb 56       	subi	r30, 0x6B	; 107
    1162:	fd 4f       	sbci	r31, 0xFD	; 253
    1164:	80 83       	st	Z, r24
    1166:	91 83       	std	Z+1, r25	; 0x01
    1168:	a2 83       	std	Z+2, r26	; 0x02
		led[pgm_read_byte(&(matrix[2][6]))] = colors[5];
    116a:	e4 ea       	ldi	r30, 0xA4	; 164
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	e4 91       	lpm	r30, Z
    1170:	f0 e0       	ldi	r31, 0x00	; 0
    1172:	9f 01       	movw	r18, r30
    1174:	22 0f       	add	r18, r18
    1176:	33 1f       	adc	r19, r19
    1178:	e2 0f       	add	r30, r18
    117a:	f3 1f       	adc	r31, r19
    117c:	eb 56       	subi	r30, 0x6B	; 107
    117e:	fd 4f       	sbci	r31, 0xFD	; 253
    1180:	80 83       	st	Z, r24
    1182:	91 83       	std	Z+1, r25	; 0x01
    1184:	a2 83       	std	Z+2, r26	; 0x02
		led[pgm_read_byte(&(matrix[1][6]))] = colors[5];
    1186:	ec e8       	ldi	r30, 0x8C	; 140
    1188:	f0 e0       	ldi	r31, 0x00	; 0
    118a:	e4 91       	lpm	r30, Z
    118c:	f0 e0       	ldi	r31, 0x00	; 0
    118e:	9f 01       	movw	r18, r30
    1190:	22 0f       	add	r18, r18
    1192:	33 1f       	adc	r19, r19
    1194:	e2 0f       	add	r30, r18
    1196:	f3 1f       	adc	r31, r19
    1198:	eb 56       	subi	r30, 0x6B	; 107
    119a:	fd 4f       	sbci	r31, 0xFD	; 253
    119c:	80 83       	st	Z, r24
    119e:	91 83       	std	Z+1, r25	; 0x01
    11a0:	a2 83       	std	Z+2, r26	; 0x02
		
	// Flat I
	for (int i = 6; i <= 9; i++)
    11a2:	86 e0       	ldi	r24, 0x06	; 6
    11a4:	90 e0       	ldi	r25, 0x00	; 0
    11a6:	19 c0       	rjmp	.+50     	; 0x11da <menu+0x278>
	{
		led[pgm_read_byte(&(matrix[3][i]))] = colors[3];
    11a8:	fc 01       	movw	r30, r24
    11aa:	b4 96       	adiw	r30, 0x24	; 36
    11ac:	ee 0f       	add	r30, r30
    11ae:	ff 1f       	adc	r31, r31
    11b0:	e8 59       	subi	r30, 0x98	; 152
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	e4 91       	lpm	r30, Z
    11b6:	f0 e0       	ldi	r31, 0x00	; 0
    11b8:	9f 01       	movw	r18, r30
    11ba:	22 0f       	add	r18, r18
    11bc:	33 1f       	adc	r19, r19
    11be:	e2 0f       	add	r30, r18
    11c0:	f3 1f       	adc	r31, r19
    11c2:	eb 56       	subi	r30, 0x6B	; 107
    11c4:	fd 4f       	sbci	r31, 0xFD	; 253
    11c6:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <colors+0x9>
    11ca:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <colors+0xa>
    11ce:	40 91 0d 01 	lds	r20, 0x010D	; 0x80010d <colors+0xb>
    11d2:	20 83       	st	Z, r18
    11d4:	31 83       	std	Z+1, r19	; 0x01
    11d6:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[2][5]))] = colors[5];
		led[pgm_read_byte(&(matrix[2][6]))] = colors[5];
		led[pgm_read_byte(&(matrix[1][6]))] = colors[5];
		
	// Flat I
	for (int i = 6; i <= 9; i++)
    11d8:	01 96       	adiw	r24, 0x01	; 1
    11da:	8a 30       	cpi	r24, 0x0A	; 10
    11dc:	91 05       	cpc	r25, r1
    11de:	24 f3       	brlt	.-56     	; 0x11a8 <menu+0x246>
    11e0:	89 e0       	ldi	r24, 0x09	; 9
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	53 c0       	rjmp	.+166    	; 0x128c <menu+0x32a>
	
	
	// L on its side 
	for (int i = 9; i <= 11; i++)  
	{
		led[pgm_read_byte(&(matrix[0][i]))] = colors[8];
    11e6:	fc 01       	movw	r30, r24
    11e8:	ee 0f       	add	r30, r30
    11ea:	ff 1f       	adc	r31, r31
    11ec:	e8 59       	subi	r30, 0x98	; 152
    11ee:	ff 4f       	sbci	r31, 0xFF	; 255
    11f0:	e4 91       	lpm	r30, Z
    11f2:	f0 e0       	ldi	r31, 0x00	; 0
    11f4:	9f 01       	movw	r18, r30
    11f6:	22 0f       	add	r18, r18
    11f8:	33 1f       	adc	r19, r19
    11fa:	e2 0f       	add	r30, r18
    11fc:	f3 1f       	adc	r31, r19
    11fe:	eb 56       	subi	r30, 0x6B	; 107
    1200:	fd 4f       	sbci	r31, 0xFD	; 253
    1202:	20 91 1a 01 	lds	r18, 0x011A	; 0x80011a <colors+0x18>
    1206:	30 91 1b 01 	lds	r19, 0x011B	; 0x80011b <colors+0x19>
    120a:	40 91 1c 01 	lds	r20, 0x011C	; 0x80011c <colors+0x1a>
    120e:	20 83       	st	Z, r18
    1210:	31 83       	std	Z+1, r19	; 0x01
    1212:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[1][11]))] = colors[8];
    1214:	e6 e9       	ldi	r30, 0x96	; 150
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	e4 91       	lpm	r30, Z
    121a:	f0 e0       	ldi	r31, 0x00	; 0
    121c:	bf 01       	movw	r22, r30
    121e:	66 0f       	add	r22, r22
    1220:	77 1f       	adc	r23, r23
    1222:	e6 0f       	add	r30, r22
    1224:	f7 1f       	adc	r31, r23
    1226:	eb 56       	subi	r30, 0x6B	; 107
    1228:	fd 4f       	sbci	r31, 0xFD	; 253
    122a:	20 83       	st	Z, r18
    122c:	31 83       	std	Z+1, r19	; 0x01
    122e:	42 83       	std	Z+2, r20	; 0x02
		
		// blue Q 
		if (i < 11)
    1230:	8b 30       	cpi	r24, 0x0B	; 11
    1232:	91 05       	cpc	r25, r1
    1234:	54 f5       	brge	.+84     	; 0x128a <menu+0x328>
		{
		led[pgm_read_byte(&(matrix[1][i]))] = colors[9];
    1236:	fc 01       	movw	r30, r24
    1238:	3c 96       	adiw	r30, 0x0c	; 12
    123a:	ee 0f       	add	r30, r30
    123c:	ff 1f       	adc	r31, r31
    123e:	e8 59       	subi	r30, 0x98	; 152
    1240:	ff 4f       	sbci	r31, 0xFF	; 255
    1242:	e4 91       	lpm	r30, Z
    1244:	f0 e0       	ldi	r31, 0x00	; 0
    1246:	9f 01       	movw	r18, r30
    1248:	22 0f       	add	r18, r18
    124a:	33 1f       	adc	r19, r19
    124c:	e2 0f       	add	r30, r18
    124e:	f3 1f       	adc	r31, r19
    1250:	eb 56       	subi	r30, 0x6B	; 107
    1252:	fd 4f       	sbci	r31, 0xFD	; 253
    1254:	20 91 1d 01 	lds	r18, 0x011D	; 0x80011d <colors+0x1b>
    1258:	30 91 1e 01 	lds	r19, 0x011E	; 0x80011e <colors+0x1c>
    125c:	40 91 1f 01 	lds	r20, 0x011F	; 0x80011f <colors+0x1d>
    1260:	20 83       	st	Z, r18
    1262:	31 83       	std	Z+1, r19	; 0x01
    1264:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[2][i]))] = colors[9];	
    1266:	fc 01       	movw	r30, r24
    1268:	78 96       	adiw	r30, 0x18	; 24
    126a:	ee 0f       	add	r30, r30
    126c:	ff 1f       	adc	r31, r31
    126e:	e8 59       	subi	r30, 0x98	; 152
    1270:	ff 4f       	sbci	r31, 0xFF	; 255
    1272:	e4 91       	lpm	r30, Z
    1274:	f0 e0       	ldi	r31, 0x00	; 0
    1276:	bf 01       	movw	r22, r30
    1278:	66 0f       	add	r22, r22
    127a:	77 1f       	adc	r23, r23
    127c:	e6 0f       	add	r30, r22
    127e:	f7 1f       	adc	r31, r23
    1280:	eb 56       	subi	r30, 0x6B	; 107
    1282:	fd 4f       	sbci	r31, 0xFD	; 253
    1284:	20 83       	st	Z, r18
    1286:	31 83       	std	Z+1, r19	; 0x01
    1288:	42 83       	std	Z+2, r20	; 0x02
		led[pgm_read_byte(&(matrix[3][i]))] = colors[3];
	}
	
	
	// L on its side 
	for (int i = 9; i <= 11; i++)  
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	8c 30       	cpi	r24, 0x0C	; 12
    128e:	91 05       	cpc	r25, r1
    1290:	0c f4       	brge	.+2      	; 0x1294 <menu+0x332>
    1292:	a9 cf       	rjmp	.-174    	; 0x11e6 <menu+0x284>
		led[pgm_read_byte(&(matrix[2][i]))] = colors[9];	
		}
	}
	
	//led[0] = colors[3];
	ws2812_setleds(led,MAXPIX);
    1294:	6c e2       	ldi	r22, 0x2C	; 44
    1296:	71 e0       	ldi	r23, 0x01	; 1
    1298:	85 e9       	ldi	r24, 0x95	; 149
    129a:	92 e0       	ldi	r25, 0x02	; 2
    129c:	0e 94 c3 01 	call	0x386	; 0x386 <ws2812_setleds>
    12a0:	08 95       	ret

000012a2 <forcedown>:
}
*/

//Piece goes all the way down until it reached the bottom or another piece
void forcedown()
{
    12a2:	0f 93       	push	r16
    12a4:	1f 93       	push	r17
    12a6:	cf 93       	push	r28
	while (!(activeBrick.ypos == 0) || !checkFieldCollision(&activeBrick))
    12a8:	21 c0       	rjmp	.+66     	; 0x12ec <forcedown+0x4a>
	{
		activeBrick.ypos--;
    12aa:	8f ef       	ldi	r24, 0xFF	; 255
    12ac:	8c 0f       	add	r24, r28
    12ae:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <activeBrick+0x2>
		
		if (checkFieldCollision(&activeBrick))
    12b2:	8a e1       	ldi	r24, 0x1A	; 26
    12b4:	96 e0       	ldi	r25, 0x06	; 6
    12b6:	0e 94 b2 03 	call	0x764	; 0x764 <checkFieldCollision>
    12ba:	89 2b       	or	r24, r25
    12bc:	41 f0       	breq	.+16     	; 0x12ce <forcedown+0x2c>
		{
			activeBrick.ypos++;		//Go back up one
    12be:	0a e1       	ldi	r16, 0x1A	; 26
    12c0:	16 e0       	ldi	r17, 0x06	; 6
    12c2:	f8 01       	movw	r30, r16
    12c4:	c2 83       	std	Z+2, r28	; 0x02
			addActiveBrickToField();
    12c6:	0e 94 32 03 	call	0x664	; 0x664 <addActiveBrickToField>
			activeBrick.enabled = 0;//Disable brick, it is no longer moving
    12ca:	f8 01       	movw	r30, r16
    12cc:	10 82       	st	Z, r1
			//clearNext();
		}
		
		
		if (activeBrick.ypos == 0)
    12ce:	80 91 1c 06 	lds	r24, 0x061C	; 0x80061c <activeBrick+0x2>
    12d2:	81 11       	cpse	r24, r1
    12d4:	09 c0       	rjmp	.+18     	; 0x12e8 <forcedown+0x46>
		{
			addActiveBrickToField();
    12d6:	0e 94 32 03 	call	0x664	; 0x664 <addActiveBrickToField>
			activeBrick.enabled = 0;
    12da:	10 92 1a 06 	sts	0x061A, r1	; 0x80061a <activeBrick>
			printField();
    12de:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printField>
			newActiveBrick();
    12e2:	0e 94 ce 04 	call	0x99c	; 0x99c <newActiveBrick>
			//clearNext();
			break;
    12e6:	0c c0       	rjmp	.+24     	; 0x1300 <forcedown+0x5e>
		}
		printField();
    12e8:	0e 94 e4 03 	call	0x7c8	; 0x7c8 <printField>
*/

//Piece goes all the way down until it reached the bottom or another piece
void forcedown()
{
	while (!(activeBrick.ypos == 0) || !checkFieldCollision(&activeBrick))
    12ec:	c0 91 1c 06 	lds	r28, 0x061C	; 0x80061c <activeBrick+0x2>
    12f0:	c1 11       	cpse	r28, r1
    12f2:	db cf       	rjmp	.-74     	; 0x12aa <forcedown+0x8>
    12f4:	8a e1       	ldi	r24, 0x1A	; 26
    12f6:	96 e0       	ldi	r25, 0x06	; 6
    12f8:	0e 94 b2 03 	call	0x764	; 0x764 <checkFieldCollision>
    12fc:	89 2b       	or	r24, r25
    12fe:	a9 f2       	breq	.-86     	; 0x12aa <forcedown+0x8>
			break;
		}
		printField();
		
	}
}
    1300:	cf 91       	pop	r28
    1302:	1f 91       	pop	r17
    1304:	0f 91       	pop	r16
    1306:	08 95       	ret

00001308 <_exit>:
    1308:	f8 94       	cli

0000130a <__stop_program>:
    130a:	ff cf       	rjmp	.-2      	; 0x130a <__stop_program>
